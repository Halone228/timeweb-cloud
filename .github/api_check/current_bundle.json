{
    "openapi": "3.0.0",
    "info": {
        "contact": {
            "email": "info@timeweb.cloud"
        },
        "title": "Документация публичного API",
        "version": "",
        "description": "# Введение\nAPI Timeweb Cloud позволяет вам управлять ресурсами в облаке программным способом с использованием обычных HTTP-запросов.\n\nМножество функции, которые доступны в панели управления Timeweb Cloud, также доступны через API, что позволяет вам автоматизировать ваши собственные сценарии.\n\nВ этой документации сперва будет описан общий дизайн и принципы работы API, а после этого конкретные конечные точки. Также будут приведены примеры запросов к ним.\n\n\n## Запросы\nЗапросы должны выполняться по протоколу `HTTPS`, чтобы гарантировать шифрование транзакций. Поддерживаются следующие методы запроса:\n|Метод|Применение|\n|--- |--- |\n|GET|Извлекает данные о коллекциях и отдельных ресурсах.|\n|POST|Для коллекций создает новый ресурс этого типа. Также используется для выполнения действий с конкретным ресурсом.|\n|PUT|Обновляет существующий ресурс.|\n|PATCH|Некоторые ресурсы поддерживают частичное обновление, то есть обновление только части атрибутов ресурса, в этом случае вместо метода PUT будет использован PATCH.|\n|DELETE|Удаляет ресурс.|\n\nМетоды `POST`, `PUT` и `PATCH` могут включать объект в тело запроса с типом содержимого `application/json`.\n\n### Параметры в запросах\nНекоторые коллекции поддерживают пагинацию, поиск или сортировку в запросах. В параметрах запроса требуется передать:\n- `limit` — обозначает количество записей, которое необходимо вернуть\n - `offset` — указывает на смещение, относительно начала списка\n - `search` — позволяет указать набор символов для поиска\n - `sort` — можно задать правило сортировки коллекции\n\n## Ответы\nЗапросы вернут один из следующих кодов состояния ответа HTTP:\n\n|Статус|Описание|\n|--- |--- |\n|200 OK|Действие с ресурсом было выполнено успешно.|\n|201 Created|Ресурс был успешно создан. При этом ресурс может быть как уже готовым к использованию, так и находится в процессе запуска.|\n|204 No Content|Действие с ресурсом было выполнено успешно и ответ не содержит дополнительной информации в теле.|\n|400 Bad Request|Был отправлен неверный запрос, например, в нем отсутствуют обязательные параметры и т. д. Тело ответа будет содержать дополнительную информацию об ошибке.|\n|401 Unauthorized|Ошибка аутентификации.|\n|403 Forbidden|Аутентификация прошла успешно, но не достаточно прав для выполнения действия.|\n|404 Not Found|Запрашиваемый ресурс не найден.|\n|409 Conflict|Запрос конфликтует с текущим состоянием.|\n|423 Locked|Ресурс из запроса заблокирован от применения к нему указанного метода.|\n|429 Too Many Requests|Был достигнут лимит по количеству запросов в единицу времени.|\n|500 Internal Server Error|При выполнении запроса произошла какая-то внутренняя ошибка. Чтобы решить эту проблему лучше всего создать тикет в панели управления.|\n\n### Структура успешного ответа\nВсе конечные точки будут возвращать данные в формате `JSON`. Ответы на `GET`-запросы будут иметь на верхнем уровне следующую структуру атрибутов: \n|Название поля|Тип|Описание|\n|--- |--- |--- |\n|[entity_name]|object, object[], string[], number[], boolean|Динамическое поле, которое будет меняться в зависимости от запрашиваемого ресурса и будет содержать все атрибуты, необходимые для описания этого ресурса. Например, при запросе списка баз данных будет возвращаться поле `dbs`, а при запросе конкретного облачного сервера `server`. Для некоторых конечных точек в ответе может возвращаться сразу несколько ресурсов.|\n|meta|object|Опционально. Объект, который содержит вспомогательную информацию о ресурсе. Чаще всего будет встречаться при запросе коллекций и содержать поле `total`, которое будет указывать на количество элементов в коллекции.|\n|response_id|string|Опционально. В большинстве случае в ответе будет содержаться уникальный идентификатор ответа в формате UUIDv4, который однозначно указывает на ваш запрос внутри нашей системы. Если вам потребуется задать вопрос нашей поддержке, то приложив к вопросу этот идентификатор, мы сможем найти ответ на него намного быстрее. Также вы можете использовать этот идентификатор, чтобы убедиться, что это новый ответ на запрос и результат не был получен из кэша.|\n\nПример запроса на получение списка ssh-ключей:\n```\n    HTTP/2.0 200 OK\n    {\n      \"ssh_keys\":[\n          {\n            \"body\":\"ssh-rsa AAAAB3NzaC1sdfghjkOAsBwWhs= example@device.local\",\n            \"created_at\":\"2021-09-15T19:52:27Z\",\n            \"expired_at\":null,\n            \"id\":5297,\n            \"is_default\":false,\n            \"name\":\"example@device.local\",\n            \"used_at\":null,\n            \"used_by\":[]\n          }\n      ],\n      \"meta\":{\n          \"total\":1\n      },\n      \"response_id\":\"94608d15-8672-4eed-8ab6-28bd6fa3cdf7\"\n    }\n```\n\n### Структура ответа с ошибкой\n|Название поля|Тип|Описание|\n|--- |--- |--- |\n|status_code|number|Короткий числовой идентификатор ошибки.|\n|error_code|string|Короткий текстовый идентификатор ошибки, который уточняет числовой идентификатор и удобен для программной обработки. Самый простой пример, это код `not_found` для ошибки 404.|\n|message|string, string[]|Опционально. В большинстве случаев в ответе будет содержаться человекочитаемое подробное описание ошибки или ошибок, которые помогут понять, что нужно исправить.|\n|response_id|string|Опционально. В большинстве случае в ответе будет содержаться уникальный идентификатор ответа в формате UUIDv4, который однозначно указывает на ваш запрос внутри нашей системы. Если вам потребуется задать вопрос нашей поддержке, то приложив к вопросу этот идентификатор, мы сможем найти ответ на него намного быстрее.|\n\nПример:\n```\n    HTTP/2.0 403 Forbidden\n    {\n      \"status_code\": 403,\n      \"error_code\":  \"forbidden\",\n      \"message\":     \"You do not have access for the attempted action\",\n      \"response_id\": \"94608d15-8672-4eed-8ab6-28bd6fa3cdf7\"\n    }\n```\n\n## Статусы ресурсов\nВажно учесть, что при создании большинства ресурсов внутри платформы, вам будет сразу возвращен ответ от сервера со статусом `200 OK` или `201 Created` и идентификатором созданного ресурса в теле ответа, но при этом этот ресурс может быть ещё в *состоянии запуска*.\n\nДля того, чтобы понять в каком состоянии сейчас находится ваш ресурс, мы добавили поле `status` в ответ на получении информации о ресурсе.\n\nСписок статусов будет отличаться в зависимости от типа ресурса. Увидеть поддерживаемый список статусов вы сможете в описании каждого конкретного ресурса.\n\n \n\n## Ограничение скорости запросов (Rate Limiting)\nЧтобы обеспечить стабильность для всех пользователей, Timeweb Cloud защищает API от всплесков входящего трафика анализируя количество запросов c каждого аккаунта к каждой конечной точке.\n\nЕсли ваше приложение отправляет более 20 запросов в секунду на одну конечную точку, то для этого запроса API может вернуть код состояния HTTP `429 Too Many Requests`.\n\n\n## Аутентификация\nДоступ к API осуществляется с помощью JWT-токена. Токенами можно управлять внутри панели управления Timeweb Cloud в разделе *Настройки аккаунта -> Токены API*.\n\nТокен необходимо передавать в заголовке каждого запроса в формате:\n```\n  Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\n```\n\n## Формат примеров API\nПримеры в этой документации описаны с помощью `curl`, HTTP-клиента командной строки. На компьютерах `Linux` и `macOS` обычно по-умолчанию установлен `curl`, и он доступен для загрузки на всех популярных платформах, включая `Windows`.\n\nКаждый пример разделен на несколько строк символом `\\`, который совместим с `bash`. Типичный пример выглядит так:\n```\n  curl -X PATCH \n    -H \"Content-Type: application/json\" \n    -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \n    -d '{\"name\":\"Cute Corvus\",\"comment\":\"Development Server\"}' \n    \"https://api.timeweb.cloud/api/v1/dedicated/1051\"\n```\n- Параметр `-X` задает метод запроса. Для согласованности метод будет указан во всех примерах, даже если он явно не требуется для методов `GET`.\n- Строки `-H` задают требуемые HTTP-заголовки.\n- Примеры, для которых требуется объект JSON в теле запроса, передают требуемые данные через параметр `-d`.\n\nЧтобы использовать приведенные примеры, не подставляя каждый раз в них свой токен, вы можете добавить токен один раз в переменные окружения в вашей консоли. Например, на `Linux` это можно сделать с помощью команды:\n\n```\nTIMEWEB_CLOUD_TOKEN=\"token\"\n```\n\nПосле этого токен будет автоматически подставляться в ваши запросы.\n\nОбратите внимание, что все значения в этой документации являются примерами. Не полагайтесь на идентификаторы операционных систем, тарифов и т.д., используемые в примерах. Используйте соответствующую конечную точку для получения значений перед созданием ресурсов.\n\n\n## Версионирование\nAPI построено согласно принципам [семантического версионирования](https://semver.org/lang/ru). Это значит, что мы гарантируем обратную совместимость всех изменений в пределах одной мажорной версии.\n\nМажорная версия каждой конечной точки обозначается в пути запроса, например, запрос `/api/v1/servers` указывает, что этот метод имеет версию 1."
    },
    "servers": [
        {
            "url": "https://api.timeweb.cloud"
        }
    ],
    "tags": [
        {
            "name": "Аккаунт",
            "description": "Группа методов, которая позволяет получить информацию о вашем текущем аккаунте. Обратите внимание, что API предоставляет только базовый функционал для получения общей информации об аккаунте.</br></br> Подробнее о работе с вашим аккаунтом в панели управления в нашей <a href='https://timeweb.cloud/docs/account-management' target='_blank'>базе знаний</a>."
        },
        {
            "name": "Базы данных",
            "description": "Облачная база данных, или База данных как сервис (DBaaS) — облачное решение для хранения структурированных данных и управления ими. DBaaS обеспечивает полностью автоматизированную, гибкую и масштабируемую платформу для работы с базами данных.</br></br> Подробнее об облачных базах данных в нашей <a href='https://timeweb.cloud/docs/dbaas' target='_blank'>базе знаний</a>."
        },
        {
            "name": "Балансировщики",
            "description": "Балансировщик позволяет распределять входящий трафик между несколькими серверами для повышения доступности и отказоустойчивости вашего сервиса.</br></br> Подробнее о балансировщике нагрузки в нашей <a href='https://timeweb.cloud/docs/load-balancer' target='_blank'>базе знаний</a>."
        },
        {
            "name": "Выделенные серверы",
            "description": "Выделенные серверы используют, когда необходимо разместить сложную нагруженную систему, для которой недостаточно мощностей виртуального хостинга или облачного сервера. Это может быть крупный сайт, интернет-магазин, любой ресурсоемкий проект.</br></br> Подробнее о выделенных серверах в нашей <a href='https://timeweb.cloud/docs/dedicated' target='_blank'>базе знаний</a>."
        },
        {
            "name": "Домены",
            "description": "В Timeweb Cloud доступна регистрация и продление доменов более чем в 350 зонах.</br></br> В зависимости от выбранной зоны, домен может быть зарегистрирован через регистратора Таймвэб.Домены или через одного из наших партнеров.</br></br> Подробнее о доменах в нашей <a href='https://timeweb.cloud/docs/domains' target='_blank'>базе знаний</a>."
        },
        {
            "name": "Облачные серверы",
            "description": "Облачные серверы — это способ размещения данных, при котором вы получаете полный доступ (root-доступ) к виртуальному серверу и его настройкам. Вы можете гибко масштабировать параметры (процессор, память, диск) сервера, постепенно добавляя необходимые мощности, когда растет нагрузка, и снижать их, когда нагрузка уменьшается. Соответствующим образом будет увеличиваться или уменьшаться стоимость сервера.</br></br> Подробнее об облачных серверах в нашей <a href='https://timeweb.cloud/docs/cloud-servers' target='_blank'>базе знаний</a>."
        },
        {
            "name": "Образы",
            "description": "Образы — это полная копия вашего облачного сервера в формате `Qcow2`, со всеми настройками операционной системы, программного обеспечения и всем содержимым сервера. </br></br> Подробнее об образах в нашей <a href='https://timeweb.cloud/docs/cloud-servers/manage-servers/server-images' target='_blank'>базе знаний</a>."
        },
        {
            "name": "Почта",
            "description": "В Timeweb Cloud доступна инфраструктура готовых почтовых серверов. Вы можете создавать и настраивать неограниченное число ящиков на своих доменах. <br><br> Подробнее о сервисе почты в нашей <a href='https://timeweb.cloud/docs/mail' target='_blank'>базе знаний</a>."
        },
        {
            "name": "Проекты",
            "description": "Проекты позволяют организовать ваши ресурсы в группы, соответствующие вашему стилю работы. Вы можете группировать ресурсы (например, облачные и выделенные серверы, балансировщики нагрузки, базы данных и т.д.) таким образом, чтобы они соответствовали приложениям, которые вы размещаете в облаке."
        },
        {
            "name": "Токены API",
            "description": "Токены API — это это JWT-токены с помощью которых вы можете получить доступ к управлению через API вашей облачной инфраструктурой."
        },
        {
            "name": "Kubernetes",
            "description": "Kubernetes — программное обеспечение с открытым исходным кодом, предназначенное для автоматизированного управления контейнерными приложениями. Kubernetes обеспечит автоматическое развертывание, масштабирование, распределение нагрузки, мониторинг сервисов, обработку ошибок и многое другое. </br></br> Подробнее о Kubernetes в нашей <a href='https://timeweb.cloud/docs/k8s' target='_blank'>базе знаний</a>."
        },
        {
            "name": "S3-хранилище",
            "description": "S3-хранилище — это универсальное объектное хранилище, совместимое с Amazon S3 API, в котором можно размещать любые типы статических данных.</br></br> Подробнее о хранилище S3 в нашей <a href='https://timeweb.cloud/docs/s3-storage' target='_blank'>базе знаний</a>.</br></br>Обратите внимание, что данное API предоставляется независимо и совместно с Amazon S3 API. Описание принципов работы и список поддерживаемых методов Amazon S3 API вы можете найти в <a href='https://timeweb.cloud/docs/s3-storage/s3-guide' target='_blank'>базе знаний</a>."
        },
        {
            "name": "SSH-ключи",
            "description": "Для безопасного подключения к облачным серверам вы можете использовать SSH-ключи. Их удобно сохранять в панели управления в разделе <a href='https://timeweb.cloud/my/sshkeys' target='_blank'>SSH-ключи</a>, чтобы использовать при создании новых серверов."
        }
    ],
    "security": [
        {
            "Bearer": []
        }
    ],
    "paths": {
        "/api/v1/account/finances": {
            "get": {
                "summary": "Получение платежной информации",
                "description": "Чтобы получить платежную информацию, отправьте GET запрос на `/api/v1/account/finances`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/account/finances\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/account/finances', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/account/finances', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/account/finances', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/account/finances');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/account/finances\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/account/finances\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `finances`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "finances": {
                                                    "$ref": "#/components/schemas/finances"
                                                }
                                            },
                                            "required": [
                                                "finances"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Аккаунт"
                ]
            }
        },
        "/api/v1/account/status": {
            "get": {
                "summary": "Получение статуса аккаунта",
                "description": "Чтобы получить статус аккаунта, отправьте GET запрос на `/api/v1/account/status`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/account/status\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/account/status', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/account/status', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/account/status', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/account/status');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/account/status\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/account/status\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `status`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "status": {
                                                    "$ref": "#/components/schemas/status"
                                                }
                                            },
                                            "required": [
                                                "status"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Аккаунт"
                ]
            }
        },
        "/api/v1/images": {
            "get": {
                "tags": [
                    "Образы"
                ],
                "summary": "Получение списка образов",
                "description": "Чтобы получить список образов, отправьте GET запрос на `/api/v1/images`",
                "operationId": "Получение_списка_образов_api_v1__account__images_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Offset",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "With Deleted",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "with_deleted",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом images",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ImagesOutResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "0d93c867-6507-402c-8970-26db85dda2f9",
                                    "meta": {
                                        "total": 5
                                    },
                                    "images": [
                                        {
                                            "id": "a167c301-6c83-46b1-8376-62e1584ee84a",
                                            "status": "new",
                                            "created_at": "2023-03-01T12:35:18.866362",
                                            "size": 33554432,
                                            "name": "image a167c301-6c83-46b1-8376-62e1584ee84a",
                                            "description": "description of image a167c301-6c83-46b1-8376-62e1584ee84a",
                                            "disk_id": 389372,
                                            "location": "ru-1",
                                            "os": "ubuntu",
                                            "progress": 0
                                        },
                                        {
                                            "id": "f6500d74-5e25-49d6-b68a-f85c03d6e9ed",
                                            "status": "new",
                                            "created_at": "2023-03-01T12:35:18.866724",
                                            "size": 1048576,
                                            "name": "image f6500d74-5e25-49d6-b68a-f85c03d6e9ed",
                                            "description": "description of image f6500d74-5e25-49d6-b68a-f85c03d6e9ed",
                                            "disk_id": 583657,
                                            "location": "ru-1",
                                            "os": "ubuntu",
                                            "progress": 0
                                        },
                                        {
                                            "id": "705fe3c0-3881-40d7-b703-af3e202c90f7",
                                            "status": "new",
                                            "created_at": "2023-03-01T12:35:18.866872",
                                            "size": 1048576,
                                            "name": "image 705fe3c0-3881-40d7-b703-af3e202c90f7",
                                            "description": "description of image 705fe3c0-3881-40d7-b703-af3e202c90f7",
                                            "disk_id": 785637,
                                            "location": "ru-1",
                                            "os": "ubuntu",
                                            "progress": 0
                                        },
                                        {
                                            "id": "d2989fc3-153e-4091-bcd7-17014b13aa28",
                                            "status": "new",
                                            "created_at": "2023-03-01T12:35:18.867039",
                                            "size": 4194304,
                                            "name": "image d2989fc3-153e-4091-bcd7-17014b13aa28",
                                            "description": "description of image d2989fc3-153e-4091-bcd7-17014b13aa28",
                                            "disk_id": 382507,
                                            "location": "ru-1",
                                            "os": "ubuntu",
                                            "progress": 0
                                        },
                                        {
                                            "id": "bd648c7a-0908-4765-a103-b47fc5fc1c49",
                                            "status": "new",
                                            "created_at": "2023-03-01T12:35:18.867180",
                                            "size": 4194304,
                                            "name": "image bd648c7a-0908-4765-a103-b47fc5fc1c49",
                                            "description": "description of image bd648c7a-0908-4765-a103-b47fc5fc1c49",
                                            "disk_id": 453383,
                                            "location": "ru-1",
                                            "os": "ubuntu",
                                            "progress": 0
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/images\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/images', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/images', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/images', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/images\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Образы"
                ],
                "summary": "Создание образа",
                "description": "Чтобы создать образ, отправьте POST запрос в `/api/v1/images`, задав необходимые атрибуты. Образ будет создан с использованием предоставленной информации. \n\n Тело ответа будет содержать объект JSON с информацией о созданном образе.",
                "operationId": "Создание_образа_api_v1__account__images_post",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImageInAPI"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Образ создан",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ImageOutResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "23e1ea78-edac-4289-a7b1-048ce8465b90",
                                    "image": {
                                        "id": "a7a4d6f2-420e-4e62-94ae-f017f40530ac",
                                        "status": "new",
                                        "created_at": "2023-03-01T12:35:18.866026",
                                        "size": 16777216,
                                        "name": "image a7a4d6f2-420e-4e62-94ae-f017f40530ac",
                                        "description": "description of image a7a4d6f2-420e-4e62-94ae-f017f40530ac",
                                        "disk_id": 113957,
                                        "location": "ru-1",
                                        "os": "ubuntu",
                                        "progress": 0
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"description\": \"\\u041c\\u043e\\u0439 \\u043e\\u0431\\u0440\\u0430\\u0437 \\u0434\\u043b\\u044f \\u0434\\u0438\\u0441\\u043a\\u0430 123\", \"disk_id\": 123}' \\\n -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/images\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/images', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\"description\": \"\\\\u041c\\\\u043e\\\\u0439 \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437 \\\\u0434\\\\u043b\\\\u044f \\\\u0434\\\\u0438\\\\u0441\\\\u043a\\\\u0430 123\", \"disk_id\": 123}',\n    body: JSON.stringify({\n        'description': '\\u041C\\u043E\\u0439 \\u043E\\u0431\\u0440\\u0430\\u0437 \\u0434\\u043B\\u044F \\u0434\\u0438\\u0441\\u043A\\u0430 123',\n        'disk_id': 123\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/images',\n    // '{\"description\": \"\\\\u041c\\\\u043e\\\\u0439 \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437 \\\\u0434\\\\u043b\\\\u044f \\\\u0434\\\\u0438\\\\u0441\\\\u043a\\\\u0430 123\", \"disk_id\": 123}',\n    {\n        'description': '\\u041C\\u043E\\u0439 \\u043E\\u0431\\u0440\\u0430\\u0437 \\u0434\\u043B\\u044F \\u0434\\u0438\\u0441\\u043A\\u0430 123',\n        'disk_id': 123\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'description': 'Мой образ для диска 123',\n    'disk_id': 123,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/images', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"description\": \"\\\\u041c\\\\u043e\\\\u0439 \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437 \\\\u0434\\\\u043b\\\\u044f \\\\u0434\\\\u0438\\\\u0441\\\\u043a\\\\u0430 123\", \"disk_id\": 123}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"description\": \"\\u041c\\u043e\\u0439 \\u043e\\u0431\\u0440\\u0430\\u0437 \\u0434\\u043b\\u044f \\u0434\\u0438\\u0441\\u043a\\u0430 123\", \"disk_id\": 123}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/images\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"description\\\": \\\"\\\\u041c\\\\u043e\\\\u0439 \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437 \\\\u0434\\\\u043b\\\\u044f \\\\u0434\\\\u0438\\\\u0441\\\\u043a\\\\u0430 123\\\", \\\"disk_id\\\": 123}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/images/{image_id}": {
            "get": {
                "tags": [
                    "Образы"
                ],
                "summary": "Получение информации о образе",
                "description": "Чтобы получить образ, отправьте запрос GET в `/api/v1/images/{image_id}`.",
                "operationId": "Получение_информации_о_образе_api_v1__account__images__image_id__get",
                "parameters": [
                    {
                        "description": "Идентификатор образа",
                        "required": true,
                        "schema": {
                            "title": "Image Id",
                            "type": "string",
                            "description": "Идентификатор образа"
                        },
                        "name": "image_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о образе",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ImageOutResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "5d783163-01d5-44bc-965c-b10c00b6df94",
                                    "image": {
                                        "id": "b4b72a82-c7a8-4e6a-97e9-46975bb3f7a4",
                                        "status": "new",
                                        "created_at": "2023-03-01T12:35:18.867599",
                                        "size": 1048576,
                                        "name": "image b4b72a82-c7a8-4e6a-97e9-46975bb3f7a4",
                                        "description": "description of image b4b72a82-c7a8-4e6a-97e9-46975bb3f7a4",
                                        "disk_id": 356431,
                                        "location": "ru-1",
                                        "os": "ubuntu",
                                        "progress": 0
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/images/5ec5a284-20d8-47b8-8dce-ed0787cd54e9\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/images/5ec5a284-20d8-47b8-8dce-ed0787cd54e9', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/images/5ec5a284-20d8-47b8-8dce-ed0787cd54e9', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/images/5ec5a284-20d8-47b8-8dce-ed0787cd54e9', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/5ec5a284-20d8-47b8-8dce-ed0787cd54e9');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/images/5ec5a284-20d8-47b8-8dce-ed0787cd54e9\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/5ec5a284-20d8-47b8-8dce-ed0787cd54e9\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Образы"
                ],
                "summary": "Удаление образа",
                "description": "Чтобы удалить образ, отправьте запрос DELETE в `/api/v1/images/{image_id}`.",
                "operationId": "Удаление_образа_api_v1__account__images__image_id__delete",
                "parameters": [
                    {
                        "description": "Идентификатор образа",
                        "required": true,
                        "schema": {
                            "title": "Image Id",
                            "type": "string",
                            "description": "Идентификатор образа"
                        },
                        "name": "image_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Образ удален"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/images/16979f28-c002-434a-9d56-6a58fc412ed4\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/images/16979f28-c002-434a-9d56-6a58fc412ed4', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/images/16979f28-c002-434a-9d56-6a58fc412ed4', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/images/16979f28-c002-434a-9d56-6a58fc412ed4', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/16979f28-c002-434a-9d56-6a58fc412ed4');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/images/16979f28-c002-434a-9d56-6a58fc412ed4\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/16979f28-c002-434a-9d56-6a58fc412ed4\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Образы"
                ],
                "summary": "Обновление информации о образе",
                "description": "Чтобы обновить только определенные атрибуты образа, отправьте запрос PATCH в `/api/v1/images/{image_id}`.",
                "operationId": "Обновление_информации_о_образе_api_v1__account__images__image_id__patch",
                "parameters": [
                    {
                        "description": "Идентификатор образа",
                        "required": true,
                        "schema": {
                            "title": "Image Id",
                            "type": "string",
                            "description": "Идентификатор образа"
                        },
                        "name": "image_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImageUpdateAPI"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Образ обновлен",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ImageOutResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "31882ba6-fab2-45c0-b141-9bfbdfbd6486",
                                    "image": {
                                        "id": "b8f42279-f95b-42de-aa9c-fd83a51fd921",
                                        "status": "new",
                                        "created_at": "2023-03-01T12:35:18.867790",
                                        "size": 2097152,
                                        "name": "image b8f42279-f95b-42de-aa9c-fd83a51fd921",
                                        "description": "description of image b8f42279-f95b-42de-aa9c-fd83a51fd921",
                                        "disk_id": 389715,
                                        "location": "ru-1",
                                        "os": "ubuntu",
                                        "progress": 0
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"\\u0418\\u043c\\u044f \\u043e\\u0431\\u0440\\u0430\\u0437\\u0430\", \"description\": \"\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u043e\\u0431\\u0440\\u0430\\u0437\\u0430\"}' \\\n -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/images/a41537a0-bdf0-4240-b0b0-c118febac6bb\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/images/a41537a0-bdf0-4240-b0b0-c118febac6bb', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\"name\": \"\\\\u0418\\\\u043c\\\\u044f \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437\\\\u0430\", \"description\": \"\\\\u041e\\\\u043f\\\\u0438\\\\u0441\\\\u0430\\\\u043d\\\\u0438\\\\u0435 \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437\\\\u0430\"}',\n    body: JSON.stringify({\n        'name': '\\u0418\\u043C\\u044F \\u043E\\u0431\\u0440\\u0430\\u0437\\u0430',\n        'description': '\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \\u043E\\u0431\\u0440\\u0430\\u0437\\u0430'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/images/a41537a0-bdf0-4240-b0b0-c118febac6bb',\n    // '{\"name\": \"\\\\u0418\\\\u043c\\\\u044f \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437\\\\u0430\", \"description\": \"\\\\u041e\\\\u043f\\\\u0438\\\\u0441\\\\u0430\\\\u043d\\\\u0438\\\\u0435 \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437\\\\u0430\"}',\n    {\n        'name': '\\u0418\\u043C\\u044F \\u043E\\u0431\\u0440\\u0430\\u0437\\u0430',\n        'description': '\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \\u043E\\u0431\\u0440\\u0430\\u0437\\u0430'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'name': 'Имя образа',\n    'description': 'Описание образа',\n}\n\nresponse = requests.patch(\n    'https://api.timeweb.cloud/api/v1/images/a41537a0-bdf0-4240-b0b0-c118febac6bb',\n    headers=headers,\n    json=json_data,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/a41537a0-bdf0-4240-b0b0-c118febac6bb');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"name\": \"\\\\u0418\\\\u043c\\\\u044f \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437\\\\u0430\", \"description\": \"\\\\u041e\\\\u043f\\\\u0438\\\\u0441\\\\u0430\\\\u043d\\\\u0438\\\\u0435 \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437\\\\u0430\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"name\": \"\\u0418\\u043c\\u044f \\u043e\\u0431\\u0440\\u0430\\u0437\\u0430\", \"description\": \"\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u043e\\u0431\\u0440\\u0430\\u0437\\u0430\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/images/a41537a0-bdf0-4240-b0b0-c118febac6bb\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/a41537a0-bdf0-4240-b0b0-c118febac6bb\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"name\\\": \\\"\\\\u0418\\\\u043c\\\\u044f \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437\\\\u0430\\\", \\\"description\\\": \\\"\\\\u041e\\\\u043f\\\\u0438\\\\u0441\\\\u0430\\\\u043d\\\\u0438\\\\u0435 \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437\\\\u0430\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/images/{image_id}/download-url": {
            "get": {
                "tags": [
                    "Образы"
                ],
                "summary": "Получение информации о ссылках на скачивание образов",
                "description": "Чтобы получить информацию о ссылках на скачивание образов, отправьте запрос GET в `/api/v1/images/{image_id}/download-url`.",
                "operationId": "Получение_информации_о_ссылках_на_скачивание_образов_api_v1__account__images__image_id__download_url_get",
                "parameters": [
                    {
                        "description": "Идентификатор образа",
                        "required": true,
                        "schema": {
                            "title": "Image Id",
                            "type": "string",
                            "description": "Идентификатор образа"
                        },
                        "name": "image_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Offset",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о ссылке на загрузку",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ImageDownloadsResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "0325bcbb-bdef-4a3d-bd81-1b4805826591",
                                    "meta": {
                                        "total": 1
                                    },
                                    "downloads": [
                                        {
                                            "id": "47114b82-04b4-4299-86fe-615a8b84d687",
                                            "created_at": "2023-03-01T12:35:18.868802",
                                            "image": "6790556f-8ea0-41ee-9659-595360c0f8a9",
                                            "type": "timeweb",
                                            "url": "https://example.com/47114b82-04b4-4299-86fe-615a8b84d687",
                                            "status": "finished",
                                            "progress": 100
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/images/74861597-dab9-4b60-9e0a-e45d11be506e/download_url\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/images/74861597-dab9-4b60-9e0a-e45d11be506e/download_url', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/images/74861597-dab9-4b60-9e0a-e45d11be506e/download_url', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get(\n    'https://api.timeweb.cloud/api/v1/images/74861597-dab9-4b60-9e0a-e45d11be506e/download_url',\n    headers=headers,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/74861597-dab9-4b60-9e0a-e45d11be506e/download_url');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/images/74861597-dab9-4b60-9e0a-e45d11be506e/download_url\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/74861597-dab9-4b60-9e0a-e45d11be506e/download_url\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Образы"
                ],
                "summary": "Создание ссылки на скачивание образа",
                "description": "Чтобы создать ссылку на скачивание образа, отправьте запрос POST в `/api/v1/images/{image_id}/download-url`.",
                "operationId": "Создание_ссылки_на_скачивание_образа_api_v1__account__images__image_id__download_url_post",
                "parameters": [
                    {
                        "description": "Идентификатор образа",
                        "required": true,
                        "schema": {
                            "title": "Image Id",
                            "type": "string",
                            "description": "Идентификатор образа"
                        },
                        "name": "image_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImageUrlIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Ссылка успешно создана",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ImageDownloadResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "bf220862-7ef9-4dea-896a-a9ac52fadecf",
                                    "download": {
                                        "id": "b4c9d29f-3bc6-4c8a-a7da-e099330759d0",
                                        "created_at": "2023-03-01T12:35:18.868012",
                                        "image": "3c793ff3-b413-465c-b929-a962accee2c3",
                                        "type": "timeweb",
                                        "url": "https://example.com/b4c9d29f-3bc6-4c8a-a7da-e099330759d0",
                                        "status": "finished",
                                        "progress": 100
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "description": "Образ уже загружен в облачное хранилище",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                },
                                "example": {
                                    "status_code": 409,
                                    "error_code": "file_already_exists_on_remote",
                                    "message": "File with name my_image_from_timeweb.qcow2 already exists on remote",
                                    "response_id": "97a9a766-b678-41be-986c-6c8531a10329"
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/images/499528a7-d886-40af-bf04-672c60b97800/download_url\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/images/499528a7-d886-40af-bf04-672c60b97800/download_url', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/images/499528a7-d886-40af-bf04-672c60b97800/download_url',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.post(\n    'https://api.timeweb.cloud/api/v1/images/499528a7-d886-40af-bf04-672c60b97800/download_url',\n    headers=headers,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/499528a7-d886-40af-bf04-672c60b97800/download_url');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/images/499528a7-d886-40af-bf04-672c60b97800/download_url\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/499528a7-d886-40af-bf04-672c60b97800/download_url\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/images/{image_id}/download-url/{image_url_id}": {
            "get": {
                "tags": [
                    "Образы"
                ],
                "summary": "Получение информации о ссылке на скачивание образа",
                "description": "Чтобы получить информацию о ссылке на скачивание образа, отправьте запрос GET в `/api/v1/images/{image_id}/download-url/{image_url_id}`.",
                "operationId": "Получение_информации_о_ссылке_на_скачивание_образа_api_v1__account__images__image_id__download_url__image_url_id__get",
                "parameters": [
                    {
                        "description": "Идентификатор образа",
                        "required": true,
                        "schema": {
                            "title": "Image Id",
                            "type": "string",
                            "description": "Идентификатор образа"
                        },
                        "name": "image_id",
                        "in": "path"
                    },
                    {
                        "description": "Идентификатор ссылки",
                        "required": true,
                        "schema": {
                            "title": "Image Url Id",
                            "type": "string",
                            "description": "Идентификатор ссылки"
                        },
                        "name": "image_url_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о ссылке на загрузку",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ImageDownloadResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "7f6582eb-5d16-4f3d-be9e-a43edc81ec27",
                                    "download": {
                                        "id": "6d227f26-40d5-4e64-9999-d86a24b74808",
                                        "created_at": "2023-03-01T12:35:18.868361",
                                        "image": "347fcf6a-9da5-4fc6-afcb-635150d621af",
                                        "type": "timeweb",
                                        "url": "https://example.com/6d227f26-40d5-4e64-9999-d86a24b74808",
                                        "status": "finished",
                                        "progress": 100
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/images/924b3ddf-d1cf-445a-b9b6-77dbe1eae123/download_url/bc956a81-d171-4928-aeaf-dbbd1d3335aa\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/images/924b3ddf-d1cf-445a-b9b6-77dbe1eae123/download_url/bc956a81-d171-4928-aeaf-dbbd1d3335aa', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/images/924b3ddf-d1cf-445a-b9b6-77dbe1eae123/download_url/bc956a81-d171-4928-aeaf-dbbd1d3335aa', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get(\n    'https://api.timeweb.cloud/api/v1/images/924b3ddf-d1cf-445a-b9b6-77dbe1eae123/download_url/bc956a81-d171-4928-aeaf-dbbd1d3335aa',\n    headers=headers,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/924b3ddf-d1cf-445a-b9b6-77dbe1eae123/download_url/bc956a81-d171-4928-aeaf-dbbd1d3335aa');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/images/924b3ddf-d1cf-445a-b9b6-77dbe1eae123/download_url/bc956a81-d171-4928-aeaf-dbbd1d3335aa\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/924b3ddf-d1cf-445a-b9b6-77dbe1eae123/download_url/bc956a81-d171-4928-aeaf-dbbd1d3335aa\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Образы"
                ],
                "summary": "Удаление ссылки на образ",
                "description": "Чтобы удалить ссылку на образ, отправьте DELETE запрос в `/api/v1/images/{image_id}/download-url/{image_url_id}`.",
                "operationId": "Удаление_ссылки_на_образ_api_v1__account__images__image_id__download_url__image_url_id__delete",
                "parameters": [
                    {
                        "description": "Идентификатор образа",
                        "required": true,
                        "schema": {
                            "title": "Image Id",
                            "type": "string",
                            "description": "Идентификатор образа"
                        },
                        "name": "image_id",
                        "in": "path"
                    },
                    {
                        "description": "Идентификатор ссылки",
                        "required": true,
                        "schema": {
                            "title": "Image Url Id",
                            "type": "string",
                            "description": "Идентификатор ссылки"
                        },
                        "name": "image_url_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Ссылка удалена"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/images/198ccc12-4766-4c50-9644-8a1b169599fb/download_url/295d1568-cfb6-4e27-99a8-8b673f62d914\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/images/198ccc12-4766-4c50-9644-8a1b169599fb/download_url/295d1568-cfb6-4e27-99a8-8b673f62d914', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/images/198ccc12-4766-4c50-9644-8a1b169599fb/download_url/295d1568-cfb6-4e27-99a8-8b673f62d914', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete(\n    'https://api.timeweb.cloud/api/v1/images/198ccc12-4766-4c50-9644-8a1b169599fb/download_url/295d1568-cfb6-4e27-99a8-8b673f62d914',\n    headers=headers,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/198ccc12-4766-4c50-9644-8a1b169599fb/download_url/295d1568-cfb6-4e27-99a8-8b673f62d914');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/images/198ccc12-4766-4c50-9644-8a1b169599fb/download_url/295d1568-cfb6-4e27-99a8-8b673f62d914\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/198ccc12-4766-4c50-9644-8a1b169599fb/download_url/295d1568-cfb6-4e27-99a8-8b673f62d914\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/balancers": {
            "get": {
                "summary": "Получение списка всех бaлансировщиков",
                "description": "Чтобы получить список всех бaлансировщиков на вашем аккаунте, отправьте GET запрос на `/api/v1/balancers`.\n\n Тело ответа будет представлять собой объект JSON с ключом `balancers`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/balancers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/balancers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/balancers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `balancers`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "balancers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/balancer"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "balancers"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            },
            "post": {
                "summary": "Создание бaлансировщика",
                "description": "Чтобы создать бaлансировщик на вашем аккаунте, отправьте POST запрос на `/api/v1/balancers` задав необходимые атрибуты.\n\nБалансировщик будет создан с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданном балансировщике.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancer\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancer', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/balancer',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/balancer', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancer');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/balancer\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancer\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/create-balancer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `balancer`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "balancer": {
                                                    "$ref": "#/components/schemas/balancer"
                                                }
                                            },
                                            "required": [
                                                "balancer"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            }
        },
        "/api/v1/balancers/{balancer_id}": {
            "get": {
                "summary": "Получение бaлансировщика",
                "description": "Чтобы отобразить информацию об отдельном балансировщике, отправьте запрос GET на `api/v1/balancers/{balancer_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/balancer-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancers/1051\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers/1051', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/balancers/1051', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/balancers/1051', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/balancers/1051\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON с ключом `balancer`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "balancer": {
                                                    "$ref": "#/components/schemas/balancer"
                                                }
                                            },
                                            "required": [
                                                "balancer"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            },
            "patch": {
                "summary": "Обновление балансировщика",
                "description": "Чтобы обновить только определенные атрибуты балансировщика, отправьте запрос PATCH в `api/v1/balancers/{balancer_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/balancer-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-balancer"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '${DATA}' \\\n  \"https://api.timeweb.cloud/api/v1/balancers/1051\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers/1051', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: '${DATA}'\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/balancers/1051',\n    '${DATA}',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\ndata = '${DATA}'\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/balancers/1051', headers=headers, data=data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '${DATA}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`${DATA}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/balancers/1051\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"${DATA}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON с ключом `balancer`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "balancer": {
                                                    "$ref": "#/components/schemas/balancer"
                                                }
                                            },
                                            "required": [
                                                "balancer"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            },
            "delete": {
                "summary": "Удаление балансировщика",
                "description": "Чтобы удалить балансировщик, отправьте запрос DELETE в `api/v1/balancers/{balancer_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/balancer-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancers/1051\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers/1051', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/balancers/1051', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/balancers/1051', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/balancers/1051\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `balancer_delete`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "balancer_delete": {
                                                    "$ref": "#/components/schemas/delete-service-response"
                                                }
                                            },
                                            "required": [
                                                "balancer_delete"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Балансировщик успешно удален."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            }
        },
        "/api/v1/balancers/{balancer_id}/ips": {
            "get": {
                "summary": "Получение списка ip адресов балансировщика",
                "description": "Чтобы добавить `ip` адреса к балансировщику, отправьте запрос GET в `api/v1/balancers/{balancer_id}/ips`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/balancer-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancers/1051/ips\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers/1051/ips', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/balancers/1051/ips', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/balancers/1051/ips', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/ips');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/balancers/1051/ips\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/ips\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `ips`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "ips": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "ips"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            },
            "post": {
                "summary": "Добавление ip адресов к балансировщику",
                "description": "Чтобы добавить `ip` адреса к балансировщику, отправьте запрос POST в `api/v1/balancers/{balancer_id}/ips`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/balancer-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancers/1051/ips\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers/1051/ips', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/balancers/1051/ips',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/balancers/1051/ips', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/ips');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/balancers/1051/ips\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/ips\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ips": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "192.168.0.0"
                                        }
                                    }
                                },
                                "required": [
                                    "ips"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "`Ip` адреса добавлены к балансировщику"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            },
            "delete": {
                "summary": "Удаление ip адресов из балансировщика",
                "description": "Чтобы удалить `ip` адреса из балансировщика, отправьте запрос DELETE в `api/v1/balancers/{balancer_id}/ips`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/balancer-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancers/1051/ips\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers/1051/ips', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/balancers/1051/ips', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/balancers/1051/ips', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/ips');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/balancers/1051/ips\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/ips\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ips": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "192.168.0.0"
                                        }
                                    }
                                },
                                "required": [
                                    "ips"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "`Ip` адрес удален из балансировщика"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            }
        },
        "/api/v1/balancers/{balancer_id}/rules": {
            "get": {
                "summary": "Получение правил балансировщика",
                "description": "Получить правила балансировщика балансировщика, отправьте запрос GET в `api/v1/balancers/{balancer_id}/rules`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/balancer-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancers/1051/rules\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers/1051/rules', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/balancers/1051/rules', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/balancers/1051/rules', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/rules');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/balancers/1051/rules\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/rules\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `rules`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "rules": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/rule"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "rules"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            },
            "post": {
                "summary": "Создание правила для балансировщика",
                "description": "Чтобы создать правило для балансировщика, отправьте запрос POST в `api/v1/balancers/{balancer_id}/rules`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/balancer-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancers/1051/rules\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers/1051/rules', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/balancers/1051/rules',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/balancers/1051/rules', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/rules');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/balancers/1051/rules\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/rules\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/create-rule"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `rule`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "rule": {
                                                    "$ref": "#/components/schemas/rule"
                                                }
                                            },
                                            "required": [
                                                "rule"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            }
        },
        "/api/v1/balancers/{balancer_id}/rules/{rule_id}": {
            "patch": {
                "summary": "Обновление правила для балансировщика",
                "description": "Чтобы обновить правило для балансировщика, отправьте запрос PATCH в `api/v1/balancers/{balancer_id}/rules/{rule_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/balancer-id"
                    },
                    {
                        "$ref": "#/components/parameters/rule-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancers/1051/rules/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers/1051/rules/123', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/balancers/1051/rules/123',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/balancers/1051/rules/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/rules/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/balancers/1051/rules/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/rules/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-rule"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `rule`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "rule": {
                                                    "$ref": "#/components/schemas/rule"
                                                }
                                            },
                                            "required": [
                                                "rule"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            },
            "delete": {
                "summary": "Удаление правила для балансировщика",
                "description": "Чтобы удалить правило для балансировщика, отправьте запрос DELETE в `api/v1/balancers/{balancer_id}/rules/{rule_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/balancer-id"
                    },
                    {
                        "$ref": "#/components/parameters/rule-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/balancers/1051/rules/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/balancers/1051/rules/123', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/balancers/1051/rules/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/balancers/1051/rules/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/rules/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/balancers/1051/rules/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/rules/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Правило удалено из балансировщика"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            }
        },
        "/api/v1/presets/balancers": {
            "get": {
                "summary": "Получение списка тарифов для балансировщика",
                "description": "Чтобы получить список тарифов для балансировщика, отправьте GET запрос на `/api/v1/presets/balancers`.\n\n Тело ответа будет представлять собой объект JSON с ключом `balancers_presets`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/presets/balancers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/presets/balancers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/presets/balancers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/presets/balancers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/balancers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/balancers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/balancers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "balancers_presets": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/presets-balancer"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "balancers_presets"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Тарифы успешно получены"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Балансировщики"
                ]
            }
        },
        "/api/v1/dbs": {
            "get": {
                "summary": "Получение списка всех баз данных",
                "description": "Чтобы получить список всех баз данных на вашем аккаунте, отправьте GET запрос на `/api/v1/dbs`.\n\n Тело ответа будет представлять собой объект JSON с ключом `dbs`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dbs\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dbs', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/dbs', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/dbs', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dbs\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `dbs`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "dbs": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/db"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "dbs"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            },
            "post": {
                "summary": "Создание базы данных",
                "description": "Чтобы создать базу данных на вашем аккаунте, отправьте POST запрос на `/api/v1/dbs` задав необходимые атрибуты.\n\nБаза данных будет создана с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданной базе данных.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/db\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/db', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/db',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/db', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/db');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/db\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/db\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/create-db"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `db`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "db": {
                                                    "$ref": "#/components/schemas/db"
                                                }
                                            },
                                            "required": [
                                                "db"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            }
        },
        "/api/v1/dbs/{db_id}": {
            "get": {
                "summary": "Получение базы данных",
                "description": "Чтобы отобразить информацию об отдельной базе данных, отправьте запрос GET на `api/v1/dbs/{db_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dbs-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dbs/1051\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dbs/1051', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/dbs/1051', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/dbs/1051', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dbs/1051\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON с ключом `db`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "db": {
                                                    "$ref": "#/components/schemas/db"
                                                }
                                            },
                                            "required": [
                                                "db"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            },
            "patch": {
                "summary": "Обновление базы данных",
                "description": "Чтобы обновить только определенные атрибуты базы данных, отправьте запрос PATCH в `api/v1/dbs/{db_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dbs-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-db"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '${DATA}' \\\n  \"https://api.timeweb.cloud/api/v1/dbs/1051\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dbs/1051', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: '${DATA}'\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/dbs/1051',\n    '${DATA}',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\ndata = '${DATA}'\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/dbs/1051', headers=headers, data=data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '${DATA}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`${DATA}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/dbs/1051\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"${DATA}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON с ключом `db`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "db": {
                                                    "$ref": "#/components/schemas/db"
                                                }
                                            },
                                            "required": [
                                                "db"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            },
            "delete": {
                "summary": "Удаление базы данных",
                "description": "Чтобы удалить базу данных, отправьте запрос DELETE в `api/v1/dbs/{db_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dbs-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dbs/1051\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dbs/1051', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/dbs/1051', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/dbs/1051', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/dbs/1051\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `database_delete`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "database_delete": {
                                                    "$ref": "#/components/schemas/delete-service-response"
                                                }
                                            },
                                            "required": [
                                                "database_delete"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "База данных успешно удалена."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            }
        },
        "/api/v1/dbs/{db_id}/backups": {
            "get": {
                "summary": "Список бэкапов базы данных",
                "description": "Чтобы получить список бэкапов базы данных, отправьте запрос GET в `api/v1/dbs/{db_id}/backups`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dbs-id"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dbs/1051/backups\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dbs/1051/backups', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/dbs/1051/backups', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/dbs/1051/backups', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/backups');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dbs/1051/backups\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/backups\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON с ключом `backups`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "backups": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/backup"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "backups"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            },
            "post": {
                "summary": "Создание бэкапа базы данных",
                "description": "Чтобы создать бэкап базы данных, отправьте запрос POST в `api/v1/dbs/{db_id}/backups`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dbs-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dbs/1051/backups\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dbs/1051/backups', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/dbs/1051/backups',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/dbs/1051/backups', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/backups');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/dbs/1051/backups\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/backups\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ответ будет представлять собой объект JSON с ключом `backup`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "backup": {
                                                    "$ref": "#/components/schemas/backup"
                                                }
                                            },
                                            "required": [
                                                "backup"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            }
        },
        "/api/v1/dbs/{db_id}/backups/{backup_id}": {
            "delete": {
                "summary": "Удаление бэкапа базы данных",
                "description": "Чтобы удалить бэкап базы данных, отправьте запрос DELETE в `api/v1/dbs/{db_id}/backups/{backup_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dbs-id"
                    },
                    {
                        "$ref": "#/components/parameters/backup-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/backups/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Бэкап успешно удален."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            },
            "get": {
                "summary": "Получение бэкапа базы данных",
                "description": "Чтобы получить бэкап базы данных, отправьте запрос GET в `api/v1/dbs/{db_id}/backups/{backup_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dbs-id"
                    },
                    {
                        "$ref": "#/components/parameters/backup-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/backups/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON с ключом `backup`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "backup": {
                                                    "$ref": "#/components/schemas/backup"
                                                }
                                            },
                                            "required": [
                                                "backup"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            },
            "put": {
                "summary": "Восстановление базы данных из бэкапа",
                "description": "Чтобы восстановить базу данных из бэкапа, отправьте запрос PUT в `api/v1/dbs/{db_id}/backups/{backup_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dbs-id"
                    },
                    {
                        "$ref": "#/components/parameters/backup-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.put(\n    'https://api.timeweb.cloud/api/v1/dbs/1051/backups/123',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.put('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/backups/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"PUT\", \"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PUT\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "База данных из бэкапа успешно восстановлена."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            }
        },
        "/api/v1/presets/dbs": {
            "get": {
                "summary": "Получение списка тарифов для баз данных",
                "description": "Чтобы получить список тарифов для баз данных, отправьте GET запрос на `/api/v1/presets/dbs`.\n\n Тело ответа будет представлять собой объект JSON с ключом `databases_presets`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/presets/dbs\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/presets/dbs', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/presets/dbs', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/presets/dbs', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/dbs');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/dbs\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/dbs\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "databases_presets": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/presets-dbs"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "databases_presets"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Тарифы успешно получены."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Базы данных"
                ]
            }
        },
        "/api/v1/dedicated-servers": {
            "get": {
                "summary": "Получение списка выделенных серверов",
                "description": "Чтобы получить список всех выделенных серверов на вашем аккаунте, отправьте GET запрос на `/api/v1/dedicated-servers`.\n\n Тело ответа будет представлять собой объект JSON с ключом `dedicated_servers`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dedicated-servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dedicated-servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/dedicated-servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/dedicated-servers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dedicated-servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dedicated-servers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dedicated-servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `dedicated_servers`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "dedicated_servers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/dedicated-server"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "dedicated_servers"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Выделенные серверы"
                ]
            },
            "post": {
                "summary": "Создание выделенного сервера",
                "description": "Чтобы создать выделенный сервер, отправьте POST запрос в `api/v1/dedicated-servers`, задав необходимые атрибуты.\n\nВыделенный сервер будет создан с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданном выделенном сервере.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/create-dedicated-server"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"plan_id\":2377,\"preset_id\":81,\"payment_period\":\"P1M\",\"name\":\"Mysterious Dunnock\",\"comment\":\"Production Server\",\"location\":\"russia\",\"os_id\":188,\"cp_id\":199,\"bandwidth_id\":483,\"network_drive_id\":446,\"additional_ip_addr_id\":477}' \\\n  \"https://api.timeweb.cloud/api/v1/dedicated-servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dedicated-servers', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'plan_id': 2377,\n        'preset_id': 81,\n        'payment_period': 'P1M',\n        'name': 'Mysterious Dunnock',\n        'comment': 'Production Server',\n        'location': 'russia',\n        'os_id': 188,\n        'cp_id': 199,\n        'bandwidth_id': 483,\n        'network_drive_id': 446,\n        'additional_ip_addr_id': 477\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/dedicated-servers',\n    {\n        'plan_id': 2377,\n        'preset_id': 81,\n        'payment_period': 'P1M',\n        'name': 'Mysterious Dunnock',\n        'comment': 'Production Server',\n        'location': 'russia',\n        'os_id': 188,\n        'cp_id': 199,\n        'bandwidth_id': 483,\n        'network_drive_id': 446,\n        'additional_ip_addr_id': 477\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'plan_id': 2377,\n    'preset_id': 81,\n    'payment_period': 'P1M',\n    'name': 'Mysterious Dunnock',\n    'comment': 'Production Server',\n    'location': 'russia',\n    'os_id': 188,\n    'cp_id': 199,\n    'bandwidth_id': 483,\n    'network_drive_id': 446,\n    'additional_ip_addr_id': 477,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/dedicated-servers', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dedicated-servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"plan_id\":2377,\"preset_id\":81,\"payment_period\":\"P1M\",\"name\":\"Mysterious Dunnock\",\"comment\":\"Production Server\",\"location\":\"russia\",\"os_id\":188,\"cp_id\":199,\"bandwidth_id\":483,\"network_drive_id\":446,\"additional_ip_addr_id\":477}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"plan_id\":2377,\"preset_id\":81,\"payment_period\":\"P1M\",\"name\":\"Mysterious Dunnock\",\"comment\":\"Production Server\",\"location\":\"russia\",\"os_id\":188,\"cp_id\":199,\"bandwidth_id\":483,\"network_drive_id\":446,\"additional_ip_addr_id\":477}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/dedicated-servers\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dedicated-servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"plan_id\\\":2377,\\\"preset_id\\\":81,\\\"payment_period\\\":\\\"P1M\\\",\\\"name\\\":\\\"Mysterious Dunnock\\\",\\\"comment\\\":\\\"Production Server\\\",\\\"location\\\":\\\"russia\\\",\\\"os_id\\\":188,\\\"cp_id\\\":199,\\\"bandwidth_id\\\":483,\\\"network_drive_id\\\":446,\\\"additional_ip_addr_id\\\":477}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "dedicated_server": {
                                                    "$ref": "#/components/schemas/dedicated-server"
                                                }
                                            },
                                            "required": [
                                                "dedicated_server"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Выделенные серверы"
                ]
            }
        },
        "/api/v1/dedicated-servers/{dedicated_id}": {
            "get": {
                "summary": "Получение выделенного сервера",
                "description": "Чтобы отобразить информацию об отдельном выделенном сервере, отправьте запрос GET на `api/v1/dedicated-servers/{dedicated_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dedicated-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dedicated-servers/1051\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dedicated-servers/1051', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/dedicated-servers/1051', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/dedicated-servers/1051', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dedicated-servers/1051');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dedicated-servers/1051\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dedicated-servers/1051\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON с ключом `dedicated_server`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "dedicated_server": {
                                                    "$ref": "#/components/schemas/dedicated-server"
                                                }
                                            },
                                            "required": [
                                                "dedicated_server"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Выделенные серверы"
                ]
            },
            "patch": {
                "summary": "Обновление выделенного сервера",
                "description": "Чтобы обновить только определенные атрибуты выделенного сервера, отправьте запрос PATCH в `api/v1/dedicated-servers/{dedicated_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dedicated-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "description": "Удобочитаемое имя выделенного сервера. Максимальная длина — 255 символов, имя должно быть уникальным.",
                                        "example": "name"
                                    },
                                    "comment": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "description": "Комментарий к выделенному серверу. Максимальная длина — 255 символов.",
                                        "example": "comment"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"name\":\"Cute Corvus \",\"comment\":\"Development Server\"}' \\\n  \"https://api.timeweb.cloud/api/v1/dedicated/1051\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dedicated/1051', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'name': 'Cute Corvus ',\n        'comment': 'Development Server'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/dedicated/1051',\n    {\n        'name': 'Cute Corvus ',\n        'comment': 'Development Server'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'name': 'Cute Corvus ',\n    'comment': 'Development Server',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/dedicated/1051', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dedicated/1051');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"name\":\"Cute Corvus \",\"comment\":\"Development Server\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"name\":\"Cute Corvus \",\"comment\":\"Development Server\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/dedicated/1051\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dedicated/1051\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"name\\\":\\\"Cute Corvus \\\",\\\"comment\\\":\\\"Development Server\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON с ключом `dedicated_server`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "dedicated_server": {
                                                    "$ref": "#/components/schemas/dedicated-server"
                                                }
                                            },
                                            "required": [
                                                "dedicated_server"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Выделенные серверы"
                ]
            },
            "delete": {
                "summary": "Удаление выделенного сервера",
                "description": "Чтобы удалить выделенный сервер, отправьте запрос DELETE в `api/v1/dedicated-servers/{dedicated_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/dedicated-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/dedicated/1051\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/dedicated/1051', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/dedicated/1051', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/dedicated/1051', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dedicated/1051');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/dedicated/1051\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dedicated/1051\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Выделенный сервер успешно удален"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Выделенные серверы"
                ]
            }
        },
        "/api/v1/presets/dedicated-servers": {
            "get": {
                "summary": "Получение списка тарифов для выделенного сервера",
                "description": "Чтобы получить список всех тарифов выделенных серверов, отправьте GET запрос на `/api/v1/presets/dedicated-servers`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/presets/dedicated-servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/presets/dedicated-servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/presets/dedicated-servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/presets/dedicated-servers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/dedicated-servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/dedicated-servers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/dedicated-servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "description": "Получение тарифов определенной локации.",
                        "in": "query",
                        "name": "location",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ru-1",
                                "ru-2",
                                "kz-1",
                                "pl-1"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключем `dedicated_servers_presets`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "dedicated_servers_presets": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/dedicated-server-preset"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "dedicated_servers_presets"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Выделенные серверы"
                ]
            }
        },
        "/api/v1/presets/dedicated-servers/{preset_id}/additional-services": {
            "get": {
                "summary": "Получение дополнительных услуг для выделенного сервера",
                "description": "Чтобы получить список всех дополнительных услуг для выделенных серверов, отправьте GET запрос на `/api/v1/presets/dedicated-servers/{preset_id}/additional-services`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/preset-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get(\n    'https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services',\n    headers=headers,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключем `dedicated_server_additional_services`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "dedicated_server_additional_services": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/dedicated-server-additional-service"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "dedicated_server_additional_services"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Выделенные серверы"
                ]
            }
        },
        "/api/v1/k8s/clusters": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение списка кластеров",
                "description": "Чтобы получить список кластеров, отправьте GET запрос на `/api/v1/k8s/clusters`.",
                "operationId": "Получение_списка_кластеров_api_v1__customer__clusters_get",
                "parameters": [
                    {
                        "description": "Обозначает количество записей, которое необходимо вернуть.",
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "description": "Обозначает количество записей, которое необходимо вернуть.",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "description": "Указывает на смещение, относительно начала списка.",
                        "required": false,
                        "schema": {
                            "title": "Offset",
                            "type": "integer",
                            "description": "Указывает на смещение, относительно начала списка.",
                            "default": 0
                        },
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список кластеров",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ClustersResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "68c76353-f100-455b-a4e9-52734f877861",
                                    "meta": {
                                        "total": 1
                                    },
                                    "clusters": [
                                        {
                                            "id": 73835,
                                            "name": "Кластер 73835",
                                            "created_at": "2023-01-13T10:10:29.729822",
                                            "status": "active",
                                            "description": "Описание кластера",
                                            "ha": false,
                                            "k8s_version": "v1.22.16",
                                            "network_driver": "canal",
                                            "ingress": false,
                                            "preset_id": 403,
                                            "cpu": 1,
                                            "ram": 10240,
                                            "disk": 100
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Создание кластера",
                "description": "Чтобы создать кластер, отправьте POST запрос на `/api/v1/k8s/clusters`.",
                "operationId": "Создание_кластера_api_v1__customer__clusters_post",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Информация о кластере",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ClusterResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "2b71e17b-2118-4f81-90d8-c8c4b9e8e4e3",
                                    "cluster": {
                                        "id": 18685,
                                        "name": "Кластер 18685",
                                        "created_at": "2023-01-13T10:10:29.742918",
                                        "status": "active",
                                        "description": "Описание кластера",
                                        "ha": false,
                                        "k8s_version": "v1.22.16",
                                        "network_driver": "canal",
                                        "ingress": true,
                                        "preset_id": 403,
                                        "cpu": 1,
                                        "ram": 10240,
                                        "disk": 100
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"name\": \"Fervent Pascal\", \"ha\": false, \"k8s_version\": \"v1.22.16\", \"network_driver\": \"canal\", \"ingress\": false, \"preset_id\": 403, \"worker_groups\": {\"name\": \"new group\", \"preset_id\": 399, \"node_count\": 1}}' \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\"name\": \"Fervent Pascal\", \"ha\": false, \"k8s_version\": \"v1.22.16\", \"network_driver\": \"canal\", \"ingress\": false, \"preset_id\": 403, \"worker_groups\": {\"name\": \"new group\", \"preset_id\": 399, \"node_count\": 1}}',\n    body: JSON.stringify({\n        'name': 'Fervent Pascal',\n        'ha': false,\n        'k8s_version': 'v1.22.16',\n        'network_driver': 'canal',\n        'ingress': false,\n        'preset_id': 403,\n        'worker_groups': {\n            'name': 'new group',\n            'preset_id': 399,\n            'node_count': 1\n        }\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/k8s/clusters',\n    // '{\"name\": \"Fervent Pascal\", \"ha\": false, \"k8s_version\": \"v1.22.16\", \"network_driver\": \"canal\", \"ingress\": false, \"preset_id\": 403, \"worker_groups\": {\"name\": \"new group\", \"preset_id\": 399, \"node_count\": 1}}',\n    {\n        'name': 'Fervent Pascal',\n        'ha': false,\n        'k8s_version': 'v1.22.16',\n        'network_driver': 'canal',\n        'ingress': false,\n        'preset_id': 403,\n        'worker_groups': {\n            'name': 'new group',\n            'preset_id': 399,\n            'node_count': 1\n        }\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'name': 'Fervent Pascal',\n    'ha': False,\n    'k8s_version': 'v1.22.16',\n    'network_driver': 'canal',\n    'ingress': False,\n    'preset_id': 403,\n    'worker_groups': {\n        'name': 'new group',\n        'preset_id': 399,\n        'node_count': 1,\n    },\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/k8s/clusters', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"name\": \"Fervent Pascal\", \"ha\": false, \"k8s_version\": \"v1.22.16\", \"network_driver\": \"canal\", \"ingress\": false, \"preset_id\": 403, \"worker_groups\": {\"name\": \"new group\", \"preset_id\": 399, \"node_count\": 1}}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"name\": \"Fervent Pascal\", \"ha\": false, \"k8s_version\": \"v1.22.16\", \"network_driver\": \"canal\", \"ingress\": false, \"preset_id\": 403, \"worker_groups\": {\"name\": \"new group\", \"preset_id\": 399, \"node_count\": 1}}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/k8s/clusters\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"name\\\": \\\"Fervent Pascal\\\", \\\"ha\\\": false, \\\"k8s_version\\\": \\\"v1.22.16\\\", \\\"network_driver\\\": \\\"canal\\\", \\\"ingress\\\": false, \\\"preset_id\\\": 403, \\\"worker_groups\\\": {\\\"name\\\": \\\"new group\\\", \\\"preset_id\\\": 399, \\\"node_count\\\": 1}}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/k8s/clusters/{cluster_id}": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение информации о кластере",
                "description": "Чтобы получить информацию о кластере, отправьте GET запрос в `/api/v1/k8s/clusters/{cluster_id}`",
                "operationId": "Получение_информации_о_кластере_api_v1__customer__clusters__cluster_id__get",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о кластере",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ClusterResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "511cf606-ab89-4105-891a-e6914608cd3e",
                                    "cluster": {
                                        "id": 45059,
                                        "name": "Кластер 45059",
                                        "created_at": "2023-01-13T10:10:29.737755",
                                        "status": "active",
                                        "description": "Описание кластера",
                                        "ha": false,
                                        "k8s_version": "v1.22.16",
                                        "network_driver": "canal",
                                        "ingress": true,
                                        "preset_id": 403,
                                        "cpu": 1,
                                        "ram": 10240,
                                        "disk": 100
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/46\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/46', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/46', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/46', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/46');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/46\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/46\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Удаление кластера",
                "description": "Чтобы удалить кластер, отправьте DELETE запрос в `/api/v1/k8s/clusters/{cluster_id}`",
                "operationId": "Удаление_кластера_api_v1__customer__clusters__cluster_id__delete",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `cluster_delete`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "cluster_delete": {
                                                    "$ref": "#/components/schemas/delete-service-response"
                                                }
                                            },
                                            "required": [
                                                "cluster_delete"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Кластер удален"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/10\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/10', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/10', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/10', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/10');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/10\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/10\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Обновление информации о кластере",
                "description": "Чтобы обновить информацию о кластере, отправьте PATCH запрос в `/api/v1/k8s/clusters/{cluster_id}`",
                "operationId": "Обновление_информации_о_кластере_api_v1__customer__clusters__cluster_id__patch",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterEdit"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Информация о кластере",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ClusterResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "383c587c-f421-45bd-9ac1-a890f13ac6dc",
                                    "cluster": {
                                        "id": 13649,
                                        "name": "Кластер 13649",
                                        "created_at": "2023-01-13T10:10:29.748020",
                                        "status": "active",
                                        "description": "Описание кластера",
                                        "ha": false,
                                        "k8s_version": "v1.22.16",
                                        "network_driver": "canal",
                                        "ingress": false,
                                        "preset_id": 403,
                                        "cpu": 1,
                                        "ram": 10240,
                                        "disk": 100
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"description\": \"new description\"}' \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/45\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/45', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\"description\": \"new description\"}',\n    body: JSON.stringify({\n        'description': 'new description'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/k8s/clusters/45',\n    // '{\"description\": \"new description\"}',\n    {\n        'description': 'new description'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'description': 'new description',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/k8s/clusters/45', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/45');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"description\": \"new description\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"description\": \"new description\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/45\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/45\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"description\\\": \\\"new description\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/k8s/clusters/{cluster_id}/resources": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение ресурсов кластера",
                "description": "Чтобы получить ресурсы кластера, отправьте GET запрос в `/api/v1/k8s/clusters/{cluster_id}/resources`.",
                "operationId": "Получение_ресурсов_кластера_api_v1__customer__clusters__cluster_id__resources_get",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список ресурсов",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ResourcesResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "a3044ff0-182f-42d5-aa05-d5c8367e72ae",
                                    "resources": {
                                        "nodes": 10,
                                        "cores": {
                                            "requested": 10,
                                            "allocatable": 10,
                                            "capacity": 10,
                                            "used": 5.5
                                        },
                                        "memory": {
                                            "requested": 10240,
                                            "allocatable": 9216,
                                            "capacity": 9216,
                                            "used": 5632
                                        },
                                        "pods": {
                                            "requested": 10,
                                            "allocatable": 10,
                                            "capacity": 10,
                                            "used": 5
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/k8s/clusters/{cluster_id}/kubeconfig": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение файла kubeconfig",
                "description": "Чтобы получить файл kubeconfig, отправьте GET запрос в `/api/v1/k8s/clusters/{cluster_id}/kubeconfig`.",
                "operationId": "Получение_файла_kubeconfig_api_v1__customer__clusters__cluster_id__kubeconfig_get",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Загрузка конфигурации подключения к кластеру",
                        "content": {
                            "application/yaml": {
                                "schema": {
                                    "title": "Response 200 Получение Файла Kubeconfig Api V1  Customer  Clusters  Cluster Id  Kubeconfig Get",
                                    "type": "string"
                                },
                                "example": {
                                    "apiVersion": "v1",
                                    "kind": "Config",
                                    "clusters": [
                                        {
                                            "name": "examply-example",
                                            "cluster": {
                                                "server": "https://k8saas.timeweb.com/k8s/clusters/c-12345"
                                            }
                                        }
                                    ],
                                    "users": [
                                        {
                                            "name": "examply-example",
                                            "user": {
                                                "token": "kubeconfig-user-example:exampleexampleexample"
                                            }
                                        }
                                    ],
                                    "contexts": [
                                        {
                                            "name": "example-example",
                                            "context": {
                                                "user": "example-example",
                                                "cluster": "example-example"
                                            }
                                        }
                                    ],
                                    "current-context": "example-example"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/k8s/clusters/{cluster_id}/groups": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение групп нод кластера",
                "description": "Чтобы получить группы нод кластера, отправьте GET запрос в `/api/v1/k8s/clusters/{cluster_id}/groups`.",
                "operationId": "Получение_групп_нод_кластера_api_v1__customer__clusters__cluster_id__groups_get",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список групп нод",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/NodeGroupsResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "aed71c10-95d8-4e35-85fc-acc5d916e1c3",
                                    "meta": {
                                        "total": 3
                                    },
                                    "node_groups": [
                                        {
                                            "id": 2026,
                                            "name": "Группа нод 2026",
                                            "created_at": "2023-01-13T10:10:29.753143",
                                            "preset_id": 399,
                                            "node_count": 7
                                        },
                                        {
                                            "id": 7844,
                                            "name": "Группа нод 7844",
                                            "created_at": "2023-01-13T10:10:29.753229",
                                            "preset_id": 399,
                                            "node_count": 3
                                        },
                                        {
                                            "id": 2802,
                                            "name": "Группа нод 2802",
                                            "created_at": "2023-01-13T10:10:29.753297",
                                            "preset_id": 399,
                                            "node_count": 7
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Создание группы нод",
                "description": "Чтобы создать группу нод кластера, отправьте POST запрос в `/api/v1/k8s/clusters/{cluster_id}/groups`.",
                "operationId": "Создание_группы_нод_api_v1__customer__clusters__cluster_id__groups_post",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NodeGroupIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Информация о группе нод",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/NodeGroupResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "89e6b1c9-14b2-443e-b5c5-84914346ea79",
                                    "node_group": {
                                        "id": 1509,
                                        "name": "Группа нод 1509",
                                        "created_at": "2023-01-13T10:10:29.753638",
                                        "preset_id": 399,
                                        "node_count": 8
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"name\": \"group name\", \"preset_id\": 399, \"node_count\": 1}' \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\"name\": \"group name\", \"preset_id\": 399, \"node_count\": 1}',\n    body: JSON.stringify({\n        'name': 'group name',\n        'preset_id': 399,\n        'node_count': 1\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups',\n    // '{\"name\": \"group name\", \"preset_id\": 399, \"node_count\": 1}',\n    {\n        'name': 'group name',\n        'preset_id': 399,\n        'node_count': 1\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'name': 'group name',\n    'preset_id': 399,\n    'node_count': 1,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"name\": \"group name\", \"preset_id\": 399, \"node_count\": 1}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"name\": \"group name\", \"preset_id\": 399, \"node_count\": 1}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"name\\\": \\\"group name\\\", \\\"preset_id\\\": 399, \\\"node_count\\\": 1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение информации о группе нод",
                "description": "Чтобы получить информацию о группе нод, отправьте GET запрос в `/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}`.",
                "operationId": "Получение_информации_о_группе_нод_api_v1__customer__clusters__cluster_id__groups__group_id__get",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    },
                    {
                        "description": "Уникальный идентификатор группы",
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор группы"
                        },
                        "name": "group_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о группе нод",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/NodeGroupResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "96118bab-77d1-4681-9b4c-6c3b89cbbf90",
                                    "node_group": {
                                        "id": 341,
                                        "name": "Группа нод 341",
                                        "created_at": "2023-01-13T10:10:29.753519",
                                        "preset_id": 399,
                                        "node_count": 8
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Удаление группы нод",
                "description": "Чтобы удалить группу нод, отправьте DELETE запрос в `/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}`.",
                "operationId": "Удаление_группы_нод_api_v1__customer__clusters__cluster_id__groups__group_id__delete",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    },
                    {
                        "description": "Уникальный идентификатор группы",
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор группы"
                        },
                        "name": "group_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Группа нод удалена"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}/nodes": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение списка нод принадлежащих группе",
                "description": "Чтобы получить список нод принадлежащих группе, отправьте GET запрос в `/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}/nodes`.",
                "operationId": "Получение_списка_нод_принадлежащих_группе_api_v1__customer__clusters__cluster_id__groups__group_id__nodes_get",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    },
                    {
                        "description": "Уникальный идентификатор группы",
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор группы"
                        },
                        "name": "group_id",
                        "in": "path"
                    },
                    {
                        "description": "Обозначает количество записей, которое необходимо вернуть.",
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "description": "Обозначает количество записей, которое необходимо вернуть.",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "description": "Указывает на смещение, относительно начала списка.",
                        "required": false,
                        "schema": {
                            "title": "Offset",
                            "type": "integer",
                            "description": "Указывает на смещение, относительно начала списка.",
                            "default": 0
                        },
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список нод",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/NodesResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "9a5f84ec-47e7-485e-86f0-357d70c92c27",
                                    "meta": {
                                        "total": 3
                                    },
                                    "nodes": [
                                        {
                                            "id": 5373,
                                            "created_at": "2023-01-13T10:10:29.753764",
                                            "type": "worker",
                                            "group_id": 1,
                                            "status": "active",
                                            "preset_id": 399,
                                            "cpu": 1,
                                            "ram": 1024,
                                            "disk": 10,
                                            "network": 200
                                        },
                                        {
                                            "id": 2240,
                                            "created_at": "2023-01-13T10:10:29.753879",
                                            "type": "worker",
                                            "group_id": 1,
                                            "status": "active",
                                            "preset_id": 399,
                                            "cpu": 1,
                                            "ram": 1024,
                                            "disk": 10,
                                            "network": 200
                                        },
                                        {
                                            "id": 6584,
                                            "created_at": "2023-01-13T10:10:29.753984",
                                            "type": "worker",
                                            "group_id": 1,
                                            "status": "active",
                                            "preset_id": 399,
                                            "cpu": 1,
                                            "ram": 1024,
                                            "disk": 10,
                                            "network": 200
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Увеличение количество нод в группе на указанное количество",
                "description": "Чтобы увеличить количество нод в группе на указанное значение, отправьте POST запрос на `/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}/nodes",
                "operationId": "Увеличение_количество_нод_в_группе_на_указанное_количество_api_v1__customer__clusters__cluster_id__groups__group_id__nodes_post",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    },
                    {
                        "description": "Уникальный идентификатор группы",
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор группы"
                        },
                        "name": "group_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NodeCount"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Список нод",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/NodesResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "25f53867-85e1-4425-9125-3860b39e1402",
                                    "meta": {
                                        "total": 3
                                    },
                                    "nodes": [
                                        {
                                            "id": 804,
                                            "created_at": "2023-01-13T10:10:29.754400",
                                            "type": "worker",
                                            "group_id": 1,
                                            "status": "active",
                                            "preset_id": 399,
                                            "cpu": 1,
                                            "ram": 1024,
                                            "disk": 10,
                                            "network": 200
                                        },
                                        {
                                            "id": 899,
                                            "created_at": "2023-01-13T10:10:29.754504",
                                            "type": "worker",
                                            "group_id": 1,
                                            "status": "active",
                                            "preset_id": 399,
                                            "cpu": 1,
                                            "ram": 1024,
                                            "disk": 10,
                                            "network": 200
                                        },
                                        {
                                            "id": 5066,
                                            "created_at": "2023-01-13T10:10:29.754614",
                                            "type": "worker",
                                            "group_id": 1,
                                            "status": "active",
                                            "preset_id": 399,
                                            "cpu": 1,
                                            "ram": 1024,
                                            "disk": 10,
                                            "network": 200
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"count\": 2}' \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\"count\": 2}',\n    body: JSON.stringify({\n        'count': 2\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes',\n    // '{\"count\": 2}',\n    {\n        'count': 2\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'count': 2,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"count\": 2}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"count\": 2}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"count\\\": 2}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Уменьшение количества нод в группе на указанное количество",
                "description": "Чтобы уменьшить количество нод в группе на указанное значение, отправьте DELETE запрос в `/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}/nodes`.",
                "operationId": "Уменьшение_количества_нод_в_группе_на_указанное_количество_api_v1__customer__clusters__cluster_id__groups__group_id__nodes_delete",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    },
                    {
                        "description": "Уникальный идентификатор группы",
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор группы"
                        },
                        "name": "group_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NodeCount"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Количество нод уменьшено"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"count\": 2}' \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\"count\": 2}',\n    body: JSON.stringify({\n        'count': 2\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // data: '{\"count\": 2}',\n    data: {\n        'count': 2\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'count': 2,\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"count\": 2}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"count\": 2}`)\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"count\\\": 2}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/k8s/clusters/{cluster_id}/nodes": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение списка нод",
                "description": "Чтобы получить список нод, отправьте GET запрос в `/api/v1/k8s/clusters/{cluster_id}/nodes`.",
                "operationId": "Получение_списка_нод_api_v1__customer__clusters__cluster_id__nodes_get",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список нод",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/NodesResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                },
                                "example": {
                                    "response_id": "9a5f84ec-47e7-485e-86f0-357d70c92c27",
                                    "meta": {
                                        "total": 3
                                    },
                                    "nodes": [
                                        {
                                            "id": 5373,
                                            "created_at": "2023-01-13T10:10:29.753764",
                                            "type": "worker",
                                            "group_id": 1,
                                            "status": "active",
                                            "preset_id": 399,
                                            "cpu": 1,
                                            "ram": 1024,
                                            "disk": 10,
                                            "network": 200
                                        },
                                        {
                                            "id": 2240,
                                            "created_at": "2023-01-13T10:10:29.753879",
                                            "type": "worker",
                                            "group_id": 1,
                                            "status": "active",
                                            "preset_id": 399,
                                            "cpu": 1,
                                            "ram": 1024,
                                            "disk": 10,
                                            "network": 200
                                        },
                                        {
                                            "id": 6584,
                                            "created_at": "2023-01-13T10:10:29.753984",
                                            "type": "worker",
                                            "group_id": 1,
                                            "status": "active",
                                            "preset_id": 399,
                                            "cpu": 1,
                                            "ram": 1024,
                                            "disk": 10,
                                            "network": 200
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/k8s/clusters/{cluster_id}/nodes/{node_id}": {
            "delete": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Удаление ноды",
                "description": "Чтобы удалить ноду, отправьте DELETE запрос в `/api/v1/k8s/clusters/{cluster_id}/nodes/{node_id}`.",
                "operationId": "Удаление_ноды_api_v1__customer__clusters__cluster_id__nodes__node_id__delete",
                "parameters": [
                    {
                        "description": "Уникальный идентификатор кластера",
                        "required": true,
                        "schema": {
                            "title": "Cluster Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор кластера"
                        },
                        "name": "cluster_id",
                        "in": "path"
                    },
                    {
                        "description": "Уникальный идентификатор группы нод",
                        "required": true,
                        "schema": {
                            "title": "Node Id",
                            "type": "integer",
                            "description": "Уникальный идентификатор группы нод"
                        },
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Нода удалена"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/k8s/k8s_versions": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение списка версий k8s",
                "description": "Чтобы получить список версий k8s, отправьте GET запрос в `/api/v1/k8s/k8s_versions`.",
                "operationId": "Получение_списка_версий_k8s_api_v1_k8s_versions_get",
                "responses": {
                    "200": {
                        "description": "Список версий k8s",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/K8SVersionsResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/k8s-versions\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/k8s-versions', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/k8s-versions', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/k8s-versions', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/k8s-versions');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/k8s-versions\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/k8s-versions\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/k8s/network_drivers": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение списка сетевых драйверов k8s",
                "description": "Чтобы получить список сетевых драйверов k8s, отправьте GET запрос в `/api/v1/k8s/network_drivers`.",
                "operationId": "Получение_списка_сетевых_драйверов_k8s_api_v1_network_drivers_get",
                "responses": {
                    "200": {
                        "description": "Список сетевых драйверов k8s",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/NetworkDriversResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/network-drivers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/network-drivers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/network-drivers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/network-drivers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/network-drivers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/network-drivers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/network-drivers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/presets/k8s": {
            "get": {
                "tags": [
                    "Kubernetes"
                ],
                "summary": "Получение списка тарифов",
                "description": "Чтобы получить список тарифов, отправьте GET запрос в `/api/v1/presets/k8s`.",
                "operationId": "Получение_списка_тарифов_api_v1_presets_get",
                "responses": {
                    "200": {
                        "description": "Список тарифов",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PresetsResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/k8s/presets\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/k8s/presets', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/presets', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/k8s/presets', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/presets');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/presets\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/presets\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ]
            }
        },
        "/api/v1/servers": {
            "get": {
                "summary": "Получение списка серверов",
                "description": "Чтобы получить серверов, отправьте GET запрос на `/api/v1/servers`.\n\n Тело ответа будет представлять собой объект JSON с ключом `servers`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/servers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `servers`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "servers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/vds"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "servers",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "post": {
                "summary": "Создание сервера",
                "description": "Чтобы создать сервер, отправьте POST запрос в `api/v1/servers`, задав необходимые атрибуты. Обязательно должен присутствовать один из параметров `configuration` или `preset_id`, а также `image_id` или `os_id`.\n\nCервер будет создан с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданном сервере.\n\n",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"is_ddos_guard\": false,\n  \"os_id\": 65,\n  \"bandwidth\": 200,\n  \"comment\": \"comment\",\n  \"name\": \"name\",\n  \"preset_id\": 122,\n  \"is_local_network\": false\n}' \"https://api.timeweb.cloud/api/v1/servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"is_ddos_guard\": false,\\n  \"os_id\": 65,\\n  \"bandwidth\": 200,\\n  \"comment\": \"comment\",\\n  \"name\": \"name\",\\n  \"preset_id\": 122,\\n  \"is_local_network\": false\\n}',\n    body: JSON.stringify({\n        'is_ddos_guard': false,\n        'os_id': 65,\n        'bandwidth': 200,\n        'comment': 'comment',\n        'name': 'name',\n        'preset_id': 122,\n        'is_local_network': false\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/servers',\n    // '{\\n  \"is_ddos_guard\": false,\\n  \"os_id\": 65,\\n  \"bandwidth\": 200,\\n  \"comment\": \"comment\",\\n  \"name\": \"name\",\\n  \"preset_id\": 122,\\n  \"is_local_network\": false\\n}',\n    {\n        'is_ddos_guard': false,\n        'os_id': 65,\n        'bandwidth': 200,\n        'comment': 'comment',\n        'name': 'name',\n        'preset_id': 122,\n        'is_local_network': false\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'is_ddos_guard': False,\n    'os_id': 65,\n    'bandwidth': 200,\n    'comment': 'comment',\n    'name': 'name',\n    'preset_id': 122,\n    'is_local_network': False,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/servers', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"is_ddos_guard\\\": false,\\n  \\\"os_id\\\": 65,\\n  \\\"bandwidth\\\": 200,\\n  \\\"comment\\\": \\\"comment\\\",\\n  \\\"name\\\": \\\"name\\\",\\n  \\\"preset_id\\\": 122,\\n  \\\"is_local_network\\\": false\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"is_ddos_guard\": false,\n  \"os_id\": 65,\n  \"bandwidth\": 200,\n  \"comment\": \"comment\",\n  \"name\": \"name\",\n  \"preset_id\": 122,\n  \"is_local_network\": false\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"is_ddos_guard\\\": false,\\n  \\\"os_id\\\": 65,\\n  \\\"bandwidth\\\": 200,\\n  \\\"comment\\\": \\\"comment\\\",\\n  \\\"name\\\": \\\"name\\\",\\n  \\\"preset_id\\\": 122,\\n  \\\"is_local_network\\\": false\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/create-server"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `server`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "server": {
                                                    "$ref": "#/components/schemas/vds"
                                                }
                                            },
                                            "required": [
                                                "server"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}": {
            "get": {
                "summary": "Получение сервера",
                "description": "Чтобы получить сервер, отправьте запрос GET в `/api/v1/servers/{server_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n \"https://api.timeweb.cloud/api/v1/servers/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/servers/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `server`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "server": {
                                                    "$ref": "#/components/schemas/vds"
                                                }
                                            },
                                            "required": [
                                                "server"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "delete": {
                "summary": "Удаление сервера",
                "description": "Чтобы удалить сервер, отправьте запрос DELETE в `/api/v1/servers/{server_id}`.\\\n Обратите внимание, если на аккаунте включено удаление серверов по смс, то вернется ошибка 423.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/servers/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/servers/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/servers/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/servers/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `server_delete`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "server_delete": {
                                                    "$ref": "#/components/schemas/delete-service-response"
                                                }
                                            },
                                            "required": [
                                                "server_delete"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Успешное удаление сервера"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "patch": {
                "summary": "Изменение сервера",
                "description": "Чтобы обновить только определенные атрибуты сервера, отправьте запрос PATCH в `/api/v1/servers/{server_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"os_id\": 65,\n  \"bandwidth\": 200,\n  \"comment\": \"comment\",\n  \"name\": \"name\",\n  \"preset_id\": 122,\n}' \"https://api.timeweb.cloud/api/v1/servers/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: '{\\n  \"os_id\": 65,\\n  \"bandwidth\": 200,\\n  \"comment\": \"comment\",\\n  \"name\": \"name\",\\n  \"preset_id\": 122,\\n}'\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/servers/123',\n    '{\\n  \"os_id\": 65,\\n  \"bandwidth\": 200,\\n  \"comment\": \"comment\",\\n  \"name\": \"name\",\\n  \"preset_id\": 122,\\n}',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\ndata = '{\\n  \"os_id\": 65,\\n  \"bandwidth\": 200,\\n  \"comment\": \"comment\",\\n  \"name\": \"name\",\\n  \"preset_id\": 122,\\n}'\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/servers/123', headers=headers, data=data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"os_id\\\": 65,\\n  \\\"bandwidth\\\": 200,\\n  \\\"comment\\\": \\\"comment\\\",\\n  \\\"name\\\": \\\"name\\\",\\n  \\\"preset_id\\\": 122,\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"os_id\": 65,\n  \"bandwidth\": 200,\n  \"comment\": \"comment\",\n  \"name\": \"name\",\n  \"preset_id\": 122,\n}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"os_id\\\": 65,\\n  \\\"bandwidth\\\": 200,\\n  \\\"comment\\\": \\\"comment\\\",\\n  \\\"name\\\": \\\"name\\\",\\n  \\\"preset_id\\\": 122,\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-server"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `server`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "server": {
                                                    "$ref": "#/components/schemas/vds"
                                                }
                                            },
                                            "required": [
                                                "server"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/action": {
            "post": {
                "summary": "Выполнение действия над сервером",
                "description": "Чтобы выполнить действие над сервером, отправьте POST запрос на `/api/v1/servers/{server_id}/action`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"action\": \"shutdown\",\n}' \"https://api.timeweb.cloud/api/v1/servers/123/action\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/action', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: '{\\n  \"action\": \"shutdown\",\\n}'\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/servers/123/action',\n    '{\\n  \"action\": \"shutdown\",\\n}',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\ndata = '{\\n  \"action\": \"shutdown\",\\n}'\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/servers/123/action', headers=headers, data=data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/action');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"action\\\": \\\"shutdown\\\",\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"action\": \"shutdown\",\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/action\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/action\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"action\\\": \\\"shutdown\\\",\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "Действие над сервером",
                                "properties": {
                                    "action": {
                                        "type": "string",
                                        "enum": [
                                            "hard_reboot",
                                            "hard_shutdown",
                                            "install",
                                            "reboot",
                                            "remove",
                                            "reset_password",
                                            "shutdown",
                                            "start",
                                            "clone"
                                        ]
                                    }
                                },
                                "required": [
                                    "action"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Успешное выполнение действия"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/clone": {
            "post": {
                "summary": "Клонирование сервера",
                "description": "Чтобы клонировать сервер, отправьте POST запрос на `/api/v1/servers/{server_id}/clone`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{}' \"https://api.timeweb.cloud/api/v1/servers/123/clone\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/clone', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({})\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/servers/123/clone',\n    {},\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/servers/123/clone', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/clone');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/clone\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/clone\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `server`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "server": {
                                                    "$ref": "#/components/schemas/vds"
                                                }
                                            },
                                            "required": [
                                                "server"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/statistics": {
            "get": {
                "summary": "Получение статистики сервера",
                "description": "Чтобы получить статистику сервера, отправьте GET запрос на `/api/v1/servers/{server_id}/statistics`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "description": "Дата начала сбора статистики",
                        "in": "query",
                        "name": "date_from",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Дата окончания сбора статистики",
                        "in": "query",
                        "name": "date_to",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/statistics\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/statistics', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/statistics', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/servers/123/statistics', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/statistics');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/statistics\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/statistics\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключами `cpu`, `disk`, `network_traffic`, `ram`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "cpu": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "logged_at": {
                                                                "type": "string",
                                                                "description": "Дата события в формате ISO 8061",
                                                                "format": "date-time",
                                                                "example": "2023-02-05T20:37:57+03:00"
                                                            },
                                                            "load": {
                                                                "type": "number",
                                                                "description": "Нагрузка нагрузка на процессор. Возвращает значение от 0 до 1, где 1 это 100%",
                                                                "example": 0.123
                                                            }
                                                        },
                                                        "required": [
                                                            "logged_at",
                                                            "load"
                                                        ]
                                                    }
                                                },
                                                "network_traffic": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "logged_at": {
                                                                "type": "string",
                                                                "description": "Дата события в формате ISO 8061",
                                                                "format": "date-time",
                                                                "example": "2023-02-05T20:37:57+03:00"
                                                            },
                                                            "incoming": {
                                                                "type": "number",
                                                                "description": "Входящий трафик сети в Мб/с",
                                                                "example": 1.123
                                                            },
                                                            "outgoing": {
                                                                "type": "number",
                                                                "description": "Исходящий трафик сети в Мб/с",
                                                                "example": 1.123
                                                            }
                                                        },
                                                        "required": [
                                                            "logged_at",
                                                            "incoming",
                                                            "outgoing"
                                                        ]
                                                    }
                                                },
                                                "disk": {
                                                    "type": "array",
                                                    "description": "Статистика основного диска",
                                                    "items": {
                                                        "properties": {
                                                            "logged_at": {
                                                                "type": "string",
                                                                "description": "Дата события в формате ISO 8061",
                                                                "format": "date-time",
                                                                "example": "2023-02-05T20:37:57+03:00"
                                                            },
                                                            "write": {
                                                                "type": "number",
                                                                "description": "Нагрузка на запись диска в Мб/с",
                                                                "example": 1.123
                                                            },
                                                            "read": {
                                                                "type": "number",
                                                                "description": "Нагрузка на чтение диска в Мб/с",
                                                                "example": 1.123
                                                            }
                                                        },
                                                        "required": [
                                                            "logged_at",
                                                            "write",
                                                            "read"
                                                        ]
                                                    }
                                                },
                                                "ram": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "logged_at": {
                                                                "type": "string",
                                                                "description": "Дата события в формате ISO 8061",
                                                                "format": "date-time",
                                                                "example": "2023-02-05T20:37:57+03:00"
                                                            },
                                                            "total": {
                                                                "type": "number",
                                                                "description": "Общее количество оперативной памяти в Мб",
                                                                "example": 1936
                                                            },
                                                            "used": {
                                                                "type": "number",
                                                                "description": "Количество потревляемой оперативной памяти в Мб",
                                                                "example": 598
                                                            },
                                                            "used_cached": {
                                                                "type": "number",
                                                                "description": "Количество закешированной оперативной памяти в Мб",
                                                                "example": 598
                                                            },
                                                            "available": {
                                                                "type": "number",
                                                                "description": "Количество доступной оперативной памяти в Мб",
                                                                "example": 312
                                                            }
                                                        },
                                                        "required": [
                                                            "logged_at",
                                                            "total",
                                                            "used",
                                                            "used_cached",
                                                            "available"
                                                        ]
                                                    }
                                                }
                                            },
                                            "required": [
                                                "cpu",
                                                "ram",
                                                "disk",
                                                "network_traffic"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/os/servers": {
            "get": {
                "summary": "Получение списка операционных систем",
                "description": "Чтобы получить список всех операционных систем, отправьте GET запрос на `/api/v1/os/servers`.\n\n Тело ответа будет представлять собой объект JSON с ключом `servers_os`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/os/servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/os/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/os/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/os/servers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/os/servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/os/servers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/os/servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `servers_os`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "servers_os": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/servers-os"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "servers_os",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/presets/servers": {
            "get": {
                "summary": "Получение списка тарифов серверов",
                "description": "Чтобы получить список всех тарифов серверов, отправьте GET запрос на `/api/v1/presets/servers`.\n\n Тело ответа будет представлять собой объект JSON с ключом `server_presets`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/presets/servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/presets/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/presets/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/presets/servers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/servers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `server_presets`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "server_presets": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/servers-preset"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "server_presets"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/configurator/servers": {
            "get": {
                "summary": "Получение списка конфигураторов серверов",
                "description": "Чтобы получить список всех конфигураторов серверов, отправьте GET запрос на `/api/v1/configurator/servers`.\n\n Тело ответа будет представлять собой объект JSON с ключом `server_configurators`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/configurator/servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/configurator/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/configurator/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/configurator/servers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/configurator/servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/configurator/servers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/configurator/servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `server_configurators`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "server_configurators": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/servers-configurator"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "server_configurators"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/software/servers": {
            "get": {
                "summary": "Получение списка ПО из маркетплейса",
                "description": "Чтобы получить список ПО из маркетплейса, отправьте GET запрос на `/api/v1/software/servers`.\n\n Тело ответа будет представлять собой объект JSON с ключом `servers_software`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/software/servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/software/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/software/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/software/servers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/software/servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/software/servers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/software/servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `servers_software`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "servers_software": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/servers-software"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "servers_software",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/boot-mode": {
            "post": {
                "summary": "Выбор типа загрузки операционной системы сервера",
                "description": "Чтобы изменить тип загрузки операционной системы сервера, отправьте POST запрос на `/api/v1/servers/{server_id}/boot-mode`. \\\n После смены типа загрузки сервер будет перезапущен.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" -d '{ \"boot_mode\": \"default\" }' \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/boot-mode\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/boot-mode', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{ \"boot_mode\": \"default\" }',\n    body: JSON.stringify({\n        'boot_mode': 'default'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/servers/123/boot-mode',\n    // '{ \"boot_mode\": \"default\" }',\n    {\n        'boot_mode': 'default'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'boot_mode': 'default',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/servers/123/boot-mode', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/boot-mode');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"boot_mode\": \"default\" }');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{ \"boot_mode\": \"default\" }`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/boot-mode\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/boot-mode\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{ \\\"boot_mode\\\": \\\"default\\\" }\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "boot_mode": {
                                        "type": "string",
                                        "description": "Тип загрузки операционной системы. \\\n Параметры: `default` - стандартный режим, `single` - однопользовательский режим, `recovery_disk` - загрузка с диска восстановления",
                                        "enum": [
                                            "default",
                                            "single",
                                            "recovery_disk"
                                        ],
                                        "example": "default"
                                    }
                                },
                                "required": [
                                    "boot_mode"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Успешная смена загрузки операционной системы сервера"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/local-networks/nat-mode": {
            "patch": {
                "summary": "Изменение правил маршрутизации трафика сервера (NAT)",
                "description": "Чтобы измененить правила маршрутизации трафика сервера (NAT), отправьте PATCH запрос на `/api/v1/servers/{server_id}/local-networks/nat-mode`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" -d '{ \"nat_mode\": \"no_nat\" }' \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{ \"nat_mode\": \"no_nat\" }',\n    body: JSON.stringify({\n        'nat_mode': 'no_nat'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode',\n    // '{ \"nat_mode\": \"no_nat\" }',\n    {\n        'nat_mode': 'no_nat'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'nat_mode': 'no_nat',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"nat_mode\": \"no_nat\" }');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{ \"nat_mode\": \"no_nat\" }`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{ \\\"nat_mode\\\": \\\"no_nat\\\" }\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "nat_mode": {
                                        "type": "string",
                                        "description": "Правило для маршрутизации трафика. \\\n Досутпные правила: `dnat_and_snat` - разрешен входящий и исходящий трафик, `snat` - разрешен только исходящий трафик, `no_nat` - разрешен трафик только в локальной сети",
                                        "enum": [
                                            "dnat_and_snat",
                                            "snat",
                                            "no_nat"
                                        ],
                                        "example": "no_nat"
                                    }
                                },
                                "required": [
                                    "nat_mode"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Успешна смена правила маршрутизации трафика"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/ips": {
            "get": {
                "summary": "Получение списка IP-адресов сервера",
                "description": "Чтобы получить список IP-адресов сервера, отправьте GET запрос на `/api/v1/servers/{server_id}/ips`. \\\n На данный момент IPv6 доступны только для локации `ru-1`",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n \"https://api.timeweb.cloud/api/v1/servers/123/ips\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/ips', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/ips', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ips');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/ips\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/ips\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `server_ips`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "server_ips": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/server-ip"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "server_ips"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "post": {
                "summary": "Добавление IP-адреса сервера",
                "description": "Чтобы добавить IP-адрес сервера, отправьте POST запрос на `/api/v1/servers/{server_id}/ips`. \\\n На данный момент IPv6 доступны только для серверов с локецией `ru-1`",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"type\": \"ipv4\"\n}' \"https://api.timeweb.cloud/api/v1/servers/123/ips\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/ips', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"type\": \"ipv4\"\\n}',\n    body: JSON.stringify({\n        'type': 'ipv4'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/servers/123/ips',\n    // '{\\n  \"type\": \"ipv4\"\\n}',\n    {\n        'type': 'ipv4'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'type': 'ipv4',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ips');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"type\\\": \\\"ipv4\\\"\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"type\": \"ipv4\"\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/ips\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/ips\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"type\\\": \\\"ipv4\\\"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "Тип IP-адреса",
                                        "enum": [
                                            "ipv4",
                                            "ipv6"
                                        ],
                                        "example": "ipv6"
                                    },
                                    "ptr": {
                                        "type": "string",
                                        "description": "Ptr запись IP-адреса",
                                        "example": "1197521-cl1233.tw1.ru"
                                    }
                                },
                                "required": [
                                    "type"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `server_ip`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "server_ip": {
                                                    "$ref": "#/components/schemas/server-ip"
                                                }
                                            },
                                            "required": [
                                                "server_ip"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "delete": {
                "summary": "Удаление IP-адреса сервера",
                "description": "Чтобы удалить IP-адрес сервера, отправьте DELETE запрос на `/api/v1/servers/{server_id}/ips`. Нельзя удалить основной IP-адрес",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"ip\": \"1.1.1.1\"\n}' \"https://api.timeweb.cloud/api/v1/servers/123/ips\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/ips', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"ip\": \"1.1.1.1\"\\n}',\n    body: JSON.stringify({\n        'ip': '1.1.1.1'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/servers/123/ips',\n    // '{\\n  \"ip\": \"1.1.1.1\"\\n}',\n    {\n        'ip': '1.1.1.1'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'ip': '1.1.1.1',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ips');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"ip\\\": \\\"1.1.1.1\\\"\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"ip\": \"1.1.1.1\"\n}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/ips\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/ips\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"ip\\\": \\\"1.1.1.1\\\"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ip": {
                                        "type": "string",
                                        "description": "IPv4 или IPv6 IP-адрес",
                                        "example": "1.1.1.1"
                                    }
                                },
                                "required": [
                                    "ip"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "IP-адрес успешно удален"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "patch": {
                "summary": "Изменение IP-адреса сервера",
                "description": "Чтобы изменить IP-адрес сервера, отправьте POST запрос на `/api/v1/servers/{server_id}/ips`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"ptr\": \"1197521-cl1233.tw1.ru\", \n  \"ip\": \"1.1.1.1\"\n}' \"https://api.timeweb.cloud/api/v1/servers/123/ips\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/ips', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"ptr\": \"1197521-cl1233.tw1.ru\", \\n  \"ip\": \"1.1.1.1\"\\n}',\n    body: JSON.stringify({\n        'ptr': '1197521-cl1233.tw1.ru',\n        'ip': '1.1.1.1'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/servers/123/ips',\n    // '{\\n  \"ptr\": \"1197521-cl1233.tw1.ru\", \\n  \"ip\": \"1.1.1.1\"\\n}',\n    {\n        'ptr': '1197521-cl1233.tw1.ru',\n        'ip': '1.1.1.1'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'ptr': '1197521-cl1233.tw1.ru',\n    'ip': '1.1.1.1',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ips');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"ptr\\\": \\\"1197521-cl1233.tw1.ru\\\", \\n  \\\"ip\\\": \\\"1.1.1.1\\\"\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"ptr\": \"1197521-cl1233.tw1.ru\", \n  \"ip\": \"1.1.1.1\"\n}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/ips\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/ips\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"ptr\\\": \\\"1197521-cl1233.tw1.ru\\\", \\n  \\\"ip\\\": \\\"1.1.1.1\\\"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ip": {
                                        "type": "string",
                                        "description": "IPv4 или IPv6 IP-адрес",
                                        "example": "1.1.1.1"
                                    },
                                    "ptr": {
                                        "type": "string",
                                        "description": "Ptr запись IP-адреса",
                                        "example": "1197521-cl1233.tw1.ru"
                                    }
                                },
                                "required": [
                                    "ip",
                                    "ptr"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `server_ip`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "server_ip": {
                                                    "$ref": "#/components/schemas/server-ip"
                                                }
                                            },
                                            "required": [
                                                "server_ip"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/logs": {
            "get": {
                "summary": "Получение списка логов сервера",
                "description": "Чтобы получить список логов сервера, отправьте GET запрос на `/api/v1/servers/{server_id}/logs`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "description": "Сортировка элементов по дате",
                        "in": "query",
                        "name": "order",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "asc"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n \"https://api.timeweb.cloud/api/v1/servers/123/logs\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/logs', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/logs', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/servers/123/logs', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/logs');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/logs\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/logs\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `server_logs`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "server_logs": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/server-log"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "server_logs"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/disks": {
            "get": {
                "summary": "Получение списка дисков сервера",
                "description": "Чтобы получить список дисков сервера, отправьте GET запрос на `/api/v1/servers/{server_id}/disks`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n \"https://api.timeweb.cloud/api/v1/servers/123/disks\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/disks', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/servers/123/disks', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/disks\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `server_disks`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "server_disks": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/server-disk"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "server_disks"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "post": {
                "summary": "Создание диска сервера",
                "description": "Чтобы создать диск сервера, отправьте POST запрос на `/api/v1/servers/{server_id}/disks`. Системный диск создать нельзя.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" -d '{ \"size\": 10240 }' \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{ \"size\": 10240 }',\n    body: JSON.stringify({\n        'size': 10240\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/servers/123/disks',\n    // '{ \"size\": 10240 }',\n    {\n        'size': 10240\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'size': 10240,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/servers/123/disks', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"size\": 10240 }');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{ \"size\": 10240 }`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/disks\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{ \\\"size\\\": 10240 }\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "size": {
                                        "type": "number",
                                        "description": "Минимальный размер 5120. Максимальный размер 512000. Шаг 5120",
                                        "example": 10240
                                    }
                                },
                                "required": [
                                    "size"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Успешное создание диска сервера",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "server_disk": {
                                                    "$ref": "#/components/schemas/server-disk"
                                                }
                                            },
                                            "required": [
                                                "server_disk"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/disks/{disk_id}": {
            "get": {
                "summary": "Получение диска сервера",
                "description": "Чтобы получить диск сервера, отправьте GET запрос на `/api/v1/servers/{server_id}/disks/{disk_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks/321\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное получение диска сервера",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "server_disk": {
                                                    "$ref": "#/components/schemas/server-disk"
                                                }
                                            },
                                            "required": [
                                                "server_disk"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "patch": {
                "summary": "Изменение параметров диска сервера",
                "description": "Чтобы изменить параметры диска сервера, отправьте PATCH запрос на `/api/v1/servers/{server_id}/disks/{disk_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" -d '{ \"size\": 10240 }' \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks/321\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{ \"size\": 10240 }',\n    body: JSON.stringify({\n        'size': 10240\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/servers/123/disks/321',\n    // '{ \"size\": 10240 }',\n    {\n        'size': 10240\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'size': 10240,\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/disks/321', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"size\": 10240 }');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{ \"size\": 10240 }`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{ \\\"size\\\": 10240 }\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "size": {
                                        "type": "number",
                                        "description": "Минимальный размер 5120. Максимальный размер 512000. Шаг 5120. Нельзя передавать значение меньше текущего размера диска.",
                                        "example": 10240
                                    }
                                },
                                "required": [
                                    "size"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Успешное изменение параметров диска сервера",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "server_disk": {
                                                    "$ref": "#/components/schemas/server-disk"
                                                }
                                            },
                                            "required": [
                                                "server_disk"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "delete": {
                "summary": "Удаление диска сервера",
                "description": "Чтобы удалить диск сервера, отправьте DELETE запрос на `/api/v1/servers/{server_id}/disks/{disk_id}`. Нельзя удалять системный диск.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks/321\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/servers/123/disks/321', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/servers/123/disks/321', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Успешное удаление диска сервера"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/disks/{disk_id}/auto-backups": {
            "get": {
                "summary": "Получение настроек автобэкапов диска сервера",
                "description": "Чтобы полученить настройки автобэкапов диска сервера, отправьте GET запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/auto-backups`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `auto_backups_settings`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "auto_backups_settings": {
                                                    "$ref": "#/components/schemas/auto-backup"
                                                }
                                            },
                                            "required": [
                                                "auto_backups_settings"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "patch": {
                "summary": "Изменение настроек автобэкапов диска сервера",
                "description": "Чтобы изменить настройки автобэкапов диска сервера, отправьте PATCH запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/auto-backups`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" -d '{ \"copy_count\": 1, \n \"creation_start_at\": \"2024-02-02T00:00:00.000Z\", \n \"is_enabled\": true, \n \"interval\": \"week\"}' \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{ \"copy_count\": 1, \\n \"creation_start_at\": \"2024-02-02T00:00:00.000Z\", \\n \"is_enabled\": true, \\n \"interval\": \"week\"}',\n    body: JSON.stringify({\n        'copy_count': 1,\n        'creation_start_at': '2024-02-02T00:00:00.000Z',\n        'is_enabled': true,\n        'interval': 'week'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups',\n    // '{ \"copy_count\": 1, \\n \"creation_start_at\": \"2024-02-02T00:00:00.000Z\", \\n \"is_enabled\": true, \\n \"interval\": \"week\"}',\n    {\n        'copy_count': 1,\n        'creation_start_at': '2024-02-02T00:00:00.000Z',\n        'is_enabled': true,\n        'interval': 'week'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'copy_count': 1,\n    'creation_start_at': '2024-02-02T00:00:00.000Z',\n    'is_enabled': True,\n    'interval': 'week',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{ \\\"copy_count\\\": 1, \\n \\\"creation_start_at\\\": \\\"2024-02-02T00:00:00.000Z\\\", \\n \\\"is_enabled\\\": true, \\n \\\"interval\\\": \\\"week\\\"}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{ \"copy_count\": 1, \n \"creation_start_at\": \"2024-02-02T00:00:00.000Z\", \n \"is_enabled\": true, \n \"interval\": \"week\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{ \\\"copy_count\\\": 1, \\n \\\"creation_start_at\\\": \\\"2024-02-02T00:00:00.000Z\\\", \\n \\\"is_enabled\\\": true, \\n \\\"interval\\\": \\\"week\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "description": "При значении `is_enabled`: `true`, поля `copy_count`, `creation_start_at`, `interval` являются обязательными",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/auto-backup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `auto_backups_settings`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "auto_backups_settings": {
                                                    "$ref": "#/components/schemas/auto-backup"
                                                }
                                            },
                                            "required": [
                                                "auto_backups_settings"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/disks/{disk_id}/backups": {
            "post": {
                "summary": "Создание бэкапа диска сервера",
                "description": "Чтобы создать бэкап диска сервера, отправьте POST запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/backups`.\n\n Тело ответа будет представлять собой объект JSON с ключом `backup`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n -d '{ \"comment\": \"comment\"}' \\\n \"https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{ \"comment\": \"comment\"}',\n    body: JSON.stringify({\n        'comment': 'comment'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups',\n    // '{ \"comment\": \"comment\"}',\n    {\n        'comment': 'comment'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'comment': 'comment',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"comment\": \"comment\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{ \"comment\": \"comment\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{ \\\"comment\\\": \\\"comment\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "description": "Комментарий к бэкапу.",
                                        "example": "comment"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `backup`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "backup": {
                                                    "$ref": "#/components/schemas/server-backup"
                                                }
                                            }
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "get": {
                "summary": "Получение списка бэкапов диска сервера",
                "description": "Чтобы получить бэкапов диска сервера, отправьте GET запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/backups`.\n\n Тело ответа будет представлять собой объект JSON с ключом `backups`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `backups`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "backups": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/server-backup"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "backups",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}": {
            "patch": {
                "summary": "Изменение бэкапа диска сервера",
                "description": "Чтобы изменить бэкап диска сервера, отправьте PATCH запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    },
                    {
                        "$ref": "#/components/parameters/server-backup-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" -d '{ \"comment\": \"comment\"}' \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{ \"comment\": \"comment\"}',\n    body: JSON.stringify({\n        'comment': 'comment'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123',\n    // '{ \"comment\": \"comment\"}',\n    {\n        'comment': 'comment'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'comment': 'comment',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"comment\": \"comment\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{ \"comment\": \"comment\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{ \\\"comment\\\": \\\"comment\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "description": "Комментарий к бэкапу.",
                                        "example": "comment"
                                    }
                                },
                                "required": [
                                    "comment"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `backup`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "backup": {
                                                    "$ref": "#/components/schemas/server-backup"
                                                }
                                            },
                                            "required": [
                                                "backup"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "delete": {
                "summary": "Удаление бэкапа диска сервера",
                "description": "Чтобы удалить бэкап диска сервера, отправьте DELETE запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    },
                    {
                        "$ref": "#/components/parameters/server-backup-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Успешное удаление бэкапа."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            },
            "get": {
                "summary": "Получение бэкапа диска сервера",
                "description": "Чтобы получить бэкап диска сервера, отправьте GET запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}`.\n\n Тело ответа будет представлять собой объект JSON с ключом `backup`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    },
                    {
                        "$ref": "#/components/parameters/server-backup-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `backup`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "backup": {
                                                    "$ref": "#/components/schemas/server-backup"
                                                }
                                            },
                                            "required": [
                                                "backup"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}/action": {
            "post": {
                "summary": "Выполнение действия над бэкапом диска сервера",
                "description": "Чтобы выполнить действие над бэкапом диска сервера, отправьте POST запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}/action`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/disk-id"
                    },
                    {
                        "$ref": "#/components/parameters/server-backup-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" -d '{ \"action\": \"mount\"}' \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{ \"action\": \"mount\"}',\n    body: JSON.stringify({\n        'action': 'mount'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action',\n    // '{ \"action\": \"mount\"}',\n    {\n        'action': 'mount'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'action': 'mount',\n}\n\nresponse = requests.post(\n    'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action',\n    headers=headers,\n    json=json_data,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"action\": \"mount\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{ \"action\": \"mount\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{ \\\"action\\\": \\\"mount\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "action": {
                                        "type": "string",
                                        "description": "Действие над бэкапом.",
                                        "enum": [
                                            "restore",
                                            "mount",
                                            "unmount"
                                        ],
                                        "example": "mount"
                                    }
                                },
                                "required": [
                                    "action"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Успешное выполнение действия"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Облачные серверы"
                ]
            }
        },
        "/api/v1/projects": {
            "get": {
                "summary": "Получение списка проектов",
                "description": "Чтобы получить список всех проектов на вашем аккаунте, отправьте GET запрос на `/api/v1/dedicated-servers`.\n\n Тело ответа будет представлять собой объект JSON с ключом `projects`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `projects`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "projects": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/project"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "projects",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            },
            "post": {
                "summary": "Создание проекта",
                "description": "Чтобы создать проект, отправьте POST запрос в `api/v1/projects`, задав необходимые атрибуты.\n\nПроект будет создан с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданном проекте.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/create-project"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"name\":\"Project\"}' \\\n  \"https://api.timeweb.cloud/api/v1/projects\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'name': 'Project'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/projects',\n    {\n        'name': 'Project'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'name': 'Project',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/projects', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"name\":\"Project\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"name\":\"Project\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/projects\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"name\\\":\\\"Project\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `project`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "project": {
                                                    "$ref": "#/components/schemas/project"
                                                }
                                            },
                                            "required": [
                                                "project"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/{project_id}": {
            "get": {
                "summary": "Получение проекта по идентификатору",
                "description": "Чтобы получить проект по идентификатору, отправьте GET запрос на `/api/v1/projects/{project_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/99\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/99', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `project`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "project": {
                                                    "$ref": "#/components/schemas/project"
                                                }
                                            },
                                            "required": [
                                                "project"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            },
            "delete": {
                "summary": "Удаление проекта",
                "description": "Чтобы удалить проект, отправьте запрос DELETE в `api/v1/projects/{project_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/99\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/projects/99', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/projects/99', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/projects/99\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Проект успешно удален"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            },
            "put": {
                "summary": "Изменение проекта",
                "description": "Чтобы изменить проект, отправьте запрос PUT в `api/v1/projects/{project_id}`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-project"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"name\":\"Project\"}' \\\n  \"https://api.timeweb.cloud/api/v1/projects/99\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99', {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'name': 'Project'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.put(\n    'https://api.timeweb.cloud/api/v1/projects/99',\n    {\n        'name': 'Project'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'name': 'Project',\n}\n\nresponse = requests.put('https://api.timeweb.cloud/api/v1/projects/99', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"name\":\"Project\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"name\":\"Project\"}`)\n\treq, err := http.NewRequest(\"PUT\", \"https://api.timeweb.cloud/api/v1/projects/99\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PUT\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"name\\\":\\\"Project\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `project`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "project": {
                                                    "$ref": "#/components/schemas/project"
                                                }
                                            },
                                            "required": [
                                                "project"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/{project_id}/resources/balancers": {
            "get": {
                "summary": "Получение списка балансировщиков проекта",
                "description": "Чтобы получить список балансировщиков проекта, отправьте GET запрос на `/api/v1/projects/{project_id}/resources/balancers`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/balancers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/balancers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/balancers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/balancers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `balancers`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "balancers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/balancer"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "balancers",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            },
            "post": {
                "summary": "Добавление балансировщика в проект",
                "description": "Чтобы добавить балансировщик в проект, отправьте POST запрос на `/api/v1/projects/{project_id}/resources/balancers`, задав необходимые атрибуты.\n\nБалансировщик будет добавлен в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленном балансировщике.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "resource_id": {
                                        "type": "number",
                                        "description": "Идентификатор добавляемого балансировщика.",
                                        "example": 1
                                    }
                                },
                                "required": [
                                    "resource_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"resource_id\":1}' \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/balancers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'resource_id': 1\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/projects/99/resources/balancers',\n    {\n        'resource_id': 1\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'resource_id': 1,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/balancers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"resource_id\":1}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/balancers\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/balancers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `resource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "resource": {
                                                    "$ref": "#/components/schemas/project-resource"
                                                }
                                            },
                                            "required": [
                                                "resource"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/{project_id}/resources/buckets": {
            "get": {
                "summary": "Получение списка хранилищ проекта",
                "description": "Чтобы получить список хранилищ проекта, отправьте GET запрос на `/api/v1/projects/{project_id}/resources/buckets`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/buckets\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/buckets');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/buckets\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/buckets\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `buckets`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "buckets": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/bucket"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "buckets",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            },
            "post": {
                "summary": "Добавление хранилища в проект",
                "description": "Чтобы добавить хранилище в проект, отправьте POST запрос на `/api/v1/projects/{project_id}/resources/buckets`, задав необходимые атрибуты.\n\nХранилище будет добавлено в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленном хранилище.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "resource_id": {
                                        "type": "number",
                                        "description": "Идентификатор добавляемого хранилища.",
                                        "example": 1
                                    }
                                },
                                "required": [
                                    "resource_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"resource_id\":1}' \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/buckets\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'resource_id': 1\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/projects/99/resources/buckets',\n    {\n        'resource_id': 1\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'resource_id': 1,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/buckets');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"resource_id\":1}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/buckets\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/buckets\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `resource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "resource": {
                                                    "$ref": "#/components/schemas/project-resource"
                                                }
                                            },
                                            "required": [
                                                "resource"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/{project_id}/resources/clusters": {
            "get": {
                "summary": "Получение списка кластеров проекта",
                "description": "Чтобы получить список кластеров проекта, отправьте GET запрос на `/api/v1/projects/{project_id}/resources/clusters`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/clusters\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/clusters');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/clusters\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/clusters\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `clusters`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "clusters": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/clusterk8s"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "clusters",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            },
            "post": {
                "summary": "Добавление кластера в проект",
                "description": "Чтобы добавить кластер в проект, отправьте POST запрос на `/api/v1/projects/{project_id}/resources/clusters`, задав необходимые атрибуты.\n\nКластер будет добавлен в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленном кластере.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "resource_id": {
                                        "type": "number",
                                        "description": "Идентификатор добавляемого кластера.",
                                        "example": 1
                                    }
                                },
                                "required": [
                                    "resource_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"resource_id\":1}' \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/clusters\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'resource_id': 1\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/projects/99/resources/clusters',\n    {\n        'resource_id': 1\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'resource_id': 1,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/clusters');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"resource_id\":1}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/clusters\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/clusters\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `resource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "resource": {
                                                    "$ref": "#/components/schemas/project-resource"
                                                }
                                            },
                                            "required": [
                                                "resource"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/{project_id}/resources/servers": {
            "get": {
                "summary": "Получение списка серверов проекта",
                "description": "Чтобы получить список серверов проекта, отправьте GET запрос на `/api/v1/projects/{project_id}/resources/servers`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/servers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `servers`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "servers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/vds"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "servers"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            },
            "post": {
                "summary": "Добавление сервера в проект",
                "description": "Чтобы добавить сервер в проект, отправьте POST запрос на `/api/v1/projects/{project_id}/resources/servers`, задав необходимые атрибуты.\n\nСервер будет добавлен в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленном сервере.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "resource_id": {
                                        "type": "number",
                                        "description": "Идентификатор добавляемого сервера.",
                                        "example": 1
                                    }
                                },
                                "required": [
                                    "resource_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"resource_id\":1}' \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'resource_id': 1\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/projects/99/resources/servers',\n    {\n        'resource_id': 1\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'resource_id': 1,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"resource_id\":1}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/servers\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `resource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "resource": {
                                                    "$ref": "#/components/schemas/project-resource"
                                                }
                                            },
                                            "required": [
                                                "resource"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/{project_id}/resources/databases": {
            "get": {
                "summary": "Получение списка баз данных проекта",
                "description": "Чтобы получить список баз данных проекта, отправьте GET запрос на `/api/v1/projects/{project_id}/resources/databases`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/databases');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `databases`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "databases": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/db"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "databases",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            },
            "post": {
                "summary": "Добавление базы данных в проект",
                "description": "Чтобы добавить базу данных в проект, отправьте POST запрос на `/api/v1/projects/{project_id}/resources/databases`, задав необходимые атрибуты.\n\nБаза данных будет добавлена в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленной базе данных.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "resource_id": {
                                        "type": "number",
                                        "description": "Идентификатор добавляемой базы данных.",
                                        "example": 1
                                    }
                                },
                                "required": [
                                    "resource_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"resource_id\":1}' \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'resource_id': 1\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/projects/99/resources/databases',\n    {\n        'resource_id': 1\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'resource_id': 1,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/databases');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"resource_id\":1}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `resource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "resource": {
                                                    "$ref": "#/components/schemas/project-resource"
                                                }
                                            },
                                            "required": [
                                                "resource"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/{project_id}/resources/dedicated": {
            "get": {
                "summary": "Получение списка выделенных серверов проекта",
                "description": "Чтобы получить список выделенных серверов проекта, отправьте GET запрос на `/api/v1/projects/{project_id}/resources/dedicated`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `dedicated_servers`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "dedicated_servers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/dedicated-server"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "dedicated_servers",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            },
            "post": {
                "summary": "Добавление выделенного сервера в проект",
                "description": "Чтобы добавить выделенный сервер в проект, отправьте POST запрос на `/api/v1/projects/{project_id}/resources/dedicated`, задав необходимые атрибуты.\n\nВыделенный сервер будет добавлен в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленном выделенном сервере.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "resource_id": {
                                        "type": "number",
                                        "description": "Идентификатор добавляемого выделенного сервера.",
                                        "example": 1
                                    }
                                },
                                "required": [
                                    "resource_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"resource_id\":1}' \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'resource_id': 1\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/projects/99/resources/databases',\n    {\n        'resource_id': 1\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'resource_id': 1,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/databases');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"resource_id\":1}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `resource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "resource": {
                                                    "$ref": "#/components/schemas/project-resource"
                                                }
                                            },
                                            "required": [
                                                "resource"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/{project_id}/resources": {
            "get": {
                "summary": "Получение всех ресурсов проекта",
                "description": "Чтобы получить все ресурсы проекта, отправьте GET запрос на `/api/v1/projects/{project_id}/resources`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключами: `servers`, `balancers`, `buckets`, `clusters`, `databases`, `dedicated_servers`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "servers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/vds"
                                                    }
                                                },
                                                "balancers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/balancer"
                                                    }
                                                },
                                                "buckets": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/bucket"
                                                    }
                                                },
                                                "clusters": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/clusterk8s"
                                                    }
                                                },
                                                "databases": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/db"
                                                    }
                                                },
                                                "dedicated_servers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/dedicated-server"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "servers",
                                                "balancers",
                                                "buckets",
                                                "clusters",
                                                "databases",
                                                "dedicated_servers",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/resources/balancers": {
            "get": {
                "summary": "Получение списка всех балансировщиков на аккаунте",
                "description": "Чтобы получить список всех балансировщиков на аккаунте, отправьте GET запрос на `/api/v1/projects/resources/balancers`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/resources/balancers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/resources/balancers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/balancers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/balancers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/balancers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/balancers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/balancers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `balancers`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "balancers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/balancer"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "balancers",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/resources/servers": {
            "get": {
                "summary": "Получение списка всех серверов на аккаунте",
                "description": "Чтобы получить список всех серверов на аккаунте, отправьте GET запрос на `/api/v1/projects/resources/servers`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/resources/servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/resources/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/servers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/servers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `servers`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "servers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/vds"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "servers"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/resources/buckets": {
            "get": {
                "summary": "Получение списка всех хранилищ на аккаунте",
                "description": "Чтобы получить список всех хранилищ на аккаунте, отправьте GET запрос на `/api/v1/projects/resources/buckets`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/resources/buckets\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/resources/buckets', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/buckets', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/buckets', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/buckets');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/buckets\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/buckets\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `buckets`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "buckets": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/bucket"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "buckets",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/resources/clusters": {
            "get": {
                "summary": "Получение списка всех кластеров на аккаунте",
                "description": "Чтобы получить список всех кластеров на аккаунте, отправьте GET запрос на `/api/v1/projects/resources/clusters`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/resources/clusters\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/resources/clusters', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/clusters', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/clusters', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/clusters');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/clusters\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/clusters\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `clusters`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "clusters": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/clusterk8s"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "clusters",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/resources/databases": {
            "get": {
                "summary": "Получение списка всех баз данных на аккаунте",
                "description": "Чтобы получить список всех баз данных на аккаунте, отправьте GET запрос на `/api/v1/projects/resources/databases`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/resources/databases\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/resources/databases', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/databases', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/databases', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/databases');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/databases\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/databases\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `databases`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "databases": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/db"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "databases",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/resources/dedicated": {
            "get": {
                "summary": "Получение списка всех выделенных серверов на аккаунте",
                "description": "Чтобы получить список всех выделенных серверов на аккаунте, отправьте GET запрос на `/api/v1/projects/resources/dedicated`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/projects/resources/dedicated\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/resources/dedicated', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/dedicated', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/dedicated', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/dedicated');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/dedicated\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/dedicated\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `dedicated_servers`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "dedicated_servers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/dedicated-server"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "dedicated_servers",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/projects/{project_id}/resources/transfer": {
            "put": {
                "summary": "Перенести ресурс в другой проект",
                "description": "Чтобы перенести ресурс в другой проект, отправьте запрос PUT в `api/v1/projects/{project_id}/resources/transfer`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/project-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/resource-transfer"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"to_project\":1,\"resource_id\":1,\"resource_type\":\"server\"}' \\\n  \"https://api.timeweb.cloud/api/v1/projects/99/resources/transfer\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/transfer', {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'to_project': 1,\n        'resource_id': 1,\n        'resource_type': 'server'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.put(\n    'https://api.timeweb.cloud/api/v1/projects/99/resources/transfer',\n    {\n        'to_project': 1,\n        'resource_id': 1,\n        'resource_type': 'server'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'to_project': 1,\n    'resource_id': 1,\n    'resource_type': 'server',\n}\n\nresponse = requests.put('https://api.timeweb.cloud/api/v1/projects/99/resources/transfer', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/transfer');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"to_project\":1,\"resource_id\":1,\"resource_type\":\"server\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"to_project\":1,\"resource_id\":1,\"resource_type\":\"server\"}`)\n\treq, err := http.NewRequest(\"PUT\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/transfer\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/transfer\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PUT\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"to_project\\\":1,\\\"resource_id\\\":1,\\\"resource_type\\\":\\\"server\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `resource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "resource": {
                                                    "$ref": "#/components/schemas/project-resource"
                                                }
                                            },
                                            "required": [
                                                "resource"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Проекты"
                ]
            }
        },
        "/api/v1/storages/buckets": {
            "get": {
                "summary": "Получение списка хранилищ аккаунта",
                "description": "Чтобы получить список хранилищ аккаунта, отправьте GET запрос на `/api/v1/storages/buckets`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/storages/buckets', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/storages/buckets', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/storages/buckets\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `buckets`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "buckets": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/bucket"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "buckets",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            },
            "post": {
                "summary": "Создание хранилища",
                "description": "Чтобы создать хранилище, отправьте POST запрос на `/api/v1/storages/buckets`.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Название хранилища.",
                                        "minLength": 1,
                                        "maxLength": 255,
                                        "example": "test"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "Тип хранилища.",
                                        "enum": [
                                            "private",
                                            "public"
                                        ],
                                        "example": "private"
                                    },
                                    "preset_id": {
                                        "type": "number",
                                        "description": "Идентификатор тарифа.",
                                        "example": 1
                                    }
                                },
                                "required": [
                                    "name",
                                    "type",
                                    "preset_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"name\":\"test\",\"type\":\"private\",\"preset_id\":1}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'name': 'test',\n        'type': 'private',\n        'preset_id': 1\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/storages/buckets',\n    {\n        'name': 'test',\n        'type': 'private',\n        'preset_id': 1\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'name': 'test',\n    'type': 'private',\n    'preset_id': 1,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/storages/buckets', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"name\":\"test\",\"type\":\"private\",\"preset_id\":1}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"name\":\"test\",\"type\":\"private\",\"preset_id\":1}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"name\\\":\\\"test\\\",\\\"type\\\":\\\"private\\\",\\\"preset_id\\\":1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `bucket`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "bucket": {
                                                    "$ref": "#/components/schemas/bucket"
                                                }
                                            },
                                            "required": [
                                                "bucket"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/buckets/{bucket_id}": {
            "delete": {
                "summary": "Удаление хранилища на аккаунте",
                "description": "Чтобы удалить хранилище, отправьте DELETE запрос на `/api/v1/storages/buckets/{bucket_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `bucket_delete`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "bucket_delete": {
                                                    "$ref": "#/components/schemas/delete-service-response"
                                                }
                                            },
                                            "required": [
                                                "bucket_delete"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Хранилище успешно удалено"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            },
            "patch": {
                "summary": "Изменение хранилища на аккаунте",
                "description": "Чтобы изменить хранилище, отправьте PATCH запрос на `/api/v1/storages/buckets/{bucket_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "preset_id": {
                                        "type": "number",
                                        "description": "Идентификатор тарифа.",
                                        "example": 1
                                    },
                                    "bucket_type": {
                                        "type": "string",
                                        "description": "Тип хранилища.",
                                        "enum": [
                                            "private",
                                            "public"
                                        ],
                                        "example": "public"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"preset_id\":1}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'preset_id': 1\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/storages/buckets',\n    {\n        'preset_id': 1\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'preset_id': 1,\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/storages/buckets', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"preset_id\":1}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"preset_id\":1}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/storages/buckets\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"preset_id\\\":1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `bucket`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "bucket": {
                                                    "$ref": "#/components/schemas/bucket"
                                                }
                                            },
                                            "required": [
                                                "bucket"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/presets/storages": {
            "get": {
                "summary": "Получение списка тарифов для хранилищ",
                "description": "Чтобы получить список тарифов для хранилищ, отправьте GET запрос на `/api/v1/presets/storages`.\n\n Тело ответа будет представлять собой объект JSON с ключом `storages_presets`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/presets/storages\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/presets/storages', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/presets/storages', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/presets/storages', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/storages');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/storages\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/storages\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON с ключом `storages_presets`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "storages_presets": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/presets-storage"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "storages_presets",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/users": {
            "get": {
                "summary": "Получение списка пользователей хранилищ аккаунта",
                "description": "Чтобы получить список пользователей хранилищ аккаунта, отправьте GET запрос на `/api/v1/storages/users`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/storages/users\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/users', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/storages/users', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/storages/users', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/users');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/storages/users\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/users\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `users`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "users": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/bucket-user"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "users",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/users/{user_id}": {
            "patch": {
                "summary": "Изменение пароля пользователя-администратора хранилища",
                "description": "Чтобы изменить пароль пользователя-администратора хранилища, отправьте POST запрос на `/api/v1/storages/users/{user_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/user-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "secret_key": {
                                        "type": "string",
                                        "description": "Новый пароль пользователя-администратора хранилища.",
                                        "minLength": 1,
                                        "maxLength": 255,
                                        "example": "password"
                                    }
                                },
                                "required": [
                                    "secret_key"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"secret_key\":\"password\"}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/users/1\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/users/1', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'secret_key': 'password'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/storages/users/1',\n    {\n        'secret_key': 'password'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'secret_key': 'password',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/storages/users/1', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/users/1');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"secret_key\":\"password\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"secret_key\":\"password\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/users/1\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/users/1\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"secret_key\\\":\\\"password\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `user`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "user": {
                                                    "$ref": "#/components/schemas/bucket-user"
                                                }
                                            },
                                            "required": [
                                                "user"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/buckets/{bucket_id}/transfer-status": {
            "get": {
                "summary": "Получение статуса переноса хранилища от стороннего S3 в Timeweb Cloud",
                "description": "Чтобы получить статус переноса хранилища от стороннего S3 в Timeweb Cloud, отправьте GET запрос на `/api/v1/storages/buckets/{bucket_id}/transfer-status`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `transfer_status`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "transfer_status": {
                                                    "$ref": "#/components/schemas/transfer-status"
                                                }
                                            },
                                            "required": [
                                                "transfer_status"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/transfer": {
            "post": {
                "summary": "Перенос хранилища от стороннего провайдера S3 в Timeweb Cloud",
                "description": "Чтобы перенести хранилище от стороннего провайдера S3 в Timeweb Cloud, отправьте POST запрос на `/api/v1/storages/transfer`.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "access_key": {
                                        "type": "string",
                                        "description": "Идентификатор доступа стороннего s3 хранилища.",
                                        "example": "access_key"
                                    },
                                    "secret_key": {
                                        "type": "string",
                                        "description": "Пароль доступа стороннего s3 хранилища.",
                                        "example": "secret_key"
                                    },
                                    "location": {
                                        "type": "string",
                                        "description": "Регион хранилища источника.",
                                        "example": "ru-1"
                                    },
                                    "is_force_path_style": {
                                        "type": "boolean",
                                        "description": "Это логическое значение, которое показывает, следует ли принудительно указывать URL-адреса для объектов S3.",
                                        "example": true
                                    },
                                    "endpoint": {
                                        "type": "string",
                                        "description": "URL s3 хранилища источника.",
                                        "example": "https://s3.test.ru"
                                    },
                                    "bucket_name": {
                                        "type": "string",
                                        "description": "Имя хранилища источника.",
                                        "example": "bucket_name"
                                    },
                                    "new_bucket_name": {
                                        "type": "string",
                                        "description": "Имя хранилища получателя.",
                                        "example": "new_bucket_name"
                                    }
                                },
                                "required": [
                                    "access_key",
                                    "secret_key",
                                    "location",
                                    "is_force_path_style",
                                    "endpoint",
                                    "bucket_name",
                                    "new_bucket_name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"access_key\":\"access_key\",\"secret_key\":\"secret_key\",\"location\":\"ru-1\",\"path_style\":true,\"endpoint\":\"https://s3.test.ru\",\"bucket_name\":\"bucket_name\",\"new_bucket_name\":\"new_bucket_name\"}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/transfer\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/transfer', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'access_key': 'access_key',\n        'secret_key': 'secret_key',\n        'location': 'ru-1',\n        'path_style': true,\n        'endpoint': 'https://s3.test.ru',\n        'bucket_name': 'bucket_name',\n        'new_bucket_name': 'new_bucket_name'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/storages/transfer',\n    {\n        'access_key': 'access_key',\n        'secret_key': 'secret_key',\n        'location': 'ru-1',\n        'path_style': true,\n        'endpoint': 'https://s3.test.ru',\n        'bucket_name': 'bucket_name',\n        'new_bucket_name': 'new_bucket_name'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'access_key': 'access_key',\n    'secret_key': 'secret_key',\n    'location': 'ru-1',\n    'path_style': True,\n    'endpoint': 'https://s3.test.ru',\n    'bucket_name': 'bucket_name',\n    'new_bucket_name': 'new_bucket_name',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/storages/transfer', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/transfer');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"access_key\":\"access_key\",\"secret_key\":\"secret_key\",\"location\":\"ru-1\",\"path_style\":true,\"endpoint\":\"https://s3.test.ru\",\"bucket_name\":\"bucket_name\",\"new_bucket_name\":\"new_bucket_name\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"access_key\":\"access_key\",\"secret_key\":\"secret_key\",\"location\":\"ru-1\",\"path_style\":true,\"endpoint\":\"https://s3.test.ru\",\"bucket_name\":\"bucket_name\",\"new_bucket_name\":\"new_bucket_name\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/transfer\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/transfer\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"access_key\\\":\\\"access_key\\\",\\\"secret_key\\\":\\\"secret_key\\\",\\\"location\\\":\\\"ru-1\\\",\\\"path_style\\\":true,\\\"endpoint\\\":\\\"https://s3.test.ru\\\",\\\"bucket_name\\\":\\\"bucket_name\\\",\\\"new_bucket_name\\\":\\\"new_bucket_name\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Задание на перенос отправлено"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/buckets/{bucket_id}/subdomains": {
            "get": {
                "summary": "Получение списка поддоменов хранилища",
                "description": "Чтобы получить список поддоменов хранилища, отправьте GET запрос на `/api/v1/storages/buckets/{bucket_id}/subdomains`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `subdomains`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "subdomains": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/s3-subdomain"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "subdomains",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            },
            "post": {
                "summary": "Добавление поддоменов для хранилища",
                "description": "Добавить поддомены для хранилища, отправьте POST запрос на `/api/v1/storages/buckets/{bucket_id}/subdomains`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "subdomains": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "test.example.com"
                                        }
                                    }
                                },
                                "required": [
                                    "subdomains"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"subdomains\":[\"test.example.com\"]}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'subdomains': [\n            'test.example.com'\n        ]\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains',\n    {\n        'subdomains': [\n            'test.example.com'\n        ]\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'subdomains': [\n        'test.example.com',\n    ],\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"subdomains\":[\"test.example.com\"]}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"subdomains\":[\"test.example.com\"]}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"subdomains\\\":[\\\"test.example.com\\\"]}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `subdomains`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "subdomains": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/added-subdomain"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "subdomains",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            },
            "delete": {
                "summary": "Удаление поддоменов хранилища",
                "description": "Чтобы удалить поддомены хранилища, отправьте DELETE запрос на `/api/v1/storages/buckets/{bucket_id}/subdomains`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"subdomains\":[\"test.example.com\"]}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'subdomains': [\n            'test.example.com'\n        ]\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    data: {\n        'subdomains': [\n            'test.example.com'\n        ]\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'subdomains': [\n        'test.example.com',\n    ],\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"subdomains\":[\"test.example.com\"]}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"subdomains\":[\"test.example.com\"]}`)\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"subdomains\\\":[\\\"test.example.com\\\"]}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "subdomains": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "test.example.com"
                                        }
                                    }
                                },
                                "required": [
                                    "subdomains"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `subdomains`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "subdomains": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/added-subdomain"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "subdomains",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/buckets/{bucket_id}/object-manager/list": {
            "get": {
                "summary": "Получение списка файлов в хранилище по префиксу",
                "description": "Чтобы получить список файлов в хранилище по префиксу, отправьте GET запрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/list`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    },
                    {
                        "$ref": "#/components/parameters/prefix"
                    },
                    {
                        "$ref": "#/components/parameters/multipart"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `files`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "files": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/s3-object"
                                                    }
                                                },
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                }
                                            },
                                            "required": [
                                                "files",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/buckets/{bucket_id}/object-manager/rename": {
            "post": {
                "summary": "Переименование файла/директории в хранилище",
                "description": "Чтобы переименовать файл/директорию в хранилище, отправьте POST запрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/rename`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "new_filename": {
                                        "type": "string",
                                        "description": "Новое название файла или папки. Названия папок должны быть указаны с \"/\" в конце, например: \"dirname/\".",
                                        "example": "new_filename"
                                    },
                                    "old_filename": {
                                        "type": "string",
                                        "description": "Старое название файла или папки. Названия папок должны быть указаны с \"/\" в конце, например: \"dirname/\".",
                                        "example": "old_filename"
                                    }
                                },
                                "required": [
                                    "new_filename",
                                    "old_filename"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"new_filename\":\"new_name\",\"old_filename\":\"old_name\"}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'new_filename': 'new_name',\n        'old_filename': 'old_name'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename',\n    {\n        'new_filename': 'new_name',\n        'old_filename': 'old_name'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'new_filename': 'new_name',\n    'old_filename': 'old_name',\n}\n\nresponse = requests.post(\n    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename',\n    headers=headers,\n    json=json_data,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"new_filename\":\"new_name\",\"old_filename\":\"old_name\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"new_filename\":\"new_name\",\"old_filename\":\"old_name\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"new_filename\\\":\\\"new_name\\\",\\\"old_filename\\\":\\\"old_name\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Файл успешно переименован"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/buckets/{bucket_id}/object-manager/remove": {
            "delete": {
                "summary": "Удаление файла/директории в хранилище",
                "description": "Чтобы удалить файл или директорию с вложениями, отправьте DELETE запрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/remove`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    },
                    {
                        "$ref": "#/components/parameters/multipart"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "source": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "test1/test2"
                                        }
                                    }
                                },
                                "required": [
                                    "source"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"source\":[\"test1/test2\"]}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'source': [\n            'test1/test2'\n        ]\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    data: {\n        'source': [\n            'test1/test2'\n        ]\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'source': [\n        'test1/test2',\n    ],\n}\n\nresponse = requests.delete(\n    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove',\n    headers=headers,\n    json=json_data,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"source\":[\"test1/test2\"]}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"source\":[\"test1/test2\"]}`)\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"source\\\":[\\\"test1/test2\\\"]}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Задание на удаление отправлено"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/buckets/{bucket_id}/object-manager/copy": {
            "post": {
                "summary": "Копирование файла/директории в хранилище",
                "description": "Чтобы скопировать файла или директорию с вложениями, отправьте POST запрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/copy`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "destination": {
                                        "type": "string",
                                        "description": "Новый путь до файлов.",
                                        "example": "new_path"
                                    },
                                    "source": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "description": "Путь до файла или папки, содержимое которой нужно скопировать. Название папки должно быть указано с \"/\" в конце, например: \"dirname/\".",
                                            "example": "test1/test2"
                                        }
                                    }
                                },
                                "required": [
                                    "destination",
                                    "source"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"destination\":\"new_path\",\"source\":[\"test1/test2\"]}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'destination': 'new_path',\n        'source': [\n            'test1/test2'\n        ]\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy',\n    {\n        'destination': 'new_path',\n        'source': [\n            'test1/test2'\n        ]\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'destination': 'new_path',\n    'source': [\n        'test1/test2',\n    ],\n}\n\nresponse = requests.post(\n    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy',\n    headers=headers,\n    json=json_data,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"destination\":\"new_path\",\"source\":[\"test1/test2\"]}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"destination\":\"new_path\",\"source\":[\"test1/test2\"]}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"destination\\\":\\\"new_path\\\",\\\"source\\\":[\\\"test1/test2\\\"]}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Задание на копирование отправлено"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/buckets/{bucket_id}/object-manager/upload": {
            "post": {
                "summary": "Загрузка файлов в хранилище",
                "description": "Чтобы загрузить файлы в хранилище, отправьте POST запрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/upload`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    },
                    {
                        "$ref": "#/components/parameters/path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "files": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "required": [
                                    "files"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: multipart/form-data\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -F \"files=@path/to/local/file.jpg\" \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "const form = new FormData();\nform.append('files', File(['<data goes here>'], 'path/to/local/file.jpg'));\n\nfetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'multipart/form-data',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: form\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\nconst FormData = require('form-data');\nconst fs = require('fs');\n\nconst form = new FormData();\nform.append('files', fs.readFileSync('path/to/local/file.jpg'), 'path/to/local/file.jpg');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload',\n    form,\n    {\n        headers: {\n            ...form.getHeaders(),\n            'Content-Type': 'multipart/form-data',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # requests won't add a boundary if this header is set when you pass files=\n    # 'Content-Type': 'multipart/form-data',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nfiles = {\n    'files': open('path/to/local/file.jpg', 'rb'),\n}\n\nresponse = requests.post(\n    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload',\n    headers=headers,\n    files=files,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'multipart/form-data',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, [\n    'files' => new CURLFile('path/to/local/file.jpg'),\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"multipart/form-data\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"multipart/form-data\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Файл успешно загружен"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/buckets/{bucket_id}/object-manager/mkdir": {
            "post": {
                "summary": "Создание директории в хранилище",
                "description": "Чтобы создать директорию в хранилище, отправьте POST запрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/mkdir`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bucket-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "dir_name": {
                                        "type": "string",
                                        "description": "Название директории.",
                                        "example": "dir"
                                    }
                                },
                                "required": [
                                    "dir_name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"dir_name\":\"dir\"}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'dir_name': 'dir'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir',\n    {\n        'dir_name': 'dir'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'dir_name': 'dir',\n}\n\nresponse = requests.post(\n    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir',\n    headers=headers,\n    json=json_data,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"dir_name\":\"dir\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"dir_name\":\"dir\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"dir_name\\\":\\\"dir\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Директория успешно создана"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {},
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/storages/certificates/generate": {
            "post": {
                "summary": "Добавление сертификата для поддомена хранилища",
                "description": "Чтобы добавить сертификат для поддомена хранилища, отправьте POST запрос на `/api/v1/storages/certificates/generate`.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "subdomain": {
                                        "type": "string",
                                        "example": "test.example.com"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"subdomain\":\"test.example.com\"}' \\\n  \"https://api.timeweb.cloud/api/v1/storages/certificates/generate\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/storages/certificates/generate', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'subdomain': 'test.example.com'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/storages/certificates/generate',\n    {\n        'subdomain': 'test.example.com'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'subdomain': 'test.example.com',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/storages/certificates/generate', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/certificates/generate');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"subdomain\":\"test.example.com\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"subdomain\":\"test.example.com\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/certificates/generate\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/certificates/generate\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"subdomain\\\":\\\"test.example.com\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Сертификат добавлен"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "S3-хранилище"
                ]
            }
        },
        "/api/v1/auth/api-keys": {
            "get": {
                "summary": "Получение списка выпущенных токенов",
                "description": "Чтобы получить список выпущенных токенов, отправьте GET запрос на `/api/v1/auth/api-keys`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/auth/api-keys\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/auth/api-keys', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/auth/api-keys', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/auth/api-keys', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/api-keys');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/auth/api-keys\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/api-keys\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `api_keys`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "api_keys": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/api-key"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "api_keys"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Токены API"
                ]
            },
            "post": {
                "summary": "Создание токена",
                "description": "Чтобы создать токен, отправьте POST запрос на `/api/v1/auth/api-keys` задав необходимые атрибуты.\n\nТокен будет создан с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданном токене.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"name\":\"example\",\"expire\":\"2023-12-20T12:03:53.755Z\"}' \\\n  \"https://api.timeweb.cloud/api/v1/auth/api-keys\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/auth/api-keys', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'name': 'example',\n        'expire': '2023-12-20T12:03:53.755Z'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/auth/api-keys',\n    {\n        'name': 'example',\n        'expire': '2023-12-20T12:03:53.755Z'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'name': 'example',\n    'expire': '2023-12-20T12:03:53.755Z',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/auth/api-keys', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/api-keys');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"name\":\"example\",\"expire\":\"2023-12-20T12:03:53.755Z\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"name\":\"example\",\"expire\":\"2023-12-20T12:03:53.755Z\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/auth/api-keys\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/api-keys\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"name\\\":\\\"example\\\",\\\"expire\\\":\\\"2023-12-20T12:03:53.755Z\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/create-api-key"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `api_key`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "api_key": {
                                                    "$ref": "#/components/schemas/created-api-key"
                                                }
                                            },
                                            "required": [
                                                "api_key"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Токены API"
                ]
            }
        },
        "/api/v1/auth/api-keys/{token_id}": {
            "patch": {
                "summary": "Переименовать токен",
                "description": "Чтобы переименовать токен, отправьте PATCH запрос на `/api/v1/auth/api-keys/{token_id}` задав необходимые атрибуты.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api-key-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"name\":\"example\"}' \\\n  \"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'name': 'example'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',\n    {\n        'name': 'example'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'name': 'example',\n}\n\nresponse = requests.patch(\n    'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',\n    headers=headers,\n    json=json_data,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"name\":\"example\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"name\":\"example\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"name\\\":\\\"example\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/rename-api-key"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `api_key`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "api_key": {
                                                    "$ref": "#/components/schemas/api-key"
                                                }
                                            },
                                            "required": [
                                                "api_key"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Токены API"
                ]
            },
            "put": {
                "summary": "Перевыпустить токен",
                "description": "Чтобы перевыпустить токен, отправьте PUT запрос на `/api/v1/auth/api-keys/{token_id}` задав необходимые атрибуты.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api-key-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b', {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.put(\n    'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.put(\n    'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',\n    headers=headers,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"PUT\", \"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PUT\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/refresh-api-key"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `api_key`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "api_key": {
                                                    "$ref": "#/components/schemas/created-api-key"
                                                }
                                            },
                                            "required": [
                                                "api_key"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Токены API"
                ]
            },
            "delete": {
                "summary": "Удалить токен",
                "description": "Чтобы удалить токен, отправьте DELETE запрос на `/api/v1/auth/api-keys/{token_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/api-key-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete(\n    'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',\n    headers=headers,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Токен успешно удален."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Токены API"
                ]
            }
        },
        "/api/v1/auth/access": {
            "get": {
                "summary": "Получение информацию о ограничениях авторизации пользователя",
                "description": "Чтобы получить информацию о ограничениях авторизации пользователя, отправьте GET запрос на `/api/v1/auth/access`.\n\n Тело ответа будет представлять собой объект JSON с ключами `is_ip_restrictions_enabled`, `is_country_restrictions_enabled` и `white_list`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/auth/access\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/auth/access', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/auth/access', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/auth/access', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/access');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/auth/access\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/access\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключами `is_ip_restrictions_enabled`, `is_country_restrictions_enabled` и `white_list`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "is_ip_restrictions_enabled": {
                                                    "type": "boolean",
                                                    "description": "Это логическое значение, которое показывает, включено ли ограничение доступа по IP-адресу.",
                                                    "example": true
                                                },
                                                "is_country_restrictions_enabled": {
                                                    "type": "boolean",
                                                    "description": "Это логическое значение, которое показывает, включено ли ограничение доступа по стране.",
                                                    "example": true
                                                },
                                                "white_list": {
                                                    "type": "object",
                                                    "properties": {
                                                        "ips": {
                                                            "type": "array",
                                                            "description": "Список разрешенных IP-адресов.",
                                                            "items": {
                                                                "type": "string",
                                                                "format": "ipv4",
                                                                "example": "123.231.125.128"
                                                            }
                                                        },
                                                        "countries": {
                                                            "type": "array",
                                                            "description": "Список разрешенных стран.",
                                                            "items": {
                                                                "type": "string",
                                                                "example": "RU"
                                                            }
                                                        }
                                                    },
                                                    "required": [
                                                        "ips",
                                                        "countries"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "is_ip_restrictions_enabled",
                                                "is_country_restrictions_enabled",
                                                "white_list"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Аккаунт"
                ]
            }
        },
        "/api/v1/auth/access/countries/enabled": {
            "post": {
                "summary": "Включение/отключение ограничений по стране",
                "description": "Чтобы включить/отключить ограничения по стране, отправьте POST запрос в `api/v1/access/countries/enabled`, передав в теле запроса параметр `is_enabled`",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"is_enabled\": true\n}' \"https://api.timeweb.cloud/api/v1/access/countries/enabled\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/access/countries/enabled', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"is_enabled\": true\\n}',\n    body: JSON.stringify({\n        'is_enabled': true\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/access/countries/enabled',\n    // '{\\n  \"is_enabled\": true\\n}',\n    {\n        'is_enabled': true\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'is_enabled': True,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/access/countries/enabled', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/countries/enabled');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"is_enabled\\\": true\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"is_enabled\": true\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/access/countries/enabled\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/access/countries/enabled\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"is_enabled\\\": true\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "is_enabled": {
                                        "type": "boolean",
                                        "description": "Это логическое значение, которое показывает, включены ли ограничения по IP-адресу.",
                                        "example": true
                                    }
                                },
                                "required": [
                                    "is_enabled"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {},
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Аккаунт"
                ]
            }
        },
        "/api/v1/auth/access/countries": {
            "get": {
                "summary": "Получение списка стран",
                "description": "Чтобы получить список стран, отправьте GET запрос на `/api/v1/auth/access/countries`.\n\n Тело ответа будет представлять собой объект JSON с ключом `countries`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/auth/access/countries\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/auth/access/countries', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/auth/access/countries', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/auth/access/countries', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/access/countries');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/auth/access/countries\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/access/countries\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `countries`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "countries": {
                                                    "type": "object",
                                                    "description": "Список стран, приходит в виде объекта, где ключ - код страны в формате Alpha-2 ISO 3166-1, а значение - название страны в удобочитаемом формате.",
                                                    "example": {
                                                        "RU": "Россия",
                                                        "KZ": "Казахстан",
                                                        "BY": "Беларусь"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "countries"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Аккаунт"
                ]
            },
            "post": {
                "summary": "Добавление стран в список разрешенных",
                "description": "Чтобы добавить страны в список разрешенных, отправьте POST запрос в `api/v1/access/countries`, передав в теле запроса параметр `countries` со списком стран.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"countries\": [\"RU\"]\n}' \"https://api.timeweb.cloud/api/v1/access/countries\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/access/countries', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"countries\": [\"RU\"]\\n}',\n    body: JSON.stringify({\n        'countries': [\n            'RU'\n        ]\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/access/countries',\n    // '{\\n  \"countries\": [\"RU\"]\\n}',\n    {\n        'countries': [\n            'RU'\n        ]\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'countries': [\n        'RU',\n    ],\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/access/countries', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/countries');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"countries\\\": [\\\"RU\\\"]\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"countries\": [\"RU\"]\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/access/countries\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/access/countries\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"countries\\\": [\\\"RU\\\"]\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "countries": {
                                        "type": "array",
                                        "description": "Список разрешенных стран",
                                        "items": {
                                            "type": "string",
                                            "example": "RU"
                                        }
                                    }
                                },
                                "required": [
                                    "countries"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `countries`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "countries": {
                                                    "$ref": "#/components/schemas/add-countries"
                                                }
                                            },
                                            "required": [
                                                "countries"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Аккаунт"
                ]
            },
            "delete": {
                "summary": "Удаление стран из списка разрешенных",
                "description": "Чтобы удалить страны из списка разрешенных, отправьте DELETE запрос в `api/v1/access/countries`, передав в теле запроса параметр `countries` со списком стран.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"countries\": [\"RU\"]\n}' \"https://api.timeweb.cloud/api/v1/access/countries\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/access/countries', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"countries\": [\"RU\"]\\n}',\n    body: JSON.stringify({\n        'countries': [\n            'RU'\n        ]\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/access/countries', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // data: '{\\n  \"countries\": [\"RU\"]\\n}',\n    data: {\n        'countries': [\n            'RU'\n        ]\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'countries': [\n        'RU',\n    ],\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/access/countries', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/countries');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"countries\\\": [\\\"RU\\\"]\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"countries\": [\"RU\"]\n}`)\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/access/countries\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/access/countries\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"countries\\\": [\\\"RU\\\"]\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "countries": {
                                        "type": "array",
                                        "description": "Список удаляемых из списка разрешенных стран.",
                                        "items": {
                                            "type": "string",
                                            "example": "RU"
                                        }
                                    }
                                },
                                "required": [
                                    "countries"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `countries`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "countries": {
                                                    "$ref": "#/components/schemas/remove-countries"
                                                }
                                            },
                                            "required": [
                                                "countries"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Аккаунт"
                ]
            }
        },
        "/api/v1/auth/access/ips/enabled": {
            "post": {
                "summary": "Включение/отключение ограничений по IP-адресу",
                "description": "Чтобы включить/отключить ограничения по IP-адресу, отправьте POST запрос в `api/v1/access/ips/enabled`, передав в теле запроса параметр `is_enabled`",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"is_enabled\": true\n}' \"https://api.timeweb.cloud/api/v1/access/ips/enabled\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/access/ips/enabled', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"is_enabled\": true\\n}',\n    body: JSON.stringify({\n        'is_enabled': true\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/access/ips/enabled',\n    // '{\\n  \"is_enabled\": true\\n}',\n    {\n        'is_enabled': true\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'is_enabled': True,\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/access/ips/enabled', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/ips/enabled');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"is_enabled\\\": true\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"is_enabled\": true\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/access/ips/enabled\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/access/ips/enabled\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"is_enabled\\\": true\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "is_enabled": {
                                        "type": "boolean",
                                        "description": "Это логическое значение, которое показывает, включены ли ограничения по IP-адресу.",
                                        "example": true
                                    }
                                },
                                "required": [
                                    "is_enabled"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {},
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Аккаунт"
                ]
            }
        },
        "/api/v1/auth/access/ips": {
            "post": {
                "summary": "Добавление IP-адресов в список разрешенных",
                "description": "Чтобы добавить IP-адреса в список разрешенных, отправьте POST запрос в `api/v1/access/ips`, передав в теле запроса параметр `ips` со списком IP-адресов.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"ips\": [\"123.231.125.128\"]\n}' \"https://api.timeweb.cloud/api/v1/access/ips\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/access/ips', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"ips\": [\"123.231.125.128\"]\\n}',\n    body: JSON.stringify({\n        'ips': [\n            '123.231.125.128'\n        ]\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/access/ips',\n    // '{\\n  \"ips\": [\"123.231.125.128\"]\\n}',\n    {\n        'ips': [\n            '123.231.125.128'\n        ]\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'ips': [\n        '123.231.125.128',\n    ],\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/access/ips', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/ips');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"ips\\\": [\\\"123.231.125.128\\\"]\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"ips\": [\"123.231.125.128\"]\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/access/ips\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/access/ips\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"ips\\\": [\\\"123.231.125.128\\\"]\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ips": {
                                        "type": "array",
                                        "description": "Список разрешенных IP-адресов.",
                                        "items": {
                                            "type": "string",
                                            "format": "ipv4",
                                            "example": "123.231.125.128"
                                        }
                                    }
                                },
                                "required": [
                                    "ips"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `ips`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "ips": {
                                                    "$ref": "#/components/schemas/add-ips"
                                                }
                                            },
                                            "required": [
                                                "ips"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Аккаунт"
                ]
            },
            "delete": {
                "summary": "Удаление IP-адресов из списка разрешенных",
                "description": "Чтобы удалить IP-адреса из списка разрешенных, отправьте DELETE запрос в `api/v1/access/ips`, передав в теле запроса параметр `ips` со списком IP-адресов.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"ips\": [\"123.231.125.128\"]\n}' \"https://api.timeweb.cloud/api/v1/access/ips\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/access/ips', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"ips\": [\"123.231.125.128\"]\\n}',\n    body: JSON.stringify({\n        'ips': [\n            '123.231.125.128'\n        ]\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/access/ips', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // data: '{\\n  \"ips\": [\"123.231.125.128\"]\\n}',\n    data: {\n        'ips': [\n            '123.231.125.128'\n        ]\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'ips': [\n        '123.231.125.128',\n    ],\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/access/ips', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/ips');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"ips\\\": [\\\"123.231.125.128\\\"]\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"ips\": [\"123.231.125.128\"]\n}`)\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/access/ips\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/access/ips\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"ips\\\": [\\\"123.231.125.128\\\"]\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ips": {
                                        "type": "array",
                                        "description": "Список удаляемых из списка разрешенных IP-адресов.",
                                        "items": {
                                            "type": "string",
                                            "format": "ipv4",
                                            "example": "123.231.125.128"
                                        }
                                    }
                                },
                                "required": [
                                    "ips"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `ips`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "ips": {
                                                    "$ref": "#/components/schemas/remove-ips"
                                                }
                                            },
                                            "required": [
                                                "ips"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Аккаунт"
                ]
            }
        },
        "/api/v1/mail": {
            "get": {
                "summary": "Получение списка почтовых ящиков аккаунта",
                "description": "Чтобы получить список почтовых ящиков аккаунта, отправьте GET запрос на `/api/v1/mail`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/mail\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/mail', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/mail', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/mail', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/mail\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `mailboxes`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "mailboxes": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/mailbox"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "mailboxes"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Почта"
                ]
            }
        },
        "/api/v1/mail/quota": {
            "get": {
                "summary": "Получение квоты почты аккаунта",
                "description": "Чтобы получить квоту почты аккаунта, отправьте GET запрос на `/api/v1/mail/quota`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/mail/quota\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/mail/quota', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/mail/quota', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/mail/quota', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/quota');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/mail/quota\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/quota\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `quota`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "quota": {
                                                    "$ref": "#/components/schemas/quota"
                                                }
                                            },
                                            "required": [
                                                "quota"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Почта"
                ]
            },
            "patch": {
                "summary": "Изменение квоты почты аккаунта",
                "description": "Чтобы получить инфомацию по квоте почты аккаунта, отправьте GET запрос на `/api/v1/mail/quota`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"total\": 1024}' \\\n  \"https://api.timeweb.cloud/api/v1/mail/quota\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/mail/quota', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\"total\": 1024}',\n    body: JSON.stringify({\n        'total': 1024\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/mail/quota',\n    // '{\"total\": 1024}',\n    {\n        'total': 1024\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'total': 1024,\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/mail/quota', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/quota');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"total\": 1024}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"total\": 1024}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/mail/quota\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/quota\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"total\\\": 1024}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "total": {
                                        "type": "number",
                                        "description": "Общее количество места на почте (в Мб.)",
                                        "example": 6144
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `quota`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "quota": {
                                                    "$ref": "#/components/schemas/quota"
                                                }
                                            },
                                            "required": [
                                                "quota"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Почта"
                ]
            }
        },
        "/api/v1/mail/domains/{domain}": {
            "get": {
                "summary": "Получение списка почтовых ящиков домена",
                "description": "Чтобы получить список почтовых ящиков домена, отправьте GET запрос на `/api/v1/mail/domains/{domain}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/search"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `mailboxes`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "mailboxes": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/mailbox"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "mailboxes"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Почта"
                ]
            },
            "post": {
                "summary": "Создание почтового ящика",
                "description": "Чтобы создать почтовый ящик, отправьте POST запрос на `/api/v1/mail/domains/{domain}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"mailbox\": \"mail\", \"password\": \"zHas2-\"}' \\\n  \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\"mailbox\": \"mail\", \"password\": \"zHas2-\"}',\n    body: JSON.stringify({\n        'mailbox': 'mail',\n        'password': 'zHas2-'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/mail/domains/{domain}',\n    // '{\"mailbox\": \"mail\", \"password\": \"zHas2-\"}',\n    {\n        'mailbox': 'mail',\n        'password': 'zHas2-'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'mailbox': 'mail',\n    'password': 'zHas2-',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/mail/domains/{domain}', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"mailbox\": \"mail\", \"password\": \"zHas2-\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"mailbox\": \"mail\", \"password\": \"zHas2-\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"mailbox\\\": \\\"mail\\\", \\\"password\\\": \\\"zHas2-\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "mailbox": {
                                        "type": "string",
                                        "description": "Название почтового ящика",
                                        "example": "mailbox"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "Пароль почтового ящика",
                                        "example": "zfAsl-"
                                    },
                                    "comment": {
                                        "type": "string",
                                        "description": "Комментарий почтового ящика",
                                        "example": "some comment"
                                    }
                                },
                                "required": [
                                    "mailbox",
                                    "password"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `mailbox`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "mailbox": {
                                                    "$ref": "#/components/schemas/mailbox"
                                                }
                                            },
                                            "required": [
                                                "mailbox"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Почта"
                ]
            }
        },
        "/api/v1/mail/domains/{domain}/info": {
            "get": {
                "summary": "Получение почтовой информации о домене",
                "description": "Чтобы получить почтовую информацию о домене, отправьте GET запрос на `/api/v1/mail/domains/{domain}/info`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `domain_info`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "domain_info": {
                                                    "$ref": "#/components/schemas/domain-info"
                                                }
                                            },
                                            "required": [
                                                "domain_info"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Почта"
                ]
            },
            "patch": {
                "summary": "Изменение почтовой информации о домене",
                "description": "Чтобы изменить почтовую информацию о домене, отправьте PATCH запрос на `/api/v1/mail/domains/{domain}/info`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"email\": \"test@timeweb.ru\"}' \\\n  \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\"email\": \"test@timeweb.ru\"}',\n    body: JSON.stringify({\n        'email': 'test@timeweb.ru'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info',\n    // '{\"email\": \"test@timeweb.ru\"}',\n    {\n        'email': 'test@timeweb.ru'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'email': 'test@timeweb.ru',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"email\": \"test@timeweb.ru\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"email\": \"test@timeweb.ru\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"email\\\": \\\"test@timeweb.ru\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "Адрес для сбора почты с ошибочных ящиков",
                                        "example": "test@timeweb.ru"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `domain_info`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "domain_info": {
                                                    "$ref": "#/components/schemas/domain-info"
                                                }
                                            },
                                            "required": [
                                                "domain_info"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Почта"
                ]
            }
        },
        "/api/v1/mail/domains/{domain}/mailboxes/{mailbox}": {
            "get": {
                "summary": "Получение почтового ящика",
                "description": "Чтобы получить почтовый ящик, отправьте GET запрос на `/api/v1/mail/domains/{domain}/mailboxes/{mailbox}`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain"
                    },
                    {
                        "$ref": "#/components/parameters/mailbox"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `mailbox`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "mailbox": {
                                                    "$ref": "#/components/schemas/mailbox"
                                                }
                                            },
                                            "required": [
                                                "mailbox"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Почта"
                ]
            },
            "patch": {
                "summary": "Изменение почтового ящика",
                "description": "Чтобы изменить почтовый ящик, отправьте PATCH запрос на `/api/v1/mail/domains/{domain}/mailboxes/{mailbox}`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"comment\": \"new comment\", \\\n \"password\": \"new password\", }' \\\n  \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: '{\"comment\": \"new comment\",  \"password\": \"new password\", }'\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}',\n    '{\"comment\": \"new comment\",  \"password\": \"new password\", }',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\ndata = '{\"comment\": \"new comment\",  \"password\": \"new password\", }'\n\nresponse = requests.patch(\n    'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}',\n    headers=headers,\n    data=data,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"comment\": \"new comment\",  \"password\": \"new password\", }');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"comment\": \"new comment\",  \"password\": \"new password\", }`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"comment\\\": \\\"new comment\\\",  \\\"password\\\": \\\"new password\\\", }\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain"
                    },
                    {
                        "$ref": "#/components/parameters/mailbox"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-mailbox"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `mailbox`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "mailbox": {
                                                    "$ref": "#/components/schemas/mailbox"
                                                }
                                            },
                                            "required": [
                                                "mailbox"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Почта"
                ]
            },
            "delete": {
                "summary": "Удаление почтового ящика",
                "description": "Чтобы удалить почтовый ящик, отправьте DELETE запрос на `/api/v1/mail/domains/{domain}/mailboxes/{mailbox}`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain"
                    },
                    {
                        "$ref": "#/components/parameters/mailbox"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Успешное удаление почтового ящика"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Почта"
                ]
            }
        },
        "/api/v1/domains": {
            "get": {
                "summary": "Получение списка всех доменов",
                "description": "Чтобы получить список всех доменов на вашем аккаунте, отправьте GET запрос на `/api/v1/domains`.\n\n Тело ответа будет представлять собой объект JSON с ключом `domains`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/idn-name"
                    },
                    {
                        "$ref": "#/components/parameters/linked-ip"
                    },
                    {
                        "$ref": "#/components/parameters/order"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/domains', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/domains', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `domains`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "domains": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/domain"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "domains"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/domains/{fqdn}": {
            "get": {
                "summary": "Получение информации о домене",
                "description": "Чтобы отобразить информацию об отдельном домене, отправьте запрос GET на `/api/v1/domains/{fqdn}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-fqdn"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `domain`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "domain": {
                                                    "$ref": "#/components/schemas/domain"
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "domain"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            },
            "patch": {
                "summary": "Включение/выключение автопродления домена",
                "description": "Чтобы включить/выключить автопродление домена, отправьте запрос PATCH на `/api/v1/domains/{fqdn}`, передав в теле запроса параметр `is_autoprolong_enabled`",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-fqdn"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-domain"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"is_autoprolong_enabled\":true}' \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'is_autoprolong_enabled': true\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/domains/somedomain.ru',\n    {\n        'is_autoprolong_enabled': true\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'is_autoprolong_enabled': True,\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"is_autoprolong_enabled\":true}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"is_autoprolong_enabled\":true}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"is_autoprolong_enabled\\\":true}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `domain`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "domain": {
                                                    "$ref": "#/components/schemas/domain"
                                                }
                                            },
                                            "required": [
                                                "domain"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            },
            "delete": {
                "summary": "Удаление домена",
                "description": "Чтобы удалить домен, отправьте запрос DELETE на `/api/v1/domains/{fqdn}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-fqdn"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Домен успешно удален."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/domains/{fqdn}/dns-records": {
            "get": {
                "summary": "Получить информацию обо всех пользовательских DNS-записях домена или поддомена",
                "description": "Чтобы получить информацию обо всех пользовательских DNS-записях домена или поддомена, отправьте запрос GET на `/api/v1/domains/{fqdn}/dns-records`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-subdomain-fqdn"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `dns_records`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "dns_records": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/dns-record"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "dns_records"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            },
            "post": {
                "summary": "Добавить информацию о DNS-записи для домена или поддомена",
                "description": "Чтобы добавить информацию о DNS-записи для домена или поддомена, отправьте запрос POST на `/api/v1/domains/{fqdn}/dns-records`, задав необходимые атрибуты.\n\nDNS-запись будет добавлена с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о добавленной DNS-записи.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-subdomain-fqdn"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/create-dns"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"type\":\"A\",\"value\":\"172.168.1.1\"}' \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'type': 'A',\n        'value': '172.168.1.1'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records',\n    {\n        'type': 'A',\n        'value': '172.168.1.1'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'type': 'A',\n    'value': '172.168.1.1',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"type\":\"A\",\"value\":\"172.168.1.1\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"type\":\"A\",\"value\":\"172.168.1.1\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"type\\\":\\\"A\\\",\\\"value\\\":\\\"172.168.1.1\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `dns_record`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "dns_record": {
                                                    "$ref": "#/components/schemas/dns-record"
                                                }
                                            },
                                            "required": [
                                                "dns_record"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/domains/{fqdn}/dns-records/{record_id}": {
            "patch": {
                "summary": "Обновить информацию о DNS-записи домена или поддомена",
                "description": "Чтобы обновить информацию о DNS-записи для домена или поддомена, отправьте запрос PATCH на `/api/v1/domains/{fqdn}/dns-records/{record_id}`, задав необходимые атрибуты.\n\nDNS-запись будет обновлена с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией об добавленной DNS-записи.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-subdomain-fqdn"
                    },
                    {
                        "$ref": "#/components/parameters/record-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/create-dns"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"type\":\"A\",\"value\":\"172.168.1.1\"}' \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'type': 'A',\n        'value': '172.168.1.1'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123',\n    {\n        'type': 'A',\n        'value': '172.168.1.1'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'type': 'A',\n    'value': '172.168.1.1',\n}\n\nresponse = requests.patch(\n    'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123',\n    headers=headers,\n    json=json_data,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"type\":\"A\",\"value\":\"172.168.1.1\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"type\":\"A\",\"value\":\"172.168.1.1\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"type\\\":\\\"A\\\",\\\"value\\\":\\\"172.168.1.1\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `dns_record`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "dns_record": {
                                                    "$ref": "#/components/schemas/dns-record"
                                                }
                                            },
                                            "required": [
                                                "dns_record"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            },
            "delete": {
                "summary": "Удалить информацию о DNS-записи для домена или поддомена",
                "description": "Чтобы удалить информацию о DNS-записи для домена или поддомена, отправьте запрос DELETE на `/api/v1/domains/{fqdn}/dns-records/{record_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-subdomain-fqdn"
                    },
                    {
                        "$ref": "#/components/parameters/record-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Информация о DNS-записи успешно удалена."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/domains/{fqdn}/default-dns-records": {
            "get": {
                "summary": "Получение информацию обо всех DNS-записях по умолчанию домена или поддомена",
                "description": "Чтобы получить информацию обо всех DNS-записях по умолчанию домена или поддомена, отправьте запрос GET на `/api/v1/domains/{fqdn}/default-dns-records`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-subdomain-fqdn"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `dns_records`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "dns_records": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/dns-record"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "dns_records"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/domains/{fqdn}/subdomains/{subdomain_fqdn}": {
            "post": {
                "summary": "Добавление поддомена",
                "description": "Чтобы добавить поддомен, отправьте запрос POST на `/api/v1/domains/{fqdn}/subdomains/{subdomain_fqdn}`, задав необходимые атрибуты.\n\nПоддомен будет добавлен с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о добавленном поддомене.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-fqdn"
                    },
                    {
                        "$ref": "#/components/parameters/subdomain-fqdn"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.post(\n    'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru',\n    headers=headers,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `subdomain`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "subdomain": {
                                                    "$ref": "#/components/schemas/subdomain"
                                                }
                                            },
                                            "required": [
                                                "subdomain"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            },
            "delete": {
                "summary": "Удаление поддомена",
                "description": "Чтобы удалить поддомен, отправьте запрос DELETE на `/api/v1/domains/{fqdn}/subdomains/{subdomain_fqdn}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-fqdn"
                    },
                    {
                        "$ref": "#/components/parameters/subdomain-fqdn"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete(\n    'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru',\n    headers=headers,\n)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Поддомен успешно удален"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/domains/{fqdn}/name-servers": {
            "get": {
                "summary": "Получение списка name-серверов домена",
                "description": "Чтобы получить список name-серверов домена, отправьте запрос GET на `/api/v1/domains/{fqdn}/name-servers`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-fqdn"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `name_servers`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "name_servers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/domain-name-server"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "name_servers"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            },
            "put": {
                "summary": "Изменение name-серверов домена",
                "description": "Чтобы изменить name-серверы домена, отправьте запрос PUT на `/api/v1/domains/{fqdn}/name-servers`, задав необходимые атрибуты.\n\nName-серверы будут изменены с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о name-серверах домена.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-fqdn"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-domain-name-servers"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"name_servers\":[{\"host\":\"ns1.timeweb.ru\"},{\"host\":\"ns2.timeweb.ru\"}]}' \\\n  \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'name_servers': [\n            {\n                'host': 'ns1.timeweb.ru'\n            },\n            {\n                'host': 'ns2.timeweb.ru'\n            }\n        ]\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.put(\n    'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers',\n    {\n        'name_servers': [\n            {\n                'host': 'ns1.timeweb.ru'\n            },\n            {\n                'host': 'ns2.timeweb.ru'\n            }\n        ]\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'name_servers': [\n        {\n            'host': 'ns1.timeweb.ru',\n        },\n        {\n            'host': 'ns2.timeweb.ru',\n        },\n    ],\n}\n\nresponse = requests.put('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"name_servers\":[{\"host\":\"ns1.timeweb.ru\"},{\"host\":\"ns2.timeweb.ru\"}]}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"name_servers\":[{\"host\":\"ns1.timeweb.ru\"},{\"host\":\"ns2.timeweb.ru\"}]}`)\n\treq, err := http.NewRequest(\"PUT\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PUT\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"name_servers\\\":[{\\\"host\\\":\\\"ns1.timeweb.ru\\\"},{\\\"host\\\":\\\"ns2.timeweb.ru\\\"}]}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `name_servers`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "name_servers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/domain-name-server"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "name_servers"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/domains-requests": {
            "get": {
                "summary": "Получение списка заявок на регистрацию/продление/трансфер домена",
                "description": "Чтобы получить список заявок на регистрацию/продление/трансфер домена, отправьте запрос GET на `/api/v1/domains-requests`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/person-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains-requests\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains-requests', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/domains-requests', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/domains-requests', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains-requests');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains-requests\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains-requests\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `requests`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "requests": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/domain-request"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "requests"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            },
            "post": {
                "summary": "Создание заявки на регистрацию/продление/трансфер домена",
                "description": "Чтобы заявку на регистрацию/продление/трансфер домена, отправьте POST запрос в `api/v1/domains-requests`, задав необходимые атрибуты.\n\nЗаявка будет создана с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданной заявке.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/register"
                                    },
                                    {
                                        "$ref": "#/components/schemas/prolong"
                                    },
                                    {
                                        "$ref": "#/components/schemas/transfer"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"action\":\"register\",\"fqdn\":\"somedomain.ru\",\"person_id\":123,\"is_autoprolong_enabled\":true,\"period\":\"P1Y\"}' \\\n  \"https://api.timeweb.cloud/api/v1/domains-requests\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains-requests', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'action': 'register',\n        'fqdn': 'somedomain.ru',\n        'person_id': 123,\n        'is_autoprolong_enabled': true,\n        'period': 'P1Y'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/domains-requests',\n    {\n        'action': 'register',\n        'fqdn': 'somedomain.ru',\n        'person_id': 123,\n        'is_autoprolong_enabled': true,\n        'period': 'P1Y'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'action': 'register',\n    'fqdn': 'somedomain.ru',\n    'person_id': 123,\n    'is_autoprolong_enabled': True,\n    'period': 'P1Y',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/domains-requests', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains-requests');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"action\":\"register\",\"fqdn\":\"somedomain.ru\",\"person_id\":123,\"is_autoprolong_enabled\":true,\"period\":\"P1Y\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"action\":\"register\",\"fqdn\":\"somedomain.ru\",\"person_id\":123,\"is_autoprolong_enabled\":true,\"period\":\"P1Y\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/domains-requests\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains-requests\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"action\\\":\\\"register\\\",\\\"fqdn\\\":\\\"somedomain.ru\\\",\\\"person_id\\\":123,\\\"is_autoprolong_enabled\\\":true,\\\"period\\\":\\\"P1Y\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `request`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "request": {
                                                    "$ref": "#/components/schemas/domain-request"
                                                }
                                            },
                                            "required": [
                                                "request"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/domains-requests/{request_id}": {
            "get": {
                "summary": "Получение заявки на регистрацию/продление/трансфер домена",
                "description": "Чтобы получить заявку на регистрацию/продление/трансфер домена, отправьте запрос GET на `/api/v1/domains-requests/{request_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/request-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/domains-requests/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains-requests/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/domains-requests/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/domains-requests/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains-requests/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains-requests/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains-requests/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `request`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "request": {
                                                    "$ref": "#/components/schemas/domain-request"
                                                }
                                            },
                                            "required": [
                                                "request"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            },
            "patch": {
                "summary": "Оплата/обновление заявки на регистрацию/продление/трансфер домена",
                "description": "Чтобы оплатить/обновить заявку на регистрацию/продление/трансфер домена, отправьте запрос PATCH на `/api/v1/domains-requests/{request_id}`, задав необходимые атрибуты.\n\nЗаявка будет обновлена с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о обновленной заявке.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/request-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/use"
                                    },
                                    {
                                        "$ref": "#/components/schemas/invoice"
                                    },
                                    {
                                        "$ref": "#/components/schemas/free"
                                    },
                                    {
                                        "$ref": "#/components/schemas/bonus"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\"money_source\":\"use\"}' \\\n  \"https://api.timeweb.cloud/api/v1/domains-requests/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/domains-requests/123', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: JSON.stringify({\n        'money_source': 'use'\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/domains-requests/123',\n    {\n        'money_source': 'use'\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'money_source': 'use',\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/domains-requests/123', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains-requests/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{\"money_source\":\"use\"}');\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\"money_source\":\"use\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/domains-requests/123\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains-requests/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\\"money_source\\\":\\\"use\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `request`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "request": {
                                                    "$ref": "#/components/schemas/domain-request"
                                                }
                                            },
                                            "required": [
                                                "request"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/tlds": {
            "get": {
                "summary": "Получить информацию о доменных зонах",
                "description": "Чтобы получить информацию о доменных зонах, отправьте запрос GET на `/api/v1/tlds`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/is-published"
                    },
                    {
                        "$ref": "#/components/parameters/is-registered"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/tlds\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/tlds', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/tlds', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/tlds', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/tlds');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/tlds\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/tlds\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `top_level_domains`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "top_level_domains": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/top-level-domain"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "meta",
                                                "top_level_domains"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/tlds/{tld_id}": {
            "get": {
                "summary": "Получить информацию о доменной зоне по идентификатору",
                "description": "Чтобы получить информацию о доменной зоне по идентификатору, отправьте запрос GET на `/api/v1/tlds/{tld_id}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/tld-id"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/tlds/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/tlds/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/tlds/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/tlds/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/tlds/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/tlds/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/tlds/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `top_level_domain`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "top_level_domain": {
                                                    "$ref": "#/components/schemas/top-level-domain"
                                                }
                                            },
                                            "required": [
                                                "top_level_domain"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/check-domain/{fqdn}": {
            "get": {
                "summary": "Проверить доступен ли домен для регистрации",
                "description": "Чтобы проверить доступен ли домен для регистрации, отправьте запрос GET на `/api/v1/check-domain/{fqdn}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-fqdn"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ будет представлять собой объект JSON c ключом `is_domain_available`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "is_domain_available": {
                                                    "description": "Это логическое значение, которое показывает, доступен ли домен для регистрации.",
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "required": [
                                                "is_domain_available"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/add-domain/{fqdn}": {
            "post": {
                "summary": "Добавление домена на аккаунт",
                "description": "Чтобы добавление домена на свой аккаунт, отправьте запрос POST на `/api/v1/add-domain/{fqdn}`.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/domain-fqdn"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru',\n    '',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Домен успешно добавлен на ваш аккаунт."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Домены"
                ]
            }
        },
        "/api/v1/ssh-keys": {
            "get": {
                "summary": "Получение списка SSH-ключей",
                "description": "Чтобы получить список SSH-ключей, отправьте GET запрос на `/api/v1/ssh-keys`.",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/ssh-keys\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/ssh-keys', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/ssh-keys', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/ssh-keys', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/ssh-keys');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/ssh-keys\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/ssh-keys\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `ssh_keys`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "ssh-keys": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/ssh-key"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "ssh-keys",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "SSH-ключи"
                ]
            },
            "post": {
                "summary": "Создание SSH-ключа",
                "description": "Чтобы создать создать SSH-ключ, отправьте POST запрос в `/api/v1/ssh-keys`, задав необходимые атрибуты.\n\n",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"body\": \"\"ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru\"\n\",\n  \"is_default\": false,\n  \"name\": \"test\"\n}' \"https://api.timeweb.cloud/api/v1/ssh-keys\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/ssh-keys', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    body: '{\\n  \"body\": \"\"ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru\"\\n\",\\n  \"is_default\": false,\\n  \"name\": \"test\"\\n}'\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/ssh-keys',\n    '{\\n  \"body\": \"\"ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru\"\\n\",\\n  \"is_default\": false,\\n  \"name\": \"test\"\\n}',\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\ndata = '{\\n  \"body\": \"\"ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru\"\\n\",\\n  \"is_default\": false,\\n  \"name\": \"test\"\\n}'\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/ssh-keys', headers=headers, data=data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/ssh-keys');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"body\\\": \\\"\\\"ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru\\\"\\n\\\",\\n  \\\"is_default\\\": false,\\n  \\\"name\\\": \\\"test\\\"\\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"body\": \"\"ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru\"\n\",\n  \"is_default\": false,\n  \"name\": \"test\"\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/ssh-keys\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/ssh-keys\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"body\\\": \\\"\\\"ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru\\\"\\n\\\",\\n  \\\"is_default\\\": false,\\n  \\\"name\\\": \\\"test\\\"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "Тело SSH-ключа",
                                        "example": "ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru"
                                    },
                                    "is_default": {
                                        "type": "boolean",
                                        "description": "Будет ли выбираться SSH-ключ по умолчанию при создании сервера\n\n",
                                        "example": false
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Название SSH-ключа",
                                        "example": "test"
                                    }
                                },
                                "required": [
                                    "body",
                                    "is_default",
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Объект JSON c ключом `ssh-key`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "ssh-key": {
                                                    "$ref": "#/components/schemas/ssh-key"
                                                }
                                            },
                                            "required": [
                                                "ssh-key"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "409": {
                        "$ref": "#/components/responses/conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "SSH-ключи"
                ]
            }
        },
        "/api/v1/ssh-keys/{ssh_key_id}": {
            "get": {
                "summary": "Получение SSH-ключа по уникальному идентификатору",
                "description": "Чтобы получить SSH-ключ, отправьте GET запрос на `/api/v1/ssh-keys/{ssh_key_id}`",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/ssh-keys/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/ssh-keys/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.get('https://api.timeweb.cloud/api/v1/ssh-keys/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.get('https://api.timeweb.cloud/api/v1/ssh-keys/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/ssh-keys/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/ssh-keys/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/ssh-keys/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ssh-key-id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `ssh_key`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "ssh-key": {
                                                    "$ref": "#/components/schemas/ssh-key"
                                                }
                                            },
                                            "required": [
                                                "ssh-key",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "SSH-ключи"
                ]
            },
            "patch": {
                "summary": "Изменение SSH-ключа по уникальному идентификатору",
                "description": "Чтобы изменить SSH-ключ, отправьте PATCH запрос на `/api/v1/ssh-keys/{ssh_key_id}`",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"is_default\": true \n}' \"https://api.timeweb.cloud/api/v1/ssh-keys/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/ssh-keys/123', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"is_default\": true \\n}',\n    body: JSON.stringify({\n        'is_default': true\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.patch(\n    'https://api.timeweb.cloud/api/v1/ssh-keys/123',\n    // '{\\n  \"is_default\": true \\n}',\n    {\n        'is_default': true\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'is_default': True,\n}\n\nresponse = requests.patch('https://api.timeweb.cloud/api/v1/ssh-keys/123', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/ssh-keys/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"is_default\\\": true \\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"is_default\": true \n}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/ssh-keys/123\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/ssh-keys/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"is_default\\\": true \\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ssh-key-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "Тело SSH-ключа",
                                        "example": "ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru"
                                    },
                                    "is_default": {
                                        "type": "boolean",
                                        "description": "Будет ли выбираться SSH-ключ по умолчанию при создании сервера",
                                        "example": false
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Название SSH-ключа",
                                        "example": "test"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Объект JSON c ключом `ssh_key`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "meta": {
                                                    "$ref": "#/components/schemas/meta"
                                                },
                                                "ssh-key": {
                                                    "$ref": "#/components/schemas/ssh-key"
                                                }
                                            },
                                            "required": [
                                                "ssh-key",
                                                "meta"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "response_id": {
                                                    "$ref": "#/components/schemas/response_id"
                                                }
                                            },
                                            "required": [
                                                "response_id"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "SSH-ключи"
                ]
            },
            "delete": {
                "summary": "Удаление SSH-ключа по уникальному идентификатору",
                "description": "Чтобы удалить SSH-ключ, отправьте DELETE запрос на `/api/v1/ssh-keys/{ssh_key_id}`",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/ssh-keys/123\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/ssh-keys/123', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/ssh-keys/123', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/ssh-keys/123', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/ssh-keys/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/ssh-keys/123\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/ssh-keys/123\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ssh-key-id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Успешное удаление SSH-ключа"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "SSH-ключи"
                ]
            }
        },
        "/api/v1/servers/{server_id}/ssh-keys": {
            "post": {
                "summary": "Добавление SSH-ключей на сервер",
                "description": "Чтобы добавить SSH-ключи на сервер, отправьте POST запрос на `/api/v1/servers/{server_id}/ssh-keys`",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"ssh_key_ids\": [1, 2] \n}' \"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    },\n    // body: '{\\n  \"ssh_key_ids\": [1, 2] \\n}',\n    body: JSON.stringify({\n        'ssh_key_ids': [\n            1,\n            2\n        ]\n    })\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.post(\n    'https://api.timeweb.cloud/api/v1/servers/123/ssh-keys',\n    // '{\\n  \"ssh_key_ids\": [1, 2] \\n}',\n    {\n        'ssh_key_ids': [\n            1,\n            2\n        ]\n    },\n    {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n        }\n    }\n);"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\njson_data = {\n    'ssh_key_ids': [\n        1,\n        2,\n    ],\n}\n\nresponse = requests.post('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys', headers=headers, json=json_data)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ssh-keys');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"{\\n  \\\"ssh_key_ids\\\": [1, 2] \\n}\");\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\tvar data = strings.NewReader(`{\n  \"ssh_key_ids\": [1, 2] \n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys\", data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"{\\n  \\\"ssh_key_ids\\\": [1, 2] \\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ssh_key_ids": {
                                        "type": "array",
                                        "description": "Массив уникальных идентификаторов SSH-ключей",
                                        "items": {
                                            "type": "number",
                                            "example": 1
                                        }
                                    }
                                },
                                "required": [
                                    "ssh_key_ids"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Успешное добавление SSH-ключей на сервер"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "SSH-ключи"
                ]
            }
        },
        "/api/v1/servers/{server_id}/ssh-keys/{ssh_key_id}": {
            "delete": {
                "summary": "Удаление SSH-ключей с сервера",
                "description": "Чтобы удалить SSH-ключ с сервера, отправьте DELETE запрос на `/api/v1/servers/{server_id}/ssh-keys/{ssh_key_id}`",
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cURL",
                        "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321\""
                    },
                    {
                        "lang": "JavaScript",
                        "source": "fetch('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Node",
                        "source": "const axios = require('axios');\n\nconst response = await axios.delete('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321', {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN'\n    }\n});"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nimport requests\n\nTIMEWEB_CLOUD_TOKEN = os.getenv('TIMEWEB_CLOUD_TOKEN')\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {TIMEWEB_CLOUD_TOKEN}',\n}\n\nresponse = requests.delete('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321', headers=headers)"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type' => 'application/json',\n    'Authorization' => 'Bearer $TIMEWEB_CLOUD_TOKEN',\n]);\n\n$response = curl_exec($ch);\n\ncurl_close($ch);\n"
                    },
                    {
                        "lang": "Go",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbodyText, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321\");\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer $TIMEWEB_CLOUD_TOKEN\");\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\t}\n}\n"
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/server-id"
                    },
                    {
                        "$ref": "#/components/parameters/ssh-key-id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Успешное удаление SSH-ключа с сервера"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "SSH-ключи"
                ]
            }
        }
    },
    "components": {
        "responses": {
            "400": {
                "$ref": "#/components/responses/bad-request"
            },
            "401": {
                "$ref": "#/components/responses/unauthorized"
            },
            "403": {
                "$ref": "#/components/responses/forbidden"
            },
            "404": {
                "$ref": "#/components/responses/not-found"
            },
            "409": {
                "$ref": "#/components/responses/conflict"
            },
            "429": {
                "$ref": "#/components/responses/too-many-requests"
            },
            "500": {
                "$ref": "#/components/responses/internal-server-error"
            },
            "conflict": {
                "description": "Конфликт",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status_code": {
                                    "type": "number",
                                    "example": 409,
                                    "description": "Короткий идентификатор, соответствующий возвращаемому коду состояния HTTP."
                                },
                                "message": {
                                    "description": "Сообщение, предоставляющее дополнительную информацию об ошибке, в том числе сведения, помогающие устранить ее, когда это возможно.",
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    ],
                                    "example": "Conflict"
                                },
                                "error_code": {
                                    "type": "string",
                                    "example": "conflict",
                                    "description": "Краткое описание ошибки HTTP на основе статуса."
                                },
                                "response_id": {
                                    "$ref": "#/components/schemas/response-id_response_id"
                                }
                            },
                            "required": [
                                "status_code",
                                "error_code",
                                "response_id"
                            ]
                        }
                    }
                }
            },
            "bad-request": {
                "description": "Некорректный запрос",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status_code": {
                                    "type": "number",
                                    "description": "Короткий идентификатор, соответствующий возвращаемому коду состояния HTTP.",
                                    "example": 400
                                },
                                "message": {
                                    "example": "Value must be a number conforming to the specified constraints",
                                    "description": "Сообщение, предоставляющее дополнительную информацию об ошибке, в том числе сведения, помогающие устранить ее, когда это возможно.",
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "description": " "
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    ]
                                },
                                "error_code": {
                                    "type": "string",
                                    "example": "bad_request",
                                    "description": "Краткое описание ошибки HTTP на основе статуса."
                                },
                                "response_id": {
                                    "$ref": "#/components/schemas/response_id"
                                }
                            },
                            "required": [
                                "status_code",
                                "error_code",
                                "response_id"
                            ]
                        }
                    }
                }
            },
            "unauthorized": {
                "description": "Не авторизован",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status_code": {
                                    "type": "number",
                                    "description": "Короткий идентификатор, соответствующий возвращаемому коду состояния HTTP.",
                                    "example": 401
                                },
                                "message": {
                                    "description": "Сообщение, предоставляющее дополнительную информацию об ошибке, в том числе сведения, помогающие устранить ее, когда это возможно.",
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    ],
                                    "example": "Unauthorized"
                                },
                                "error_code": {
                                    "type": "string",
                                    "example": "unauthorized",
                                    "description": "Краткое описание ошибки HTTP на основе статуса."
                                },
                                "response_id": {
                                    "$ref": "#/components/schemas/response_id"
                                }
                            },
                            "required": [
                                "status_code",
                                "error_code",
                                "response_id"
                            ]
                        }
                    }
                }
            },
            "forbidden": {
                "description": "Запрещено",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status_code": {
                                    "type": "number",
                                    "example": 403,
                                    "description": "Короткий идентификатор, соответствующий возвращаемому коду состояния HTTP."
                                },
                                "message": {
                                    "description": "Сообщение, предоставляющее дополнительную информацию об ошибке, в том числе сведения, помогающие устранить ее, когда это возможно.",
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    ],
                                    "example": "Forbidden"
                                },
                                "error_code": {
                                    "type": "string",
                                    "example": "forbidden",
                                    "description": "Краткое описание ошибки HTTP на основе статуса."
                                },
                                "response_id": {
                                    "$ref": "#/components/schemas/response_id"
                                }
                            },
                            "required": [
                                "status_code",
                                "error_code",
                                "response_id"
                            ]
                        }
                    }
                }
            },
            "not-found": {
                "description": "Не найдено",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status_code": {
                                    "type": "number",
                                    "example": 404,
                                    "description": "Короткий идентификатор, соответствующий возвращаемому коду состояния HTTP."
                                },
                                "message": {
                                    "description": "Сообщение, предоставляющее дополнительную информацию об ошибке, в том числе сведения, помогающие устранить ее, когда это возможно.",
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    ],
                                    "example": "Resource not found"
                                },
                                "error_code": {
                                    "type": "string",
                                    "example": "not_found",
                                    "description": "Краткое описание ошибки HTTP на основе статуса."
                                },
                                "response_id": {
                                    "$ref": "#/components/schemas/response_id"
                                }
                            },
                            "required": [
                                "status_code",
                                "error_code",
                                "response_id"
                            ]
                        }
                    }
                }
            },
            "too-many-requests": {
                "description": "Слишком много запросов",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status_code": {
                                    "type": "number",
                                    "example": 429,
                                    "description": "Короткий идентификатор, соответствующий возвращаемому коду состояния HTTP."
                                },
                                "message": {
                                    "description": "Сообщение, предоставляющее дополнительную информацию об ошибке, в том числе сведения, помогающие устранить ее, когда это возможно.",
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    ],
                                    "example": "Too many requests"
                                },
                                "error_code": {
                                    "type": "string",
                                    "example": "too_many_requests",
                                    "description": "Краткое описание ошибки HTTP на основе статуса."
                                },
                                "response_id": {
                                    "$ref": "#/components/schemas/response_id"
                                }
                            },
                            "required": [
                                "status_code",
                                "error_code",
                                "response_id"
                            ]
                        }
                    }
                }
            },
            "internal-server-error": {
                "description": "Внутренняя ошибка сервера",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status_code": {
                                    "type": "number",
                                    "example": 500,
                                    "description": "Короткий идентификатор, соответствующий возвращаемому коду состояния HTTP."
                                },
                                "message": {
                                    "description": "Сообщение, предоставляющее дополнительную информацию об ошибке, в том числе сведения, помогающие устранить ее, когда это возможно.",
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    ],
                                    "example": "Internal server error"
                                },
                                "error_code": {
                                    "type": "string",
                                    "example": "internal_server_error",
                                    "description": "Краткое описание ошибки HTTP на основе статуса."
                                },
                                "response_id": {
                                    "$ref": "#/components/schemas/response_id"
                                }
                            },
                            "required": [
                                "status_code",
                                "error_code",
                                "response_id"
                            ]
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        },
        "schemas": {
            "response_id": {
                "description": "Идентификатор запроса, который можно указывать при обращении в службу технической поддержки, чтобы помочь определить проблему.",
                "type": "string",
                "format": "uuid",
                "example": "15095f25-aac3-4d60-a788-96cb5136f186"
            },
            "finances": {
                "description": "Платежная информация",
                "type": "object",
                "properties": {
                    "balance": {
                        "type": "number",
                        "description": "Баланс аккаунта.",
                        "example": 7378.3
                    },
                    "currency": {
                        "type": "string",
                        "description": "Валюта, которая используется на аккаунте.",
                        "example": "RUB"
                    },
                    "discount_end_date_at": {
                        "type": "string",
                        "nullable": true,
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда заканчивается скидка для аккаунта.",
                        "example": "2021-02-25T11:04:15Z"
                    },
                    "discount_percent": {
                        "type": "number",
                        "description": "Процент скидки для аккаунта.",
                        "example": 5
                    },
                    "hourly_cost": {
                        "type": "number",
                        "description": "Стоимость услуг на аккаунте в час.",
                        "example": 33.192622950819676
                    },
                    "hourly_fee": {
                        "type": "number",
                        "description": "Абонентская плата в час (с учетом скидок).",
                        "example": 33.192622950819676
                    },
                    "monthly_cost": {
                        "type": "number",
                        "description": "Стоимость услуг на аккаунте в месяц.",
                        "example": 24297
                    },
                    "monthly_fee": {
                        "type": "number",
                        "description": "Абонентская плата в месяц (с учетом скидок).",
                        "example": 24297
                    },
                    "total_paid": {
                        "type": "number",
                        "description": "Общая сумма платежей на аккаунте.",
                        "example": 29191.51
                    },
                    "hours_left": {
                        "type": "number",
                        "nullable": true,
                        "description": "Сколько часов работы услуг оплачено на аккаунте.",
                        "example": 10
                    },
                    "autopay_card_info": {
                        "type": "string",
                        "nullable": true,
                        "description": "Информация о карте, используемой для автоплатежей.",
                        "example": "553611XXXXXX1111"
                    }
                },
                "required": [
                    "balance",
                    "currency",
                    "discount_end_date_at",
                    "discount_percent",
                    "hourly_cost",
                    "hourly_fee",
                    "monthly_cost",
                    "monthly_fee",
                    "total_paid",
                    "hours_left",
                    "autopay_card_info"
                ]
            },
            "status": {
                "description": "Статус аккаунта",
                "type": "object",
                "properties": {
                    "is_blocked": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, заблокирован ли аккаунт.",
                        "example": false
                    },
                    "is_permanent_blocked": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, заблокирован ли аккаунт навсегда.",
                        "example": false
                    },
                    "is_send_bill_letters": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, требуется ли отправлять счета на почту.",
                        "example": false
                    },
                    "company_info": {
                        "type": "object",
                        "description": "Информация о компании.",
                        "properties": {
                            "id": {
                                "type": "number",
                                "description": "Идентификатор компании.",
                                "example": 0
                            },
                            "name": {
                                "type": "string",
                                "description": "Название компании.",
                                "example": "Пример"
                            }
                        },
                        "required": [
                            "id",
                            "name"
                        ]
                    },
                    "last_password_changed_at": {
                        "type": "string",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда последний раз изменялся пароль.",
                        "example": "2021-02-25T11:04:15Z"
                    },
                    "ym_client_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Идентификатор аккаунта для яндекс метрики.",
                        "example": null
                    }
                },
                "required": [
                    "is_blocked",
                    "is_permanent_blocked",
                    "is_send_bill_letters",
                    "company_info",
                    "last_password_changed_at",
                    "ym_client_id"
                ]
            },
            "Meta": {
                "title": "Meta",
                "required": [
                    "total"
                ],
                "type": "object",
                "properties": {
                    "total": {
                        "title": "Total",
                        "type": "integer",
                        "description": "Число элементов в результате"
                    }
                }
            },
            "ImageStatus": {
                "title": "ImageStatus",
                "enum": [
                    "new",
                    "created",
                    "failed",
                    "deleted"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "OS": {
                "title": "OS",
                "enum": [
                    "centos",
                    "almalinux",
                    "debian",
                    "bitrix",
                    "ubuntu",
                    "brainycp",
                    "archlinux",
                    "astralinux",
                    "windows",
                    "custom_os",
                    "other"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "ImageOutAPI": {
                "title": "ImageOutAPI",
                "required": [
                    "id",
                    "status",
                    "created_at",
                    "deleted_at",
                    "size",
                    "name",
                    "description",
                    "disk_id",
                    "os",
                    "progress"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string",
                        "description": "Идентификатор образа"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ImageStatus"
                            }
                        ],
                        "description": "Статус образа"
                    },
                    "created_at": {
                        "title": "Created At",
                        "type": "string",
                        "description": "Дата и время создания",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "title": "Deleted At",
                        "type": "string",
                        "description": "Дата и время удаления",
                        "format": "date-time"
                    },
                    "size": {
                        "title": "Size",
                        "type": "integer",
                        "description": "Размер в мегабайтах"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Имя образа"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Описание образа"
                    },
                    "disk_id": {
                        "title": "Disk Id",
                        "type": "integer",
                        "description": "Идентификатор связанного с образом диска"
                    },
                    "location": {
                        "title": "Location",
                        "type": "string",
                        "description": "Локация, в которой создан образ"
                    },
                    "os": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OS"
                            }
                        ],
                        "description": "Операционная система образа"
                    },
                    "progress": {
                        "title": "Progress",
                        "type": "integer",
                        "description": "Процент создания образа"
                    }
                }
            },
            "ImagesOutResponse": {
                "title": "ImagesOutResponse",
                "required": [
                    "meta",
                    "images"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "meta": {
                        "title": "Meta",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Meta"
                            }
                        ],
                        "description": "Вспомогательная информация о возвращаемой сущности"
                    },
                    "images": {
                        "title": "Images",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImageOutAPI"
                        },
                        "description": "Массив объектов Образ"
                    }
                }
            },
            "BaseError": {
                "title": "BaseError",
                "required": [
                    "status_code",
                    "error_code",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "status_code": {
                        "title": "Status Code",
                        "type": "integer"
                    },
                    "error_code": {
                        "title": "Error Code",
                        "type": "string"
                    },
                    "message": {
                        "title": "Message",
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {}
                            }
                        ]
                    },
                    "response_id": {
                        "title": "Response Id",
                        "type": "string"
                    }
                }
            },
            "ImageInAPI": {
                "title": "ImageInAPI",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Имя образа",
                        "default": ""
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Описание образа",
                        "default": ""
                    },
                    "disk_id": {
                        "title": "Disk Id",
                        "type": "integer",
                        "description": "Идентификатор диска, для которого создается образ"
                    }
                },
                "example": {
                    "description": "Мой образ для диска 123",
                    "disk_id": 123
                }
            },
            "ImageOutResponse": {
                "title": "ImageOutResponse",
                "required": [
                    "image"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "image": {
                        "title": "Image",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ImageOutAPI"
                            }
                        ],
                        "description": "Образ"
                    }
                }
            },
            "ImageUpdateAPI": {
                "title": "ImageUpdateAPI",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Имя образа"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Описание образа"
                    }
                },
                "example": {
                    "name": "Имя образа",
                    "description": "Описание образа"
                }
            },
            "URLType": {
                "title": "URLType",
                "enum": [
                    "timeweb",
                    "google_drive",
                    "yandex"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "UrlStatus": {
                "title": "UrlStatus",
                "enum": [
                    "process",
                    "failed",
                    "finished",
                    "already_exists"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "ImageDownloadAPI": {
                "title": "ImageDownloadAPI",
                "required": [
                    "id",
                    "created_at",
                    "image",
                    "type",
                    "status",
                    "progress"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string",
                        "description": "Идентификатор ссылки"
                    },
                    "created_at": {
                        "title": "Created At",
                        "type": "string",
                        "description": "Дата и время создания ссылки",
                        "format": "date-time"
                    },
                    "image": {
                        "title": "Image",
                        "type": "string",
                        "description": "Идентификатор образа"
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/URLType"
                            }
                        ],
                        "description": "Тип ссылки"
                    },
                    "url": {
                        "title": "Url",
                        "maxLength": 2083,
                        "minLength": 1,
                        "type": "string",
                        "description": "Ссылка на скачивание",
                        "format": "uri"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UrlStatus"
                            }
                        ],
                        "description": "Статус создания"
                    },
                    "progress": {
                        "title": "Progress",
                        "type": "integer",
                        "description": "Прогресс загрузки образа"
                    }
                }
            },
            "ImageDownloadsResponse": {
                "title": "ImageDownloadsResponse",
                "required": [
                    "meta",
                    "downloads"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "meta": {
                        "title": "Meta",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Meta"
                            }
                        ],
                        "description": "Вспомогательная информация о возвращаемой сущности"
                    },
                    "downloads": {
                        "title": "Downloads",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImageDownloadAPI"
                        },
                        "description": "Массив объектов \"Ссылка на загрузку\""
                    }
                }
            },
            "ImageUrlAuth": {
                "title": "ImageUrlAuth",
                "required": [
                    "access_token"
                ],
                "type": "object",
                "properties": {
                    "access_token": {
                        "title": "Access Token",
                        "type": "string",
                        "description": "Токен доступа к API облачного хранилища"
                    },
                    "refresh_token": {
                        "title": "Refresh Token",
                        "type": "string",
                        "description": "Токен обновления доступов к API"
                    },
                    "expiry": {
                        "title": "Expiry",
                        "type": "string",
                        "description": "Время истечения работы токена доступа",
                        "format": "date-time"
                    },
                    "token_type": {
                        "title": "Token Type",
                        "type": "string",
                        "description": "Тип токена доступа",
                        "default": "Bearer"
                    }
                },
                "example": {
                    "access_token": "GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd",
                    "token_type": "Bearer"
                }
            },
            "ImageUrlIn": {
                "title": "ImageUrlIn",
                "type": "object",
                "properties": {
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/URLType"
                            }
                        ],
                        "description": "Тип ссылки",
                        "default": "timeweb"
                    },
                    "filename": {
                        "title": "Filename",
                        "type": "string",
                        "description": "Имя файла для загрузки в облачное хранилище"
                    },
                    "auth": {
                        "title": "Auth",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ImageUrlAuth"
                            }
                        ],
                        "description": "Данные для аутентификации в облачном хранилище"
                    }
                },
                "example": {
                    "type": "google_drive",
                    "filename": "my_image_from_timeweb.qcow2",
                    "auth": {
                        "access_token": "GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd",
                        "token_type": "Bearer"
                    }
                }
            },
            "ImageDownloadResponse": {
                "title": "ImageDownloadResponse",
                "required": [
                    "download"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "download": {
                        "title": "Download",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ImageDownloadAPI"
                            }
                        ],
                        "description": "Объект ссылки на загрузку"
                    }
                }
            },
            "meta": {
                "description": "Вспомогательная информация о возвращаемой сущности.",
                "properties": {
                    "total": {
                        "type": "number",
                        "example": 10,
                        "description": "Общее количество элементов в коллекции."
                    }
                },
                "type": "object"
            },
            "rule": {
                "description": "Правило для балансировщика",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого экземпляра правила для балансировщика. Автоматически генерируется при создании.",
                        "example": 1
                    },
                    "balancer_proto": {
                        "type": "string",
                        "description": "Протокол балансировщика.",
                        "enum": [
                            "http",
                            "http2",
                            "https",
                            "tcp"
                        ],
                        "example": "https"
                    },
                    "balancer_port": {
                        "type": "number",
                        "description": "Порт балансировщика.",
                        "example": 80
                    },
                    "server_proto": {
                        "type": "string",
                        "description": "Протокол сервера.",
                        "enum": [
                            "http",
                            "http2",
                            "https",
                            "tcp"
                        ],
                        "example": "https"
                    },
                    "server_port": {
                        "type": "number",
                        "description": "Порт сервера.",
                        "example": 80
                    }
                },
                "required": [
                    "id",
                    "balancer_proto",
                    "balancer_port",
                    "server_proto",
                    "server_port"
                ]
            },
            "balancer": {
                "description": "Балансировщик",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого экземпляра балансировщика. Автоматически генерируется при создании.",
                        "example": 1
                    },
                    "algo": {
                        "type": "string",
                        "description": "Алгоритм переключений балансировщика.",
                        "enum": [
                            "roundrobin",
                            "leastconn"
                        ],
                        "example": "roundrobin"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда был создан балансировщик.",
                        "example": "2022-10-25T15:15:45.000Z"
                    },
                    "fall": {
                        "type": "number",
                        "description": "Порог количества ошибок.",
                        "example": 3
                    },
                    "inter": {
                        "type": "number",
                        "description": "Интервал проверки.",
                        "example": 10
                    },
                    "ip": {
                        "type": "string",
                        "nullable": true,
                        "format": "ipv4",
                        "description": "IP-адрес сетевого интерфейса IPv4.",
                        "example": "1.1.1.1"
                    },
                    "local_ip": {
                        "type": "string",
                        "nullable": true,
                        "format": "ipv4",
                        "description": "Локальный IP-адрес сетевого интерфейса IPv4.",
                        "example": "1.1.1.1"
                    },
                    "is_keepalive": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, выдает ли балансировщик сигнал о проверке жизнеспособности",
                        "example": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Удобочитаемое имя, установленное для балансировщика.",
                        "example": "Cute Quail"
                    },
                    "path": {
                        "type": "string",
                        "description": "Адрес балансировщика.",
                        "example": "/"
                    },
                    "port": {
                        "type": "number",
                        "description": "Порт балансировщика.",
                        "example": 80
                    },
                    "proto": {
                        "type": "string",
                        "description": "Протокол.",
                        "enum": [
                            "http",
                            "http2",
                            "https",
                            "tcp"
                        ],
                        "example": "https"
                    },
                    "rise": {
                        "type": "number",
                        "description": "Порог количества успешных ответов.",
                        "example": 2
                    },
                    "preset_id": {
                        "type": "number",
                        "description": "Идентификатор тарифа.",
                        "example": 5
                    },
                    "is_ssl": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, требуется ли перенаправление на ssl.",
                        "example": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Статус балансировщика.",
                        "enum": [
                            "started",
                            "stoped",
                            "starting",
                            "no_paid"
                        ],
                        "example": "started"
                    },
                    "is_sticky": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, сохраняется ли сессия.",
                        "example": true
                    },
                    "timeout": {
                        "type": "number",
                        "description": "Таймаут ответа балансировщика.",
                        "example": 5
                    },
                    "is_use_proxy": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, выступает ли балансировщик в качестве прокси",
                        "example": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/rule"
                        }
                    },
                    "ips": {
                        "description": "Список ip адресов, привязанных к балансировщику",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": []
                    }
                },
                "required": [
                    "id",
                    "algo",
                    "created_at",
                    "fall",
                    "inter",
                    "ip",
                    "local_ip",
                    "is_keepalive",
                    "name",
                    "path",
                    "port",
                    "proto",
                    "rise",
                    "preset_id",
                    "is_ssl",
                    "status",
                    "is_sticky",
                    "timeout",
                    "is_use_proxy",
                    "rules",
                    "ips"
                ]
            },
            "create-balancer": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Удобочитаемое имя, установленное для балансировщика.",
                        "example": "Cute Quail"
                    },
                    "algo": {
                        "type": "string",
                        "description": "Алгоритм переключений балансировщика.",
                        "enum": [
                            "roundrobin",
                            "leastconn"
                        ],
                        "example": "roundrobin"
                    },
                    "is_sticky": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, сохраняется ли сессия.",
                        "example": true
                    },
                    "is_use_proxy": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, выступает ли балансировщик в качестве прокси",
                        "example": true
                    },
                    "is_ssl": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, требуется ли перенаправление на ssl.",
                        "example": true
                    },
                    "is_keepalive": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, выдает ли балансировщик сигнал о проверке жизнеспособности",
                        "example": true
                    },
                    "proto": {
                        "type": "string",
                        "description": "Протокол.",
                        "enum": [
                            "http",
                            "http2",
                            "https",
                            "tcp"
                        ],
                        "example": "https"
                    },
                    "port": {
                        "type": "number",
                        "description": "Порт балансировщика.",
                        "example": 80
                    },
                    "path": {
                        "type": "string",
                        "description": "Адрес балансировщика.",
                        "example": "/"
                    },
                    "inter": {
                        "type": "number",
                        "description": "Интервал проверки.",
                        "example": 10
                    },
                    "timeout": {
                        "type": "number",
                        "description": "Таймаут ответа балансировщика.",
                        "example": 5
                    },
                    "fall": {
                        "type": "number",
                        "description": "Порог количества ошибок.",
                        "example": 3
                    },
                    "rise": {
                        "type": "number",
                        "description": "Порог количества успешных ответов.",
                        "example": 2
                    },
                    "preset_id": {
                        "type": "number",
                        "description": "Идентификатор тарифа.",
                        "example": 5
                    }
                },
                "type": "object",
                "required": [
                    "algo",
                    "fall",
                    "inter",
                    "is_keepalive",
                    "name",
                    "path",
                    "port",
                    "proto",
                    "rise",
                    "preset_id",
                    "is_ssl",
                    "is_sticky",
                    "timeout",
                    "is_use_proxy"
                ]
            },
            "delete-service-response": {
                "type": "object",
                "properties": {
                    "hash": {
                        "type": "string",
                        "description": "Хеш, который совместно с кодом авторизации надо будет отправить для удаления.",
                        "example": "15095f25-aac3-4d60-a788-96cb5136f186"
                    }
                },
                "required": [
                    "hash"
                ]
            },
            "update-balancer": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Удобочитаемое имя, установленное для балансировщика.",
                        "example": "Cute Quail"
                    },
                    "algo": {
                        "type": "string",
                        "description": "Алгоритм переключений балансировщика.",
                        "enum": [
                            "roundrobin",
                            "leastconn"
                        ],
                        "example": "roundrobin"
                    },
                    "is_sticky": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, сохраняется ли сессия.",
                        "example": true
                    },
                    "is_use_proxy": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, выступает ли балансировщик в качестве прокси",
                        "example": true
                    },
                    "is_ssl": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, требуется ли перенаправление на ssl.",
                        "example": true
                    },
                    "is_keepalive": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, выдает ли балансировщик сигнал о проверке жизнеспособности",
                        "example": true
                    },
                    "proto": {
                        "type": "string",
                        "description": "Протокол.",
                        "enum": [
                            "http",
                            "http2",
                            "https",
                            "tcp"
                        ],
                        "example": "https"
                    },
                    "port": {
                        "type": "number",
                        "description": "Порт балансировщика.",
                        "example": 80
                    },
                    "path": {
                        "type": "string",
                        "description": "Адрес балансировщика.",
                        "example": "/"
                    },
                    "inter": {
                        "type": "number",
                        "description": "Интервал проверки.",
                        "example": 10
                    },
                    "timeout": {
                        "type": "number",
                        "description": "Таймаут ответа балансировщика.",
                        "example": 5
                    },
                    "fall": {
                        "type": "number",
                        "description": "Порог количества ошибок.",
                        "example": 3
                    },
                    "rise": {
                        "type": "number",
                        "description": "Порог количества успешных ответов.",
                        "example": 2
                    },
                    "preset_id": {
                        "type": "number",
                        "description": "Идентификатор тарифа.",
                        "example": 5
                    }
                },
                "type": "object"
            },
            "create-rule": {
                "type": "object",
                "properties": {
                    "balancer_proto": {
                        "type": "string",
                        "description": "Протокол балансировщика.",
                        "enum": [
                            "http",
                            "http2",
                            "https",
                            "tcp"
                        ],
                        "example": "https"
                    },
                    "balancer_port": {
                        "type": "number",
                        "description": "Порт балансировщика.",
                        "example": 80
                    },
                    "server_proto": {
                        "type": "string",
                        "description": "Протокол сервера.",
                        "enum": [
                            "http",
                            "http2",
                            "https",
                            "tcp"
                        ],
                        "example": "https"
                    },
                    "server_port": {
                        "type": "number",
                        "description": "Порт сервера.",
                        "example": 80
                    }
                },
                "required": [
                    "balancer_proto",
                    "balancer_port",
                    "server_proto",
                    "server_port"
                ]
            },
            "update-rule": {
                "type": "object",
                "properties": {
                    "balancer_proto": {
                        "type": "string",
                        "description": "Протокол балансировщика.",
                        "enum": [
                            "http",
                            "http2",
                            "https",
                            "tcp"
                        ],
                        "example": "https"
                    },
                    "balancer_port": {
                        "type": "number",
                        "description": "Порт балансировщика.",
                        "example": 80
                    },
                    "server_proto": {
                        "type": "string",
                        "description": "Протокол сервера.",
                        "enum": [
                            "http",
                            "http2",
                            "https",
                            "tcp"
                        ],
                        "example": "https"
                    },
                    "server_port": {
                        "type": "number",
                        "description": "Порт сервера.",
                        "example": 80
                    }
                },
                "required": [
                    "balancer_proto",
                    "balancer_port",
                    "server_proto",
                    "server_port"
                ]
            },
            "presets-balancer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого экземпляра тарифа базы данных.",
                        "example": 2377
                    },
                    "description": {
                        "type": "string",
                        "description": "Описание тарифа.",
                        "example": "Услуга Балансировщик"
                    },
                    "description_short": {
                        "type": "string",
                        "description": "Краткое описание тарифа.",
                        "example": "Устойчивый"
                    },
                    "bandwidth": {
                        "type": "number",
                        "description": "Пропускная способность тарифа.",
                        "example": 100
                    },
                    "replica_count": {
                        "type": "number",
                        "description": "Количество реплик.",
                        "example": 2
                    },
                    "request_per_second": {
                        "type": "string",
                        "description": "Запросов в секунду.",
                        "example": "10K"
                    },
                    "price": {
                        "type": "number",
                        "description": "Стоимость тарифа базы данных.",
                        "example": 100
                    },
                    "location": {
                        "type": "string",
                        "enum": [
                            "ru-1",
                            "pl-1",
                            "kz-1"
                        ],
                        "description": "Географическое расположение тарифа.",
                        "example": "ru-1"
                    }
                },
                "required": [
                    "id",
                    "description",
                    "description_short",
                    "bandwidth",
                    "replica_count",
                    "request_per_second",
                    "price",
                    "location"
                ]
            },
            "config-parameters": {
                "properties": {
                    "auto_increment_increment": {
                        "type": "string",
                        "description": "Интервал между значениями столбцов с атрибутом `AUTO_INCREMENT` (`mysql5` | `mysql`).",
                        "example": "1"
                    },
                    "auto_increment_offset": {
                        "type": "string",
                        "description": "Начальное значение для столбцов с атрибутом `AUTO_INCREMENT` (`mysql5` | `mysql`).",
                        "example": "1"
                    },
                    "innodb_io_capacity": {
                        "type": "string",
                        "description": "Количество операций ввода-вывода в секунду `IOPS` (`mysql5` | `mysql`).",
                        "example": "200"
                    },
                    "innodb_purge_threads": {
                        "type": "string",
                        "description": "Количество потоков ввода-вывода, используемых для операций очистки (`mysql5` | `mysql`).",
                        "example": "4"
                    },
                    "innodb_read_io_threads": {
                        "type": "string",
                        "description": "Количество потоков ввода-вывода, используемых для операций чтения (`mysql5` | `mysql`).",
                        "example": "4"
                    },
                    "innodb_thread_concurrency": {
                        "type": "string",
                        "description": "Максимальное число потоков, которые могут исполняться (`mysql5` | `mysql`).",
                        "example": "0"
                    },
                    "innodb_write_io_threads": {
                        "type": "string",
                        "description": "Количество потоков ввода-вывода, используемых для операций записи (`mysql5` | `mysql`).",
                        "example": "4"
                    },
                    "join_buffer_size": {
                        "type": "string",
                        "description": "Минимальный размер буфера (`mysql5` | `mysql`).",
                        "example": "262144"
                    },
                    "max_allowed_packet": {
                        "type": "string",
                        "description": "Максимальный размер одного пакета, строки или параметра, отправляемого функцией `mysql_stmt_send_long_data()` (`mysql5` | `mysql`).",
                        "example": "16777216"
                    },
                    "max_heap_table_size": {
                        "type": "string",
                        "description": "Максимальный размер пользовательских MEMORY-таблиц (`mysql5` | `mysql`).",
                        "example": "16777216"
                    },
                    "autovacuum_analyze_scale_factor": {
                        "type": "string",
                        "description": "Доля измененных или удаленных записей в таблице, при которой процесс автоочистки выполнит команду `ANALYZE` (`postgres`).",
                        "example": "0.0001"
                    },
                    "bgwriter_delay": {
                        "type": "string",
                        "description": "Задержка между запусками процесса фоновой записи (`postgres`).",
                        "example": "200"
                    },
                    "bgwriter_lru_maxpages": {
                        "type": "string",
                        "description": "Максимальное число элементов буферного кеша (`postgres`).",
                        "example": "100"
                    },
                    "deadlock_timeout": {
                        "type": "string",
                        "description": "Время ожидания, по истечении которого будет выполняться проверка состояния перекрестной блокировки (`postgres`).",
                        "example": "100"
                    },
                    "gin_pending_list_limit": {
                        "type": "string",
                        "description": "Максимальный размер очереди записей индекса `GIN` (`postgres`).",
                        "example": "4194304"
                    },
                    "idle_in_transaction_session_timeout": {
                        "type": "string",
                        "description": "Время простоя открытой транзакции, при превышении которого будет завершена сессия с этой транзакцией (`postgres`).",
                        "example": "0"
                    },
                    "idle_session_timeout": {
                        "type": "string",
                        "description": "Время простоя не открытой транзакции, при превышении которого будет завершена сессия с этой транзакцией (`postgres`).",
                        "example": "0"
                    },
                    "join_collapse_limit": {
                        "type": "string",
                        "description": "Значение количества элементов в списке `FROM` при превышении которого, планировщик будет переносить в список явные инструкции `JOIN` (`postgres`).",
                        "example": "8"
                    },
                    "lock_timeout": {
                        "type": "string",
                        "description": "Время ожидания освобождения блокировки (`postgres`).",
                        "example": "0"
                    },
                    "max_prepared_transactions": {
                        "type": "string",
                        "description": "Максимальное число транзакций, которые могут одновременно находиться в подготовленном состоянии (`postgres`).",
                        "example": "0"
                    }
                }
            },
            "db": {
                "description": "База данных",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого экземпляра базы данных. Автоматически генерируется при создании.",
                        "example": 1
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда была создана база данных.",
                        "example": "2021-02-25T11:04:15Z"
                    },
                    "account_id": {
                        "type": "string",
                        "description": "Идентификатор пользователя",
                        "example": "cp78562"
                    },
                    "login": {
                        "type": "string",
                        "description": "Логин для подключения к базе данных.",
                        "example": "test_user"
                    },
                    "password": {
                        "type": "string",
                        "description": "Пароль для подключения к базе данных.",
                        "example": "password"
                    },
                    "name": {
                        "type": "string",
                        "description": "Название базы данных.",
                        "example": "default_db"
                    },
                    "host": {
                        "type": "string",
                        "nullable": true,
                        "description": "Хост.",
                        "example": "test.ru"
                    },
                    "type": {
                        "type": "string",
                        "description": "Тип базы данных.",
                        "enum": [
                            "mysql",
                            "mysql5",
                            "postgres",
                            "redis",
                            "mongodb"
                        ],
                        "example": "mysql"
                    },
                    "hash_type": {
                        "type": "string",
                        "nullable": true,
                        "description": "Тип хеширования базы данных (mysql5 | mysql | postgres).",
                        "enum": [
                            "caching_sha2",
                            "mysql_native",
                            null
                        ],
                        "example": "caching_sha2"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Порт",
                        "example": 3000
                    },
                    "ip": {
                        "type": "string",
                        "nullable": true,
                        "format": "ipv4",
                        "description": "IP-адрес сетевого интерфейса IPv4.",
                        "example": "127.0.0.1"
                    },
                    "local_ip": {
                        "type": "string",
                        "nullable": true,
                        "format": "ipv4",
                        "description": "IP-адрес локального сетевого интерфейса IPv4.",
                        "example": "127.0.0.1"
                    },
                    "status": {
                        "type": "string",
                        "description": "Текущий статус базы данных.",
                        "enum": [
                            "started",
                            "starting",
                            "stoped",
                            "no_paid"
                        ],
                        "example": "started"
                    },
                    "preset_id": {
                        "description": "Идентификатор тарифа.",
                        "type": "integer",
                        "example": 5
                    },
                    "disk_stats": {
                        "type": "object",
                        "nullable": true,
                        "description": "Статистика использования диска базы данных.",
                        "properties": {
                            "size": {
                                "type": "number",
                                "description": "Размер (в Кб) диска базы данных.",
                                "example": 10485760
                            },
                            "used": {
                                "type": "number",
                                "description": "Размер (в Кб) использованного пространства диска базы данных.",
                                "example": 486.11328125
                            }
                        },
                        "required": [
                            "size",
                            "used"
                        ]
                    },
                    "config_parameters": {
                        "$ref": "#/components/schemas/config-parameters"
                    },
                    "is_only_local_ip_access": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, доступна ли база данных только по локальному IP адресу.",
                        "example": false
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "account_id",
                    "login",
                    "password",
                    "name",
                    "host",
                    "type",
                    "hash_type",
                    "port",
                    "ip",
                    "local_ip",
                    "status",
                    "preset_id",
                    "disk_stats",
                    "config_parameters",
                    "is_only_local_ip_access"
                ]
            },
            "create-db": {
                "properties": {
                    "login": {
                        "type": "string",
                        "description": "Логин для подключения к базе данных.",
                        "example": "test_user"
                    },
                    "password": {
                        "type": "string",
                        "description": "Пароль для подключения к базе данных.",
                        "example": "password"
                    },
                    "name": {
                        "type": "string",
                        "description": "Название базы данных.",
                        "example": "default_db"
                    },
                    "type": {
                        "type": "string",
                        "description": "Тип базы данных.",
                        "enum": [
                            "mysql",
                            "mysql5",
                            "postgres",
                            "redis",
                            "mongodb"
                        ],
                        "example": "mysql"
                    },
                    "hash_type": {
                        "type": "string",
                        "description": "Тип хеширования базы данных (mysql5 | mysql | postgres).",
                        "enum": [
                            "caching_sha2",
                            "mysql_native"
                        ],
                        "example": "caching_sha2"
                    },
                    "preset_id": {
                        "description": "Идентификатор тарифа.",
                        "type": "integer",
                        "example": 5
                    },
                    "config_parameters": {
                        "$ref": "#/components/schemas/config-parameters"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "password",
                    "preset_id",
                    "type"
                ]
            },
            "update-db": {
                "description": "Дополнительные параметры конфигурации базы данных.",
                "properties": {
                    "password": {
                        "type": "string",
                        "description": "Пароль для подключения к базе данных.",
                        "example": "password"
                    },
                    "name": {
                        "type": "string",
                        "description": "Название базы данных.",
                        "example": "default_db"
                    },
                    "preset_id": {
                        "description": "Идентификатор тарифа.",
                        "type": "integer",
                        "example": 5
                    },
                    "config_parameters": {
                        "$ref": "#/components/schemas/config-parameters"
                    },
                    "is_external_ip": {
                        "description": "Использовать или нет внешний ip.",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "backup": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Идентификатор резервной копии.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Название резервной копии.",
                        "example": "test_name"
                    },
                    "comment": {
                        "type": "string",
                        "nullable": true,
                        "description": "Комментарий.",
                        "example": "test_comment"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Дата создания.",
                        "example": "2022-10-25T15:15:45.000Z"
                    },
                    "status": {
                        "type": "string",
                        "description": "Статус бэкапа.",
                        "enum": [
                            "precreate",
                            "delete",
                            "shutdown",
                            "recover",
                            "create",
                            "fail",
                            "done"
                        ],
                        "example": "recover"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Размер резервной копии (Мб).",
                        "example": 200
                    },
                    "type": {
                        "type": "string",
                        "description": "Тип бэкапа.",
                        "enum": [
                            "manual",
                            "auto"
                        ],
                        "example": "manual"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "comment",
                    "created_at",
                    "status",
                    "size",
                    "type"
                ],
                "type": "object"
            },
            "response-id_response_id": {
                "description": "Идентификатор запроса, который можно указывать при обращении в службу технической поддержки, чтобы помочь определить проблему.",
                "type": "string",
                "format": "uuid",
                "example": "15095f25-aac3-4d60-a788-96cb5136f186"
            },
            "presets-dbs": {
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого экземпляра тарифа базы данных.",
                        "example": 2377
                    },
                    "description": {
                        "type": "string",
                        "description": "Описание тарифа.",
                        "example": "Услуга Управляемые базы данных"
                    },
                    "description_short": {
                        "type": "string",
                        "description": "Краткое описание тарифа.",
                        "example": "Тариф 3"
                    },
                    "cpu": {
                        "type": "number",
                        "description": "Описание процессора тарифа.",
                        "example": 2
                    },
                    "ram": {
                        "type": "number",
                        "description": "Описание ОЗУ тарифа.",
                        "example": 8
                    },
                    "disk": {
                        "type": "number",
                        "description": "Описание диска тарифа.",
                        "example": 30
                    },
                    "type": {
                        "type": "string",
                        "description": "Тип тарифа базы данных",
                        "enum": [
                            "mysql",
                            "mysql5",
                            "postgres",
                            "redis",
                            "mongodb"
                        ],
                        "example": "mysql"
                    },
                    "price": {
                        "type": "number",
                        "description": "Стоимость тарифа базы данных",
                        "example": 100
                    },
                    "location": {
                        "type": "string",
                        "enum": [
                            "ru-1",
                            "pl-1",
                            "kz-1"
                        ],
                        "description": "Географическое расположение тарифа.",
                        "example": "ru-1"
                    }
                }
            },
            "dedicated-server": {
                "description": "Выделенный сервер",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого экземпляра выделенного сервера. Автоматически генерируется при создании.",
                        "example": 1
                    },
                    "cpu_description": {
                        "type": "string",
                        "description": "Описание параметров процессора выделенного сервера.",
                        "example": "Intel Xeon E3-1240v3"
                    },
                    "hdd_description": {
                        "type": "string",
                        "description": "Описание параметров жёсткого диска выделенного сервера.",
                        "example": "2 x 1 ТБ HDD"
                    },
                    "ram_description": {
                        "type": "string",
                        "description": "Описание ОЗУ выделенного сервера.",
                        "example": "8 Гб RAM"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда был создан выделенный сервер.",
                        "example": "2022-10-25T15:15:45.000Z"
                    },
                    "ip": {
                        "type": "string",
                        "format": "ipv4",
                        "nullable": true,
                        "description": "IP-адрес сетевого интерфейса IPv4.",
                        "example": "1.1.1.1"
                    },
                    "ipmi_ip": {
                        "type": "string",
                        "format": "ipv4",
                        "nullable": true,
                        "description": "IP-адрес сетевого интерфейса IPMI.",
                        "example": "1.1.1.1"
                    },
                    "ipmi_login": {
                        "type": "string",
                        "nullable": true,
                        "description": "Логин, используемый для входа в IPMI-консоль.",
                        "example": "ipmi_login"
                    },
                    "ipmi_password": {
                        "type": "string",
                        "nullable": true,
                        "description": "Пароль, используемый для входа в IPMI-консоль.",
                        "example": "ipmi_password"
                    },
                    "ipv6": {
                        "type": "string",
                        "format": "ipv6",
                        "nullable": true,
                        "description": "IP-адрес сетевого интерфейса IPv6.",
                        "example": "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
                    },
                    "node_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Внутренний дополнительный идентификатор сервера.",
                        "example": 68
                    },
                    "name": {
                        "type": "string",
                        "description": "Удобочитаемое имя, установленное для выделенного сервера.",
                        "example": "Cute Quail"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Комментарий к выделенному серверу.",
                        "example": "Development Server"
                    },
                    "vnc_pass": {
                        "type": "string",
                        "nullable": true,
                        "description": "Пароль для подключения к VNC-консоли выделенного сервера.",
                        "example": "vnc_pass"
                    },
                    "status": {
                        "type": "string",
                        "description": "Строка состояния, указывающая состояние выделенного сервера. Может быть «installing», «installed», «on» или «off».",
                        "enum": [
                            "installing",
                            "installed",
                            "on",
                            "off"
                        ],
                        "example": "installing"
                    },
                    "os_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Уникальный идентификатор операционной системы, установленной на выделенный сервер.",
                        "example": 44
                    },
                    "cp_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Уникальный идентификатор панели управления, установленной на выделенный сервер.",
                        "example": 16
                    },
                    "bandwidth_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Уникальный идентификатор интернет-канала, установленного на выделенный сервер.",
                        "example": 11
                    },
                    "network_drive_id": {
                        "type": "array",
                        "nullable": true,
                        "description": "Массив уникальных идентификаторов сетевых дисков, подключенных к выделенному серверу.",
                        "items": {
                            "type": "number"
                        },
                        "example": [
                            12,
                            11
                        ]
                    },
                    "additional_ip_addr_id": {
                        "type": "array",
                        "nullable": true,
                        "description": "Массив уникальных идентификаторов дополнительных IP-адресов, подключенных к выделенному серверу.",
                        "items": {
                            "type": "number"
                        },
                        "example": [
                            2,
                            7
                        ]
                    },
                    "plan_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Уникальный идентификатор списка дополнительных услуг выделенного сервера.",
                        "example": 2377
                    },
                    "price": {
                        "type": "number",
                        "description": "Стоимость выделенного сервера.",
                        "example": 5490
                    },
                    "location": {
                        "type": "string",
                        "description": "Локация сервера.",
                        "enum": [
                            "ru-1",
                            "pl-1",
                            "kz-1"
                        ],
                        "example": "ru-1"
                    },
                    "autoinstall_ready": {
                        "type": "number",
                        "description": "Количество готовых к автоматической выдаче серверов. Если значение равно 0, сервер будет установлен через инженеров.",
                        "example": 2
                    }
                },
                "required": [
                    "id",
                    "cpu_description",
                    "hdd_description",
                    "ram_description",
                    "created_at",
                    "ip",
                    "ipmi_ip",
                    "ipmi_login",
                    "ipmi_password",
                    "ipv6",
                    "node_id",
                    "name",
                    "comment",
                    "vnc_pass",
                    "status",
                    "os_id",
                    "cp_id",
                    "bandwidth_id",
                    "network_drive_id",
                    "additional_ip_addr_id",
                    "plan_id",
                    "price",
                    "location",
                    "autoinstall_ready"
                ]
            },
            "create-dedicated-server": {
                "properties": {
                    "plan_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор списка дополнительных услуг выделенного сервера.",
                        "example": 2377
                    },
                    "preset_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор тарифа выделенного сервера.",
                        "example": 81
                    },
                    "os_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Уникальный идентификатор операционной системы, которая будет установлена на выделенный сервер.",
                        "example": 188
                    },
                    "cp_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Уникальный идентификатор панели управления, которая будет установлена на выделенный сервер.",
                        "example": 199
                    },
                    "bandwidth_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор интернет-канала, который будет установлен на выделенный сервер.",
                        "example": 483
                    },
                    "network_drive_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор сетевого диска, который будет установлен на выделенный сервер.",
                        "example": 483
                    },
                    "additional_ip_addr_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Уникальный идентификатор дополнительного IP-адреса, который будет установлен на выделенный сервер.",
                        "example": 1
                    },
                    "payment_period": {
                        "type": "string",
                        "enum": [
                            "P1M",
                            "P3M",
                            "P6M",
                            "P1Y"
                        ],
                        "description": "Период оплаты.",
                        "example": "P1M"
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Удобочитаемое имя выделенного сервера. Максимальная длина — 255 символов, имя должно быть уникальным.",
                        "example": "name"
                    },
                    "comment": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Комментарий к выделенному серверу. Максимальная длина — 255 символов.",
                        "example": "comment"
                    }
                },
                "required": [
                    "plan_id",
                    "preset_id",
                    "payment_period",
                    "name",
                    "location"
                ]
            },
            "dedicated-server-preset": {
                "description": "Выделенный сервер",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор тарифа выделенного сервера.",
                        "example": 3017
                    },
                    "description": {
                        "type": "string",
                        "description": "Описание характеристик тарифа выделенного сервера.",
                        "example": "Gold 6208U / 64 / 1N"
                    },
                    "is_ipmi_enabled": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, доступен ли IPMI у данного тарифа.",
                        "example": true
                    },
                    "cpu": {
                        "type": "object",
                        "description": "Объект, содержащий информацию о процессоре выделенного сервера.",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "Описание характеристик процессора выделенного сервера.",
                                "example": "Intel Xeon Gold 6208U\\r\\n    (16 ядер, 2.9-3.9 ГГц, 32 потока)"
                            },
                            "description_short": {
                                "type": "string",
                                "description": "Краткое описание характеристик процессора выделенного сервера.",
                                "example": "Intel Xeon Gold 6208U"
                            },
                            "count": {
                                "type": "number",
                                "description": "Количество ядер процессора выделенного сервера.",
                                "example": 16
                            }
                        },
                        "required": [
                            "description",
                            "description_short",
                            "count"
                        ]
                    },
                    "disk": {
                        "type": "object",
                        "description": "Объект, содержащий информацию о диске выделенного сервера.",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "Описание характеристик диска выделенного сервера.",
                                "example": "2 x 1 Тб NVMe"
                            },
                            "count": {
                                "type": "number",
                                "description": "Количество дисков выделенного сервера.",
                                "example": 16
                            }
                        },
                        "required": [
                            "description",
                            "count"
                        ]
                    },
                    "price": {
                        "type": "number",
                        "description": "Стоимость тарифа выделенного сервера",
                        "example": 100
                    },
                    "memory": {
                        "type": "object",
                        "description": "Объект, содержащий информацию об ОЗУ выделенного сервера.",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "Описание характеристик ОЗУ выделенного сервера.",
                                "example": "8 ГБ RAM"
                            },
                            "count": {
                                "type": "number",
                                "description": "Количество ОЗУ выделенного сервера.",
                                "example": 1
                            },
                            "size": {
                                "type": "number",
                                "description": "Размер (в Мб) ОЗУ выделенного сервера.",
                                "example": 65536
                            }
                        },
                        "required": [
                            "description",
                            "count",
                            "size"
                        ]
                    },
                    "location": {
                        "type": "string",
                        "description": "Локация.",
                        "enum": [
                            "ru-1",
                            "ru-2",
                            "kz-1",
                            "pl-1"
                        ],
                        "example": "ru-1"
                    }
                },
                "required": [
                    "id",
                    "description",
                    "is_ipmi_enabled",
                    "cpu",
                    "disk",
                    "memory",
                    "location"
                ]
            },
            "dedicated-server-additional-service": {
                "description": "Дополнительная услуга для выделенного сервера",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор дополнительной услуги для выделенного сервера.",
                        "example": 27
                    },
                    "price": {
                        "type": "number",
                        "description": "Стоимость (в рублях) дополнительной услуги для выделенного сервера.",
                        "example": 55
                    },
                    "period": {
                        "type": "string",
                        "enum": [
                            "P1D",
                            "P1M",
                            "P3M",
                            "P6M",
                            "P1Y",
                            "forever"
                        ],
                        "description": "Период оплаты.",
                        "example": "P1M"
                    },
                    "description": {
                        "type": "string",
                        "description": "Описание дополнительной услуги выделенного сервера.",
                        "example": "Дополнительный IPv6 адрес"
                    },
                    "short_description": {
                        "type": "string",
                        "description": "Краткое описание дополнительной услуги выделенного сервера.",
                        "example": "IPv6 адрес"
                    },
                    "name": {
                        "type": "string",
                        "format": "unique",
                        "description": "Уникально имя дополнительной услуги выделенного сервера.",
                        "example": "ipv6"
                    }
                },
                "required": [
                    "id",
                    "price",
                    "period",
                    "description",
                    "short_description",
                    "name"
                ]
            },
            "ClusterOut": {
                "title": "ClusterOut",
                "required": [
                    "id",
                    "name",
                    "created_at",
                    "status",
                    "description",
                    "ha",
                    "k8s_version",
                    "network_driver",
                    "ingress",
                    "preset_id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer",
                        "description": "Уникальный идентификатор кластера"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Название"
                    },
                    "created_at": {
                        "title": "Created At",
                        "type": "string",
                        "description": "Дата и время создания кластера в формате ISO8601",
                        "format": "date-time"
                    },
                    "status": {
                        "title": "Status",
                        "type": "string",
                        "description": "Статус"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Описание"
                    },
                    "ha": {
                        "title": "Ha",
                        "type": "boolean",
                        "description": "Описание появится позже"
                    },
                    "k8s_version": {
                        "title": "K8S Version",
                        "type": "string",
                        "description": "Версия Kubernetes"
                    },
                    "network_driver": {
                        "title": "Network Driver",
                        "type": "string",
                        "description": "Используемый сетевой драйвер"
                    },
                    "ingress": {
                        "title": "Ingress",
                        "type": "boolean",
                        "description": "Логическое значение, показывающее, включен ли Ingress"
                    },
                    "preset_id": {
                        "title": "Preset Id",
                        "type": "integer",
                        "description": "Идентификатор тарифа мастер-ноды"
                    },
                    "cpu": {
                        "title": "Cpu",
                        "type": "integer",
                        "description": "Общее количество ядер",
                        "default": 0
                    },
                    "ram": {
                        "title": "Ram",
                        "type": "integer",
                        "description": "Общее количество памяти",
                        "default": 0
                    },
                    "disk": {
                        "title": "Disk",
                        "type": "integer",
                        "description": "Общее дисковое пространство",
                        "default": 0
                    }
                }
            },
            "ClustersResponse": {
                "title": "ClustersResponse",
                "required": [
                    "meta",
                    "clusters"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "meta": {
                        "title": "Meta",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Meta"
                            }
                        ],
                        "description": "Вспомогательная информация о возвращаемой сущности"
                    },
                    "clusters": {
                        "title": "Clusters",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClusterOut"
                        },
                        "description": "Массив объектов Кластер"
                    }
                }
            },
            "schemas-BaseError": {
                "title": "BaseError",
                "required": [
                    "status_code",
                    "error_code",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "status_code": {
                        "title": "Status Code",
                        "type": "integer"
                    },
                    "error_code": {
                        "title": "Error Code",
                        "type": "string"
                    },
                    "message": {
                        "title": "Message",
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {}
                            }
                        ]
                    },
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "default": "9c38a13d-ef14-45c7-a23a-1429f6a03824"
                    }
                }
            },
            "NodeGroupIn": {
                "title": "NodeGroupIn",
                "required": [
                    "name",
                    "preset_id",
                    "node_count"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Название группы"
                    },
                    "preset_id": {
                        "title": "Preset Id",
                        "type": "integer",
                        "description": "Идентификатор тарифа воркер-ноды"
                    },
                    "node_count": {
                        "title": "Node Count",
                        "minimum": 1,
                        "type": "integer",
                        "description": "Количество нод в группе"
                    }
                },
                "example": {
                    "name": "Новая группа нод",
                    "preset_id": 399,
                    "node_count": 1
                }
            },
            "ClusterIn": {
                "title": "ClusterIn",
                "required": [
                    "name",
                    "ha",
                    "k8s_version",
                    "network_driver",
                    "ingress",
                    "preset_id"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Название кластера"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Описание кластера",
                        "default": ""
                    },
                    "ha": {
                        "title": "Ha",
                        "type": "boolean",
                        "description": "Описание появится позднее"
                    },
                    "k8s_version": {
                        "title": "K8S Version",
                        "type": "string",
                        "description": "Версия Kubernetes"
                    },
                    "network_driver": {
                        "title": "Network Driver",
                        "type": "string",
                        "description": "Тип используемого сетевого драйвера в кластере"
                    },
                    "ingress": {
                        "title": "Ingress",
                        "type": "boolean",
                        "description": "Логическое значение, которое показывает, использовать ли Ingress в кластере"
                    },
                    "preset_id": {
                        "title": "Preset Id",
                        "type": "integer",
                        "description": "Идентификатор тарифа мастер-ноды"
                    },
                    "worker_groups": {
                        "title": "Worker Groups",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NodeGroupIn"
                        },
                        "description": "Группы воркеров в кластере",
                        "default": [
                            {
                                "name": "default",
                                "preset_id": 399,
                                "node_count": 1
                            }
                        ]
                    }
                },
                "example": {
                    "name": "Friendly Wiles",
                    "description": "Новый кластер кубернетес",
                    "ha": false,
                    "k8s_version": "v1.22.16",
                    "network_driver": "canal",
                    "ingress": true,
                    "preset_id": 403,
                    "worker_groups": [
                        {
                            "name": "Новая группа нод",
                            "preset_id": 399,
                            "node_count": 1
                        }
                    ]
                }
            },
            "ClusterResponse": {
                "title": "ClusterResponse",
                "required": [
                    "cluster"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "cluster": {
                        "title": "Cluster",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ClusterOut"
                            }
                        ],
                        "description": "Кластер"
                    }
                }
            },
            "ClusterEdit": {
                "title": "ClusterEdit",
                "type": "object",
                "properties": {
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Новое описание кластера",
                        "example": "new description"
                    }
                }
            },
            "Resource": {
                "title": "Resource",
                "type": "object",
                "properties": {
                    "requested": {
                        "title": "Requested",
                        "type": "number",
                        "description": "Запрошенное количество ресурса",
                        "default": 0
                    },
                    "allocatable": {
                        "title": "Allocatable",
                        "type": "number",
                        "description": "Доступное количество",
                        "default": 0
                    },
                    "capacity": {
                        "title": "Capacity",
                        "type": "number",
                        "description": "Общее количество",
                        "default": 0
                    },
                    "used": {
                        "title": "Used",
                        "type": "number",
                        "description": "Используемое количество",
                        "default": 0
                    }
                }
            },
            "Resources": {
                "title": "Resources",
                "type": "object",
                "properties": {
                    "nodes": {
                        "title": "Nodes",
                        "type": "integer",
                        "description": "Количество нод",
                        "default": 0
                    },
                    "cores": {
                        "title": "Cores",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Resource"
                            }
                        ],
                        "description": "Процессорный ресурс",
                        "default": {
                            "requested": 0,
                            "allocatable": 0,
                            "capacity": 0,
                            "used": 0
                        }
                    },
                    "memory": {
                        "title": "Memory",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Resource"
                            }
                        ],
                        "description": "Ресурс по памяти",
                        "default": {
                            "requested": 0,
                            "allocatable": 0,
                            "capacity": 0,
                            "used": 0
                        }
                    },
                    "pods": {
                        "title": "Pods",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Resource"
                            }
                        ],
                        "description": "Поды в кластере",
                        "default": {
                            "requested": 0,
                            "allocatable": 0,
                            "capacity": 0,
                            "used": 0
                        }
                    }
                }
            },
            "ResourcesResponse": {
                "title": "ResourcesResponse",
                "required": [
                    "resources"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "resources": {
                        "title": "Resources",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Resources"
                            }
                        ],
                        "description": "Ресурсы кластера"
                    }
                }
            },
            "NodeGroupOut": {
                "title": "NodeGroupOut",
                "required": [
                    "id",
                    "name",
                    "created_at",
                    "preset_id",
                    "node_count"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer",
                        "description": "Уникальный идентификатор группы"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Название группы"
                    },
                    "created_at": {
                        "title": "Created At",
                        "type": "string",
                        "description": "Дата и время создания группы в формате ISO8601",
                        "format": "date-time"
                    },
                    "preset_id": {
                        "title": "Preset Id",
                        "type": "integer",
                        "description": "Идентификатор тарифа мастер-ноды"
                    },
                    "node_count": {
                        "title": "Node Count",
                        "type": "integer",
                        "description": "Количество нод в группе"
                    }
                }
            },
            "NodeGroupsResponse": {
                "title": "NodeGroupsResponse",
                "required": [
                    "meta",
                    "node_groups"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "meta": {
                        "title": "Meta",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Meta"
                            }
                        ],
                        "description": "Вспомогательная информация о возвращаемой сущности"
                    },
                    "node_groups": {
                        "title": "Node Groups",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NodeGroupOut"
                        },
                        "description": "Массив объектов Группа нод"
                    }
                }
            },
            "NodeGroupResponse": {
                "title": "NodeGroupResponse",
                "required": [
                    "node_group"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "node_group": {
                        "title": "Node Group",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeGroupOut"
                            }
                        ],
                        "description": "Группа нод"
                    }
                }
            },
            "NodeOut": {
                "title": "NodeOut",
                "required": [
                    "id",
                    "created_at",
                    "type",
                    "group_id",
                    "status",
                    "preset_id",
                    "cpu",
                    "ram",
                    "disk",
                    "network"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer",
                        "description": "Уникальный идентификатор ноды"
                    },
                    "created_at": {
                        "title": "Created At",
                        "type": "string",
                        "description": "Дата и время создания ноды в формате ISO8601",
                        "format": "date-time"
                    },
                    "type": {
                        "title": "Type",
                        "type": "string",
                        "description": "Тип ноды"
                    },
                    "group_id": {
                        "title": "Group Id",
                        "type": "integer",
                        "description": "Идентификатор группы нод"
                    },
                    "status": {
                        "title": "Status",
                        "type": "string",
                        "description": "Статус"
                    },
                    "preset_id": {
                        "title": "Preset Id",
                        "type": "integer",
                        "description": "Идентификатор тарифа ноды"
                    },
                    "cpu": {
                        "title": "Cpu",
                        "type": "integer",
                        "description": "Количество ядер"
                    },
                    "ram": {
                        "title": "Ram",
                        "type": "integer",
                        "description": "Количество памяти"
                    },
                    "disk": {
                        "title": "Disk",
                        "type": "integer",
                        "description": "Количество пространства"
                    },
                    "network": {
                        "title": "Network",
                        "type": "integer",
                        "description": "Пропускная способность сети"
                    }
                }
            },
            "NodesResponse": {
                "title": "NodesResponse",
                "required": [
                    "meta",
                    "nodes"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "meta": {
                        "title": "Meta",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Meta"
                            }
                        ],
                        "description": "Вспомогательная информация о возвращаемой сущности"
                    },
                    "nodes": {
                        "title": "Nodes",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NodeOut"
                        },
                        "description": "Массив объектов Нода"
                    }
                }
            },
            "NodeCount": {
                "title": "NodeCount",
                "required": [
                    "count"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "minimum": 1,
                        "type": "integer",
                        "description": "Количество нод",
                        "example": 2
                    }
                }
            },
            "K8SVersionsResponse": {
                "title": "K8SVersionsResponse",
                "required": [
                    "meta",
                    "k8s_versions"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "meta": {
                        "title": "Meta",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Meta"
                            }
                        ],
                        "description": "Вспомогательная информация о возвращаемой сущности"
                    },
                    "k8s_versions": {
                        "title": "K8S Versions",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Массив версий k8s"
                    }
                }
            },
            "NetworkDriversResponse": {
                "title": "NetworkDriversResponse",
                "required": [
                    "meta",
                    "network_drivers"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "meta": {
                        "title": "Meta",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Meta"
                            }
                        ],
                        "description": "Вспомогательная информация о возвращаемой сущности"
                    },
                    "network_drivers": {
                        "title": "Network Drivers",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Массив сетевых драйверов k8s"
                    }
                }
            },
            "WorkerPresetOutApi": {
                "title": "WorkerPresetOutApi",
                "required": [
                    "id",
                    "description",
                    "description_short",
                    "price",
                    "cpu",
                    "ram",
                    "disk",
                    "network"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer",
                        "description": "Уникальный идентификатор тарифа"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Описание тарифа"
                    },
                    "description_short": {
                        "title": "Description Short",
                        "type": "string",
                        "description": "Краткое описание тарифа"
                    },
                    "price": {
                        "title": "Price",
                        "type": "number",
                        "description": "Стоимость"
                    },
                    "cpu": {
                        "title": "Cpu",
                        "type": "integer",
                        "description": "Количество ядер ноды"
                    },
                    "ram": {
                        "title": "Ram",
                        "type": "integer",
                        "description": "Количество памяти ноды"
                    },
                    "disk": {
                        "title": "Disk",
                        "type": "integer",
                        "description": "Количество пространства на ноде"
                    },
                    "network": {
                        "title": "Network",
                        "type": "integer",
                        "description": "Пропускная способность ноды"
                    },
                    "type": {
                        "title": "Type",
                        "enum": [
                            "worker"
                        ],
                        "type": "string",
                        "description": "Тип тарифа",
                        "default": "worker"
                    }
                }
            },
            "MasterPresetOutApi": {
                "title": "MasterPresetOutApi",
                "required": [
                    "id",
                    "description",
                    "description_short",
                    "price",
                    "cpu",
                    "ram",
                    "disk",
                    "network"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer",
                        "description": "Уникальный идентификатор тарифа"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Описание тарифа"
                    },
                    "description_short": {
                        "title": "Description Short",
                        "type": "string",
                        "description": "Краткое описание тарифа"
                    },
                    "price": {
                        "title": "Price",
                        "type": "number",
                        "description": "Стоимость"
                    },
                    "cpu": {
                        "title": "Cpu",
                        "type": "integer",
                        "description": "Количество ядер ноды"
                    },
                    "ram": {
                        "title": "Ram",
                        "type": "integer",
                        "description": "Количество памяти ноды"
                    },
                    "disk": {
                        "title": "Disk",
                        "type": "integer",
                        "description": "Количество пространства на ноде"
                    },
                    "network": {
                        "title": "Network",
                        "type": "integer",
                        "description": "Пропускная способность ноды"
                    },
                    "type": {
                        "title": "Type",
                        "enum": [
                            "master"
                        ],
                        "type": "string",
                        "description": "Тип тарифа",
                        "default": "master"
                    },
                    "limit": {
                        "title": "Limit",
                        "type": "integer",
                        "description": "Ограничение по количеству воркер-нод в кластере"
                    }
                }
            },
            "PresetsResponse": {
                "title": "PresetsResponse",
                "required": [
                    "meta",
                    "k8s_presets"
                ],
                "type": "object",
                "properties": {
                    "response_id": {
                        "title": "Response Id",
                        "type": "string",
                        "description": "Идентификатор запроса"
                    },
                    "meta": {
                        "title": "Meta",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Meta"
                            }
                        ],
                        "description": "Вспомогательная информация о возвращаемой сущности"
                    },
                    "k8s_presets": {
                        "title": "K8S Presets",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/WorkerPresetOutApi"
                                },
                                {
                                    "$ref": "#/components/schemas/MasterPresetOutApi"
                                }
                            ],
                            "discriminator": {
                                "propertyName": "type",
                                "mapping": {
                                    "worker": "#/components/schemas/WorkerPresetOutApi",
                                    "master": "#/components/schemas/MasterPresetOutApi"
                                }
                            }
                        },
                        "description": "Массив тарифов k8s"
                    }
                }
            },
            "vds": {
                "description": "Сервер",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого экземпляра сервера. Автоматически генерируется при создании.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Удобочитаемое имя, установленное для выделенного сервера.",
                        "example": "Cute Quail"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Комментарий к выделенному серверу.",
                        "example": "Development Server"
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Дата создания сервера в формате ISO8061.",
                        "example": "2021-02-25T11:04:15Z"
                    },
                    "os": {
                        "type": "object",
                        "description": "Операционная система сервера.",
                        "properties": {
                            "id": {
                                "type": "number",
                                "description": "Уникальный идентификатор операционной системы.",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "description": "Тип операционной системы.",
                                "enum": [
                                    "bitrix",
                                    "brainycp",
                                    "centos",
                                    "debian",
                                    "fedora",
                                    "freebsd",
                                    "gentoo",
                                    "routeros",
                                    "ubuntu",
                                    "windows"
                                ]
                            },
                            "version": {
                                "type": "string",
                                "nullable": true,
                                "description": "Версия операционной системы.",
                                "example": "18.04"
                            }
                        },
                        "required": [
                            "id",
                            "name",
                            "version"
                        ]
                    },
                    "software": {
                        "type": "object",
                        "description": "ПО из маркетплейса",
                        "nullable": true,
                        "properties": {
                            "id": {
                                "type": "number",
                                "description": "Уникальный идентификатор ПО из маркетплейса",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "description": "Название ПО из маркетплейса",
                                "example": "name"
                            }
                        }
                    },
                    "preset_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Уникальный идентификатор тарифа сервера.",
                        "example": 11
                    },
                    "location": {
                        "type": "string",
                        "description": "Локация сервера.",
                        "enum": [
                            "ru-1",
                            "ru-2",
                            "pl-1",
                            "kz-1"
                        ],
                        "example": "ru-1"
                    },
                    "configurator_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Уникальный идентификатор конфигуратора сервера.",
                        "example": 11
                    },
                    "boot_mode": {
                        "type": "string",
                        "description": "Режим загрузки ОС сервера.",
                        "enum": [
                            "std",
                            "single",
                            "cd"
                        ],
                        "example": "std"
                    },
                    "status": {
                        "type": "string",
                        "description": "Статус сервера.",
                        "enum": [
                            "installing",
                            "software_install",
                            "reinstalling",
                            "on",
                            "off",
                            "turning_on",
                            "turning_off",
                            "hard_turning_off",
                            "rebooting",
                            "hard_rebooting",
                            "removing",
                            "removed",
                            "cloning",
                            "transfer",
                            "blocked",
                            "configuring",
                            "no_paid",
                            "permanent_blocked"
                        ],
                        "example": "on"
                    },
                    "start_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда был запущен сервер.",
                        "example": "2022-10-25T15:15:45.000Z"
                    },
                    "is_ddos_guard": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, включена ли защита от DDOS у данного сервера.",
                        "example": false
                    },
                    "cpu": {
                        "type": "number",
                        "description": "Количество ядер процессора сервера.",
                        "example": 16
                    },
                    "cpu_frequency": {
                        "type": "string",
                        "description": "Частота ядер процессора сервера.",
                        "example": "3.3"
                    },
                    "ram": {
                        "type": "number",
                        "description": "Размер (в Мб) ОЗУ сервера.",
                        "example": 2048
                    },
                    "disks": {
                        "type": "array",
                        "description": "Список дисков сервера.",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "number",
                                    "description": "Уникальный идентификатор диска.",
                                    "example": 1
                                },
                                "size": {
                                    "type": "number",
                                    "description": "Размер диска (в Мб).",
                                    "example": 10240
                                },
                                "used": {
                                    "type": "number",
                                    "description": "Количество использованной памяти диска (в Мб).",
                                    "example": 5120
                                },
                                "type": {
                                    "type": "string",
                                    "description": "Тип диска.",
                                    "example": "nvme"
                                },
                                "is_mounted": {
                                    "type": "boolean",
                                    "description": "Является ли диск примонтированным.",
                                    "example": true
                                },
                                "is_system": {
                                    "type": "boolean",
                                    "description": "Является ли диск системным.",
                                    "example": true
                                },
                                "system_name": {
                                    "type": "string",
                                    "description": "Системное название диска.",
                                    "example": "vda"
                                },
                                "status": {
                                    "type": "string",
                                    "description": "Статус диска.",
                                    "example": "done"
                                }
                            },
                            "required": [
                                "id",
                                "size",
                                "used",
                                "type",
                                "is_mounted",
                                "is_system",
                                "system_name",
                                "status"
                            ]
                        }
                    },
                    "avatar_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Уникальный идентификатор аватара сервера. Описание методов работы с аватарами появится позднее.",
                        "example": "avatar"
                    },
                    "vnc_pass": {
                        "type": "string",
                        "description": "Описание появится позднее.",
                        "example": "password"
                    },
                    "networks": {
                        "type": "array",
                        "description": "Список сетей диска.",
                        "items": {
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Тип сети.",
                                    "enum": [
                                        "public",
                                        "local"
                                    ],
                                    "example": "public"
                                },
                                "nat_mode": {
                                    "type": "string",
                                    "description": "Тип преобразования сетевых адресов.",
                                    "enum": [
                                        "dnat_and_snat",
                                        "snat",
                                        "no_nat"
                                    ],
                                    "example": "dnat_and_snat"
                                },
                                "bandwidth": {
                                    "type": "number",
                                    "nullable": true,
                                    "description": "Пропускная способность сети.",
                                    "example": 200
                                },
                                "ips": {
                                    "type": "array",
                                    "description": "Список IP-адресов сети.",
                                    "nullable": true,
                                    "items": {
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "description": "Тип IP-адреса сети",
                                                "enum": [
                                                    "ipv4",
                                                    "ipv6"
                                                ],
                                                "example": "ipv4"
                                            },
                                            "ip": {
                                                "type": "string",
                                                "description": "IP-адрес сети",
                                                "example": "0.0.0.0"
                                            },
                                            "ptr": {
                                                "type": "string",
                                                "description": "Запись имени узла",
                                                "example": "ptr"
                                            },
                                            "is_main": {
                                                "type": "boolean",
                                                "description": "Является ли сеть основной.",
                                                "example": true
                                            }
                                        },
                                        "required": [
                                            "type",
                                            "ip",
                                            "is_main"
                                        ]
                                    }
                                },
                                "is_ddos_guard": {
                                    "type": "boolean",
                                    "description": "Подключена ли DDoS-защита. Только для публичных сетей",
                                    "example": false
                                }
                            },
                            "required": [
                                "type",
                                "ips"
                            ]
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "comment",
                    "os",
                    "software",
                    "preset_id",
                    "configurator_id",
                    "created_at",
                    "location",
                    "boot_mode",
                    "status",
                    "start_at",
                    "is_ddos_guard",
                    "cpu",
                    "cpu_frequency",
                    "ram",
                    "disks",
                    "avatar_id",
                    "vnc_pass",
                    "networks"
                ]
            },
            "create-server": {
                "properties": {
                    "configuration": {
                        "type": "object",
                        "description": "Параметры конфигурации сервера. Нельзя передавать вместе с `preset_id`",
                        "properties": {
                            "configurator_id": {
                                "type": "number",
                                "description": "Уникальный идентификатор конфигуратора сервера",
                                "example": 11
                            },
                            "disk": {
                                "type": "number",
                                "description": "Размер диска в МБ",
                                "example": 15360
                            },
                            "cpu": {
                                "type": "number",
                                "description": "Количество ядер процессора",
                                "example": 1
                            },
                            "ram": {
                                "type": "number",
                                "description": "Размер ОЗУ сервера в МБ",
                                "example": 2048
                            }
                        },
                        "required": [
                            "configurator_id",
                            "disk",
                            "cpu",
                            "ram"
                        ]
                    },
                    "is_ddos_guard": {
                        "type": "boolean",
                        "description": "Защита от DDoS. Серверу выдается защищенный IP-адрес с защитой уровня L3 / L4. Для включения защиты уровня L7, необходимо создать тикет в техническую поддержку",
                        "example": true
                    },
                    "os_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор операционной системы, которая будет установлена на облачный сервер. Нельзя передавать вместе с `image_id`",
                        "example": 188
                    },
                    "image_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор образа, который будет установлен на облачный сервер. Нельзя передавать вместе с `os_id`",
                        "example": 811
                    },
                    "software_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор программного обеспечения сервера.",
                        "example": 199
                    },
                    "preset_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор тарифа сервера. Нельзя передавать вместе с ключом `configurator`",
                        "example": 81
                    },
                    "bandwidth": {
                        "type": "number",
                        "description": "Пропускная способность тарифа. Доступные значения от 100 до 1000 с шагом 100",
                        "example": 200
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Имя облачного сервера. Максимальная длина — 255 символов, имя должно быть уникальным.",
                        "example": "name"
                    },
                    "avatar_id": {
                        "type": "string",
                        "description": "Уникальный идентификатор аватара сервера. Описание методов работы с аватарами появится позднее.",
                        "example": "avatar"
                    },
                    "comment": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Комментарий к облачному серверу. Максимальная длина — 255 символов.",
                        "example": "comment"
                    },
                    "ssh_keys_ids": {
                        "type": "array",
                        "description": "Список SSH-ключей",
                        "items": {
                            "type": "number",
                            "example": 1
                        }
                    },
                    "is_local_network": {
                        "type": "boolean",
                        "description": "Локальная сеть",
                        "example": false
                    }
                },
                "required": [
                    "is_ddos_guard",
                    "name",
                    "bandwidth"
                ]
            },
            "update-server": {
                "properties": {
                    "configurator": {
                        "type": "object",
                        "description": "Параметры конфигурации сервера. Нельзя передавать вместе с preset_id",
                        "properties": {
                            "configurator_id": {
                                "type": "number",
                                "description": "Уникальный идентификатор конфигуратора сервера",
                                "example": 11
                            },
                            "disk": {
                                "type": "number",
                                "description": "Размер диска в МБ",
                                "example": 15360
                            },
                            "cpu": {
                                "type": "number",
                                "description": "Количество ядер процессора",
                                "example": 1
                            },
                            "ram": {
                                "type": "number",
                                "description": "Размер ОЗУ сервера в МБ",
                                "example": 2048
                            }
                        }
                    },
                    "os_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор операционной системы, которая будет установлена на облачный сервер.",
                        "example": 188
                    },
                    "software_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор программного обеспечения сервера.",
                        "example": 199
                    },
                    "preset_id": {
                        "type": "number",
                        "description": "Уникальный идентификатор тарифа сервера. Нельзя передавать вместе с ключом configurator",
                        "example": 81
                    },
                    "bandwidth": {
                        "type": "number",
                        "description": "Пропускная способность тарифа. Доступные значения от 100 до 1000 с шагом 100",
                        "example": 200
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Имя облачного сервера. Максимальная длина — 255 символов, имя должно быть уникальным.",
                        "example": "name"
                    },
                    "avatar_id": {
                        "type": "string",
                        "description": "Уникальный идентификатор аватара сервера. Описание методов работы с аватарами появится позднее.",
                        "example": "avatar"
                    },
                    "comment": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Комментарий к облачному серверу. Максимальная длина — 255 символов.",
                        "example": "comment"
                    }
                }
            },
            "servers-os": {
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор операционной системы.",
                        "example": 2377
                    },
                    "family": {
                        "type": "string",
                        "description": "Семейство операционной системы.",
                        "example": "linux"
                    },
                    "name": {
                        "type": "string",
                        "description": "Название операционной системы.",
                        "example": "debian"
                    },
                    "version": {
                        "type": "string",
                        "description": "Версия операционной системы.",
                        "example": "6.0"
                    },
                    "version_codename": {
                        "type": "string",
                        "description": "Кодовое имя версии операционной системы.",
                        "example": "squeeze"
                    },
                    "description": {
                        "type": "string",
                        "description": "Описание операционной системы.",
                        "example": ""
                    },
                    "requirements": {
                        "type": "object",
                        "description": "Требования к облачному серверу для установки операционной системы.",
                        "properties": {
                            "cpu_min": {
                                "type": "number",
                                "description": "Минимальной значение процессора.",
                                "example": 2
                            },
                            "disk_min": {
                                "type": "number",
                                "description": "Минимальное значение диска.",
                                "example": 200
                            },
                            "ram_min": {
                                "type": "number",
                                "description": "Минимальное значение оперативной памяти.",
                                "example": 4
                            },
                            "bandwidth_min": {
                                "type": "number",
                                "description": "Минимальное значение пропускной способности.",
                                "example": 100
                            }
                        }
                    }
                }
            },
            "servers-preset": {
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор тарифа сервера.",
                        "example": 2377
                    },
                    "location": {
                        "type": "string",
                        "description": "Локация сервера.",
                        "enum": [
                            "ru-1",
                            "pl-1",
                            "kz-1"
                        ],
                        "example": "ru-1"
                    },
                    "price": {
                        "type": "number",
                        "description": "Стоимость в рублях.",
                        "example": 199
                    },
                    "cpu": {
                        "type": "number",
                        "description": "Количество ядер процессора.",
                        "example": "1"
                    },
                    "cpu_frequency": {
                        "type": "string",
                        "description": "Частота процессора.",
                        "example": "3.3"
                    },
                    "ram": {
                        "type": "number",
                        "description": "Количество (в Мб) оперативной памяти.",
                        "example": 1024
                    },
                    "disk": {
                        "type": "number",
                        "description": "Размер диска (в Мб).",
                        "example": 15360
                    },
                    "disk_type": {
                        "type": "string",
                        "description": "Тип диска.",
                        "enum": [
                            "ssd",
                            "nvme",
                            "hdd"
                        ],
                        "example": "nvme"
                    },
                    "bandwidth": {
                        "type": "number",
                        "description": "Пропускная способность тарифа.",
                        "example": 200
                    },
                    "description": {
                        "type": "string",
                        "description": "Описание тарифа.",
                        "example": "description"
                    },
                    "description_short": {
                        "type": "string",
                        "description": "Короткое описание тарифа.",
                        "example": "description_short"
                    },
                    "is_allowed_local_network": {
                        "type": "boolean",
                        "description": "Есть возможность подключения локальной сети",
                        "example": false
                    },
                    "tags": {
                        "type": "array",
                        "description": "Список тегов тарифа.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "id",
                    "location",
                    "price",
                    "cpu",
                    "cpu_frequency",
                    "ram",
                    "disk",
                    "disk_type",
                    "bandwidth",
                    "description",
                    "description_short",
                    "is_allowed_local_network",
                    "tags"
                ]
            },
            "servers-configurator": {
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор конфигуратора сервера.",
                        "example": 3
                    },
                    "location": {
                        "type": "string",
                        "description": "Локация сервера.",
                        "enum": [
                            "ru-1",
                            "pl-1",
                            "kz-1"
                        ],
                        "example": "ru-1"
                    },
                    "disk_type": {
                        "type": "string",
                        "description": "Тип диска.",
                        "enum": [
                            "ssd",
                            "nvme",
                            "hdd"
                        ],
                        "example": "nvme"
                    },
                    "is_allowed_local_network": {
                        "type": "boolean",
                        "description": "Есть возможность подключения локальной сети",
                        "example": true
                    },
                    "cpu_frequency": {
                        "type": "string",
                        "description": "Частота процессора.",
                        "example": "3.3"
                    },
                    "requirements": {
                        "properties": {
                            "cpu_min": {
                                "type": "number",
                                "description": "Минимальное количество ядер процессора.",
                                "example": 1
                            },
                            "cpu_step": {
                                "type": "number",
                                "description": "Размер шага ядер процессора.",
                                "example": 1
                            },
                            "cpu_max": {
                                "type": "number",
                                "description": "Максимальное количество ядер процессора.",
                                "example": 12
                            },
                            "ram_min": {
                                "type": "number",
                                "description": "Минимальное количество оперативной памяти (в Мб).",
                                "example": 1024
                            },
                            "ram_step": {
                                "type": "number",
                                "description": "Размер шага оперативной памяти.",
                                "example": 1024
                            },
                            "ram_max": {
                                "type": "number",
                                "description": "Максимальное количество оперативной памяти (в Мб).",
                                "example": 8192
                            },
                            "disk_min": {
                                "type": "number",
                                "description": "Минимальный размер диска (в Мб).",
                                "example": 10240
                            },
                            "disk_step": {
                                "type": "number",
                                "description": "Размер шага диска",
                                "example": 1024
                            },
                            "disk_max": {
                                "type": "number",
                                "description": "Максимальный размер диска (в Мб).",
                                "example": 30720
                            },
                            "network_bandwidth_min": {
                                "type": "number",
                                "description": "Минимальныая пропускная способноть интернет-канала (в Мб)",
                                "example": 200
                            },
                            "network_bandwidth_step": {
                                "type": "number",
                                "description": "Размер шага пропускной способноти интернет-канала (в Мб)",
                                "example": 100
                            },
                            "network_bandwidth_max": {
                                "type": "number",
                                "description": "Максимальная пропускная способноть интернет-канала (в Мб)",
                                "example": 1000
                            }
                        },
                        "required": [
                            "cpu_min",
                            "cpu_step",
                            "cpu_max",
                            "ram_min",
                            "ram_step",
                            "ram_max",
                            "disk_min",
                            "disk_step",
                            "disk_max",
                            "network_bandwidth_min",
                            "network_bandwidth_step",
                            "network_bandwidth_max"
                        ]
                    }
                },
                "required": [
                    "id",
                    "is_allowed_local_network",
                    "location",
                    "disk_type",
                    "cpu_frequency",
                    "requirements"
                ]
            },
            "servers-software": {
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор ПО из маркетплейса.",
                        "example": 2377
                    },
                    "name": {
                        "type": "string",
                        "description": "Имя ПО из маркетплейса.",
                        "example": "iRedMail"
                    },
                    "os_ids": {
                        "type": "array",
                        "description": "Список id операционных систем, на которых доступна установка ПО.",
                        "items": {
                            "type": "number",
                            "example": 2
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "Описание ПО из маркетплейса.",
                        "example": "iRedMail - полноценный почтовый сервер под Linux"
                    },
                    "requirements": {
                        "type": "object",
                        "description": "Требования к облачному серверу для установки ПО.",
                        "properties": {
                            "cpu_min": {
                                "type": "number",
                                "description": "Минимальной значение процессора.",
                                "example": 2
                            },
                            "disk_min": {
                                "type": "number",
                                "description": "Минимальное значение диска.",
                                "example": 200
                            },
                            "ram_min": {
                                "type": "number",
                                "description": "Минимальное значение оперативной памяти.",
                                "example": 4
                            },
                            "bandwidth_min": {
                                "type": "number",
                                "description": "Минимальное значение пропускной способности.",
                                "example": 100
                            }
                        }
                    }
                }
            },
            "server-ip": {
                "description": "IP-адрес сервера",
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Тип IP-адреса сети",
                        "enum": [
                            "ipv4",
                            "ipv6"
                        ],
                        "example": "ipv4"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IP-адрес сети",
                        "example": "0.0.0.0"
                    },
                    "ptr": {
                        "type": "string",
                        "description": "Запись имени узла",
                        "example": "ptr"
                    },
                    "is_main": {
                        "type": "boolean",
                        "description": "Является ли сеть основной.",
                        "example": true
                    }
                },
                "required": [
                    "type",
                    "ip",
                    "is_main",
                    "ptr"
                ]
            },
            "server-log": {
                "description": "Лог сервера",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор диска.",
                        "example": 1
                    },
                    "logged_at": {
                        "type": "string",
                        "description": "Дата лога",
                        "format": "date-time",
                        "example": "2022-10-25T15:15:45.000Z"
                    },
                    "event": {
                        "type": "string",
                        "description": "Событие сервера",
                        "example": "install"
                    }
                },
                "required": [
                    "id",
                    "logged_at",
                    "event"
                ]
            },
            "server-disk": {
                "description": "Диск сервера",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор диска.",
                        "example": 1
                    },
                    "size": {
                        "type": "number",
                        "description": "Размер диска (в Мб).",
                        "example": 10240
                    },
                    "used": {
                        "type": "number",
                        "description": "Количество использованной памяти диска (в Мб).",
                        "example": 5120
                    },
                    "type": {
                        "type": "string",
                        "description": "Тип диска.",
                        "example": "nvme"
                    },
                    "is_mounted": {
                        "type": "boolean",
                        "description": "Является ли диск примонтированным.",
                        "example": true
                    },
                    "is_system": {
                        "type": "boolean",
                        "description": "Является ли диск системным.",
                        "example": false
                    },
                    "system_name": {
                        "type": "string",
                        "description": "Системное название диска.",
                        "example": "vda"
                    },
                    "status": {
                        "type": "string",
                        "description": "Статус диска.",
                        "example": "done"
                    }
                },
                "required": [
                    "id",
                    "size",
                    "used",
                    "type",
                    "is_mounted",
                    "is_system",
                    "system_name",
                    "status"
                ]
            },
            "auto-backup": {
                "properties": {
                    "copy_count": {
                        "type": "number",
                        "description": "Количество копий для хранения. Минимальное количество `1`, максимальное `99`",
                        "example": 2
                    },
                    "creation_start_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Дата начала создания первого автобэкапа. Значение в формате `ISO8601`. Время не учитывается.",
                        "example": "2023-02-02T00:00:00.000Z"
                    },
                    "is_enabled": {
                        "type": "boolean",
                        "description": "Включено ли автобэкапирование",
                        "example": true
                    },
                    "interval": {
                        "type": "string",
                        "enum": [
                            "day",
                            "week",
                            "month"
                        ],
                        "description": "Периодичность создания автобэкапов",
                        "example": "week"
                    },
                    "day_of_week": {
                        "type": "number",
                        "description": "День недели, в который будут создаваться автобэкапы. Работает только со значением `interval`: `week`. Доступные значение от `1 `до `7`.",
                        "example": 1
                    }
                },
                "required": [
                    "is_enabled"
                ]
            },
            "server-backup": {
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор бэкапа сервера.",
                        "example": 3
                    },
                    "name": {
                        "type": "string",
                        "description": "Название бэкапа.",
                        "example": "name"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Комментарий к бэкапу.",
                        "nullable": true,
                        "example": "comment"
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Дата создания бэкапа.",
                        "example": "2022-08-24T14:15:22Z"
                    },
                    "status": {
                        "type": "string",
                        "description": "Статус бэкапа.",
                        "enum": [
                            "precreate",
                            "delete",
                            "shutdown",
                            "recover",
                            "create",
                            "fail",
                            "done"
                        ],
                        "example": "create"
                    },
                    "size": {
                        "type": "number",
                        "description": "Размер бэкапа (в Мб).",
                        "example": 10240
                    },
                    "type": {
                        "type": "string",
                        "description": "Тип бэкапа.",
                        "enum": [
                            "manual",
                            "auto"
                        ],
                        "example": "manual"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "comment",
                    "created_at",
                    "status",
                    "size",
                    "type"
                ]
            },
            "project": {
                "description": "Проект",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого проекта. Автоматически генерируется при создании.",
                        "example": 1
                    },
                    "account_id": {
                        "type": "string",
                        "description": "Идентификатор пользователя.",
                        "example": "cp78562"
                    },
                    "avatar_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Идентификатор аватара пользователя. Описание методов работы с аватарами появится позднее.",
                        "example": "1664446660062"
                    },
                    "description": {
                        "type": "string",
                        "description": "Описание проекта.",
                        "example": "Project description"
                    },
                    "name": {
                        "type": "string",
                        "description": "Удобочитаемое имя проекта.",
                        "example": "Project"
                    },
                    "is_default": {
                        "type": "boolean",
                        "description": "Это логическое значение, которое показывает, выбран ли проект по умолчанию для создания новых сущностей.",
                        "example": true
                    }
                },
                "required": [
                    "id",
                    "account_id",
                    "avatar_id",
                    "description",
                    "name",
                    "is_default"
                ]
            },
            "create-project": {
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Удобочитаемое имя проекта. Максимальная длина — 255 символов.",
                        "example": "Name"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 255,
                        "description": "Описание проекта. Максимальная длина — 255 символов.",
                        "example": "Description"
                    },
                    "avatar_id": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 255,
                        "description": "Идентификатор аватара пользователя. Описание методов работы с аватарами появится позднее.",
                        "example": "1664446660062"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "update-project": {
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Удобочитаемое имя проекта. Максимальная длина — 255 символов.",
                        "example": "Name"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 255,
                        "description": "Описание проекта. Максимальная длина — 255 символов.",
                        "example": "Description"
                    },
                    "avatar_id": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 255,
                        "description": "Идентификатор аватара пользователя. Описание методов работы с аватарами появится позднее.",
                        "example": "1664446660062"
                    }
                }
            },
            "project-resource": {
                "description": "Ресурс проекта",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого ресурса проекта. Автоматически генерируется при создании.",
                        "example": 1
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда был создан ресурс.",
                        "example": "2021-02-25T11:04:15Z"
                    },
                    "resource_id": {
                        "type": "number",
                        "description": "Идентификатор ресурса проекта (сервера, хранилища, кластера, балансировщика, базы данных или выделенного сервера).",
                        "example": 1
                    },
                    "project": {
                        "$ref": "#/components/schemas/project"
                    },
                    "type": {
                        "type": "string",
                        "description": "Тип ресурса проекта",
                        "enum": [
                            "server",
                            "balancer",
                            "database",
                            "kubernetes",
                            "storage",
                            "dedicated"
                        ],
                        "example": "server"
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "resource_id",
                    "project",
                    "type"
                ]
            },
            "bucket": {
                "description": "Хранилище S3",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого экземпляра хранилища. Автоматически генерируется при создании.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Удобочитаемое имя, установленное для хранилища.",
                        "example": "Cute Quail"
                    },
                    "disk_stats": {
                        "type": "object",
                        "description": "Статистика использования диска хранилища.",
                        "properties": {
                            "size": {
                                "type": "number",
                                "description": "Размер (в Кб) диска хранилища.",
                                "example": 10485760
                            },
                            "used": {
                                "type": "number",
                                "description": "Размер (в Кб) использованного пространства диска хранилища.",
                                "example": 486.11328125
                            }
                        },
                        "required": [
                            "size",
                            "used"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "description": "Тип хранилища.",
                        "enum": [
                            "private",
                            "public"
                        ],
                        "example": "public"
                    },
                    "preset_id": {
                        "type": "number",
                        "nullable": true,
                        "description": "Идентификатор тарифа хранилища.",
                        "example": 389
                    },
                    "status": {
                        "type": "string",
                        "description": "Статус хранилища.",
                        "enum": [
                            "no_paid",
                            "created",
                            "transfer"
                        ],
                        "example": "created"
                    },
                    "object_amount": {
                        "type": "number",
                        "description": "Количество файлов в хранилище.",
                        "example": 5
                    },
                    "location": {
                        "type": "string",
                        "description": "Регион хранилища.",
                        "example": "ru-1"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Адрес хранилища для подключения.",
                        "example": "s3.timeweb.com"
                    },
                    "access_key": {
                        "type": "string",
                        "description": "Ключ доступа от хранилища.",
                        "example": "access_key"
                    },
                    "secret_key": {
                        "type": "string",
                        "description": "Секретный ключ доступа от хранилища.",
                        "example": "secret_key"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "disk_stats",
                    "type",
                    "preset_id",
                    "status",
                    "object_amount",
                    "location",
                    "hostname",
                    "access_key",
                    "secret_key"
                ]
            },
            "clusterk8s": {
                "description": "Кластер",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого экземпляра крастера. Автоматически генерируется при создании.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Удобочитаемое имя, установленное для кластера.",
                        "example": "Cute Quail"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда был создан кластер.",
                        "example": "2022-10-25T15:15:45.000Z"
                    },
                    "status": {
                        "type": "string",
                        "description": "Статус кластера.",
                        "enum": [
                            "installing",
                            "provisioning",
                            "active",
                            "unpaid"
                        ],
                        "example": "active"
                    },
                    "description": {
                        "type": "string",
                        "description": "Описание кластера.",
                        "example": "Описание"
                    },
                    "ha": {
                        "type": "boolean",
                        "description": "Описание появится позднее.",
                        "example": false
                    },
                    "k8s_version": {
                        "type": "string",
                        "description": "Версия k8s.",
                        "example": "v1.19.16"
                    },
                    "network_driver": {
                        "type": "string",
                        "description": "Описание появится позднее.",
                        "example": "canal"
                    },
                    "ingress": {
                        "type": "boolean",
                        "description": "Описание появится позднее.",
                        "example": true
                    },
                    "cpu": {
                        "type": "number",
                        "description": "Количество ядер процессора кластера.",
                        "example": 1
                    },
                    "ram": {
                        "type": "number",
                        "description": "Количество (в Мб) оперативной памяти кластера.",
                        "example": 1024
                    },
                    "disk": {
                        "type": "number",
                        "description": "Размер (в Гб) диска кластера.",
                        "example": "30"
                    },
                    "preset_id": {
                        "type": "number",
                        "description": "Тип сервиса кластера.",
                        "example": 403
                    }
                },
                "required": [
                    "id",
                    "name",
                    "created_at",
                    "status",
                    "description",
                    "ha",
                    "k8s_version",
                    "network_driver",
                    "ingress",
                    "cpu",
                    "ram",
                    "disk",
                    "preset_id"
                ]
            },
            "resource-transfer": {
                "properties": {
                    "to_project": {
                        "type": "number",
                        "description": "Идентификатор проекта, куда переносится ресурс.",
                        "example": 1
                    },
                    "resource_id": {
                        "type": "number",
                        "description": "Идентификатор перемещаемого ресурса (сервера, хранилища, кластера, балансировщика, базы данных или выделенного сервера).",
                        "example": 1
                    },
                    "resource_type": {
                        "type": "string",
                        "description": "Тип перемещаемого ресурса.",
                        "enum": [
                            "server",
                            "balancer",
                            "database",
                            "kubernetes",
                            "storage",
                            "dedicated"
                        ],
                        "example": "server"
                    }
                },
                "required": [
                    "to_project",
                    "resource_id",
                    "resource_type"
                ]
            },
            "presets-storage": {
                "type": "object",
                "description": "Тариф",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор для каждого экземпляра тарифа хранилища.",
                        "example": 2377
                    },
                    "description": {
                        "type": "string",
                        "description": "Описание тарифа.",
                        "example": "Услуга Хранилище S3"
                    },
                    "description_short": {
                        "type": "string",
                        "description": "Краткое описание тарифа.",
                        "example": "Start"
                    },
                    "disk": {
                        "type": "number",
                        "description": "Описание диска хранилища.",
                        "example": 30
                    },
                    "price": {
                        "type": "number",
                        "description": "Стоимость тарифа хранилища.",
                        "example": 100
                    },
                    "location": {
                        "type": "string",
                        "enum": [
                            "ru-1",
                            "pl-1",
                            "kz-1"
                        ],
                        "description": "Географическое расположение тарифа.",
                        "example": "ru-1"
                    }
                },
                "required": [
                    "id",
                    "description",
                    "description_short",
                    "disk",
                    "price",
                    "location"
                ]
            },
            "bucket-user": {
                "description": "Пользователь хранилища",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор пользователя.",
                        "example": 1
                    },
                    "access_key": {
                        "type": "string",
                        "description": "Логин пользователя.",
                        "example": "name"
                    },
                    "secret_key": {
                        "type": "string",
                        "description": "Пароль пользователя.",
                        "example": "password"
                    }
                },
                "required": [
                    "id",
                    "access_key",
                    "secret_key"
                ]
            },
            "transfer-status": {
                "description": "Статус трансфера.",
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Общий статус трансфера.",
                        "enum": [
                            "started",
                            "suspended",
                            "failed"
                        ],
                        "example": "started"
                    },
                    "tries": {
                        "type": "number",
                        "description": "Количество попыток.",
                        "example": 1
                    },
                    "total_count": {
                        "type": "number",
                        "description": "Общее количество затронутых объектов.",
                        "example": 0
                    },
                    "total_size": {
                        "type": "number",
                        "description": "Общий размер затронутых объектов.",
                        "example": 0
                    },
                    "uploaded_count": {
                        "type": "number",
                        "description": "Количество перемещенных объектов.",
                        "example": 0
                    },
                    "uploaded_size": {
                        "type": "number",
                        "description": "Размер перемещенных объектов.",
                        "example": 0
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string",
                                    "description": "Текст ошибки.",
                                    "example": "error"
                                },
                                "try": {
                                    "type": "number",
                                    "description": "Количество попыток.",
                                    "example": 1
                                }
                            },
                            "required": [
                                "value",
                                "try"
                            ]
                        }
                    }
                },
                "required": [
                    "status",
                    "tries",
                    "total_count",
                    "total_size",
                    "uploaded_count",
                    "uploaded_size",
                    "errors"
                ]
            },
            "s3-subdomain": {
                "description": "Поддомен.",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор поддомена.",
                        "example": 1
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "Поддомен.",
                        "example": "test.example.com"
                    },
                    "cert_released": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда был выдан SSL сертификат.",
                        "example": "2022-10-25T15:15:45.000Z"
                    },
                    "tries": {
                        "type": "number",
                        "description": "Количество попыток перевыпустить SSL сертификат.",
                        "example": 1
                    },
                    "status": {
                        "type": "string",
                        "description": "Поддомен.",
                        "enum": [
                            "ssl_released",
                            "ssl_not_requested",
                            "ssl_re_release_error"
                        ]
                    }
                },
                "required": [
                    "id",
                    "subdomain",
                    "cert_released",
                    "tries",
                    "status"
                ]
            },
            "added-subdomain": {
                "description": "Добавленный поддомен.",
                "type": "object",
                "properties": {
                    "subdomain": {
                        "type": "string",
                        "description": "Поддомен.",
                        "example": "test.example.com"
                    },
                    "status": {
                        "type": "string",
                        "description": "Результат добавления поддомена.",
                        "enum": [
                            "success",
                            "empty_cname",
                            "duplicate",
                            "failed"
                        ],
                        "example": "success"
                    }
                },
                "required": [
                    "subdomain",
                    "status"
                ]
            },
            "s3-object": {
                "type": "object",
                "description": "An object consists of data and its descriptive metadata.",
                "properties": {
                    "key": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Название файла или папки.",
                        "example": "test.jpg"
                    },
                    "last_modified": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда была сделана последняя модификация файла или папки."
                    },
                    "etag": {
                        "type": "string",
                        "description": "Тег.",
                        "example": "d41d8cd98f00b204e9800998ecf8427e"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Размер (в байтах) файла или папки.",
                        "example": 21403
                    },
                    "storage_class": {
                        "type": "string",
                        "description": "Класс хранилища.",
                        "example": "Default"
                    },
                    "checksum_algorithm": {
                        "type": "array",
                        "description": "Алгоритм",
                        "items": {
                            "type": "string"
                        },
                        "example": []
                    },
                    "owner": {
                        "type": "object",
                        "description": "Информация о владельце файла или папки.",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Идентификатор владельца файла."
                            },
                            "display_name": {
                                "type": "string",
                                "description": "Имя владельца файла."
                            }
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "Тип (файл или папка).",
                        "enum": [
                            "file",
                            "directory"
                        ],
                        "example": "file"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "api-key": {
                "type": "object",
                "description": "Токен.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Уникальный идентификатор токена.",
                        "example": "913a3a06-1eb9-4e9c-bc63-6ca6944e883b"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда был создан токен.",
                        "example": "2022-10-25T15:15:45.000Z"
                    },
                    "name": {
                        "type": "string",
                        "description": "Имя токена.",
                        "example": "Example"
                    },
                    "expired_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда истекает токен.",
                        "nullable": true,
                        "example": "2022-10-25T15:15:45.000Z"
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "name",
                    "expired_at"
                ]
            },
            "create-api-key": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Имя, установленное для токена.",
                        "example": "Example"
                    },
                    "expire": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда истекает токен.",
                        "example": "2022-10-25T15:15:45.000Z"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "created-api-key": {
                "type": "object",
                "description": "Токен.",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "Созданный токен, будет показан только один раз, его необходимо сохранить."
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Уникальный идентификатор токена.",
                        "example": "913a3a06-1eb9-4e9c-bc63-6ca6944e883b"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда был создан токен.",
                        "example": "2022-10-25T15:15:45.000Z"
                    },
                    "name": {
                        "type": "string",
                        "description": "Имя токена.",
                        "example": "Example"
                    },
                    "expired_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда истекает токен.",
                        "nullable": true,
                        "example": "2022-10-25T15:15:45.000Z"
                    }
                },
                "required": [
                    "token",
                    "id",
                    "created_at",
                    "name",
                    "expired_at"
                ]
            },
            "refresh-api-key": {
                "type": "object",
                "properties": {
                    "expire": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Значение времени, указанное в комбинированном формате даты и времени ISO8601, которое представляет, когда истекает токен.",
                        "example": "2022-10-25T15:15:45.000Z"
                    }
                }
            },
            "rename-api-key": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Имя, установленное для токена.",
                        "example": "Example"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "add-countries": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "Страна.",
                        "example": "RU"
                    },
                    "status": {
                        "type": "string",
                        "description": "Результат добавления страны.",
                        "enum": [
                            "success",
                            "conflict"
                        ],
                        "example": "success"
                    }
                },
                "required": [
                    "value",
                    "status"
                ]
            },
            "remove-countries": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "Страна.",
                        "example": "RU"
                    },
                    "status": {
                        "type": "string",
                        "description": "Результат удаления страны.",
                        "enum": [
                            "success",
                            "not_found"
                        ],
                        "example": "success"
                    }
                },
                "required": [
                    "value",
                    "status"
                ]
            },
            "add-ips": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "format": "ipv4",
                        "description": "IP-адрес.",
                        "example": "123.231.125.128"
                    },
                    "status": {
                        "type": "string",
                        "description": "Результат добавления IP-адреса.",
                        "enum": [
                            "success",
                            "conflict"
                        ],
                        "example": "success"
                    }
                },
                "required": [
                    "value",
                    "status"
                ]
            },
            "remove-ips": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "format": "ipv4",
                        "description": "IP-адрес.",
                        "example": "123.231.125.128"
                    },
                    "status": {
                        "type": "string",
                        "description": "Результат удаления IP-адреса.",
                        "enum": [
                            "success",
                            "not_found"
                        ],
                        "example": "success"
                    }
                },
                "required": [
                    "value",
                    "status"
                ]
            },
            "mailbox": {
                "description": "Почтовый ящик",
                "type": "object",
                "properties": {
                    "auto_reply": {
                        "description": "Автоответчик на входящие письма",
                        "type": "object",
                        "properties": {
                            "is_enabled": {
                                "type": "boolean",
                                "description": "Включен ли автоответчик на входящие письма",
                                "example": true
                            },
                            "message": {
                                "type": "string",
                                "description": "Сообщение автоответчика на входящие письма",
                                "example": "some message"
                            },
                            "subject": {
                                "type": "string",
                                "description": "Тема сообщения автоответчика на входящие письма",
                                "example": "some subject"
                            }
                        },
                        "required": [
                            "is_enabled",
                            "message",
                            "subject"
                        ]
                    },
                    "spam_filter": {
                        "description": "Спам-фильтр",
                        "type": "object",
                        "properties": {
                            "is_enabled": {
                                "type": "boolean",
                                "description": "Включен ли спам-фильтр",
                                "example": true
                            },
                            "action": {
                                "type": "string",
                                "description": "Что делать с письмами, которые попадают в спам. \\\n Параметры: \\\n `move_to_directory` - переместить в паку спам; \\\n `forward` - переслать письмо на другой адрес; \\\n `delete` - удалить письмо; \\\n `tag` - пометить письмо;",
                                "enum": [
                                    "move_to_directory",
                                    "forward",
                                    "delete",
                                    "tag"
                                ],
                                "example": "forward"
                            },
                            "forward_to": {
                                "type": "string",
                                "description": "Адрес для пересылки при выбранном действии `forward` из параметра `action`",
                                "example": "test@timeweb.ru"
                            },
                            "white_list": {
                                "type": "array",
                                "description": "Белый список адресов от которых письма не будут попадать в спам",
                                "items": {
                                    "type": "string",
                                    "example": "test@timeweb.ru"
                                }
                            }
                        },
                        "required": [
                            "is_enabled",
                            "action",
                            "forward_to",
                            "white_list"
                        ]
                    },
                    "forwarding_incoming": {
                        "type": "object",
                        "description": "Пересылка входящик писем",
                        "properties": {
                            "is_enabled": {
                                "type": "boolean",
                                "description": "Включена ли пересылка входящик писем",
                                "example": true
                            },
                            "is_delete_messages": {
                                "type": "boolean",
                                "description": "Удалять ли входящие письма",
                                "example": false
                            },
                            "incoming_list": {
                                "type": "array",
                                "description": "Список адресов для пересылки",
                                "items": {
                                    "type": "string",
                                    "example": "test@timeweb.ru"
                                }
                            }
                        },
                        "required": [
                            "is_enabled",
                            "is_delete_messages",
                            "incoming_list"
                        ]
                    },
                    "forwarding_outgoing": {
                        "type": "object",
                        "description": "Пересылка исходящих писем",
                        "properties": {
                            "is_enabled": {
                                "type": "boolean",
                                "description": "Включена ли пересылка исходящих писем",
                                "example": true
                            },
                            "outgoing_to": {
                                "type": "string",
                                "description": "Адрес для пересылки исходящих писем",
                                "example": "test@timeweb.ru"
                            }
                        },
                        "required": [
                            "is_enabled",
                            "outgoing_to"
                        ]
                    },
                    "comment": {
                        "type": "string",
                        "description": "Комментарий к почтовому ящику",
                        "example": "some comment"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "Домен почты",
                        "example": "timeweb.ru"
                    },
                    "mailbox": {
                        "type": "string",
                        "description": "Название почтового ящика",
                        "example": "mailbox"
                    },
                    "password": {
                        "type": "string",
                        "description": "Пароль почтового ящика",
                        "example": "ps3-1asZa"
                    },
                    "usage_space": {
                        "type": "number",
                        "description": "Использованное место на почтовом ящике (в Мб)",
                        "example": 512
                    },
                    "is_webmail": {
                        "type": "boolean",
                        "description": "Доступен ли Webmail",
                        "example": false
                    },
                    "idn_name": {
                        "type": "string",
                        "description": "IDN домен почтового ящика",
                        "example": "timeweb.ru"
                    },
                    "is_dovecot": {
                        "type": "boolean",
                        "description": "Есть ли доступ через dovecot",
                        "example": false
                    }
                },
                "required": [
                    "auto_reply",
                    "spam_filter",
                    "forwarding_incoming",
                    "forwarding_outgoing",
                    "comment",
                    "fqdn",
                    "mailbox",
                    "password",
                    "usage_space",
                    "is_webmail",
                    "idn_name",
                    "is_dovecot"
                ]
            },
            "quota": {
                "description": "Почтовая квота",
                "type": "object",
                "properties": {
                    "total": {
                        "description": "Общее количество места на почте (в Мб.)",
                        "type": "number",
                        "example": 1024
                    },
                    "used": {
                        "description": "Занятое место на почте (в Мб.)",
                        "type": "number",
                        "example": 512
                    }
                },
                "required": [
                    "total",
                    "used"
                ]
            },
            "domain-info": {
                "description": "Почтовая информация о домене",
                "type": "object",
                "properties": {
                    "email": {
                        "description": "Адрес для сбора почты с ошибочных ящиков",
                        "type": "string",
                        "example": 1024
                    },
                    "used": {
                        "description": "Использованное место на почте (в Мб.)",
                        "type": "number",
                        "example": 512
                    }
                },
                "required": [
                    "email",
                    "used"
                ]
            },
            "auto-reply-is-disabled": {
                "title": "Если автоответчик выключен",
                "type": "object",
                "properties": {
                    "is_enabled": {
                        "type": "true",
                        "description": "Включен ли автоответчик на входящие письма",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Сообщение автоответчика на входящие письма",
                        "example": "some message"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Тема сообщения автоответчика на входящие письма.",
                        "example": "some subject"
                    }
                },
                "required": [
                    "is_enabled"
                ]
            },
            "auto-reply-is-enabled": {
                "title": "Если автоответчик включен",
                "type": "object",
                "properties": {
                    "is_enabled": {
                        "type": "boolean",
                        "description": "Включен ли автоответчик на входящие письма",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Сообщение автоответчика на входящие письма. \\\n Если передан параметр `is_enabled`: `false`, то значение передавать нельзя",
                        "example": "some message"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Тема сообщения автоответчика на входящие письма. \\\n Если передан параметр `is_enabled`: `false`, то значение передавать нельзя",
                        "example": "some subject"
                    }
                }
            },
            "spam-filter-is-disabled": {
                "title": "Если спам-фильтр выключен",
                "type": "object",
                "properties": {
                    "is_enabled": {
                        "type": "true",
                        "description": "Включен ли спам-фильтр",
                        "example": true
                    },
                    "action": {
                        "type": "string",
                        "description": "Что делать с письмами, которые попадают в спам. \\\n Параметры: \\\n `move_to_directory` - переместить в паку спам; \\\n `forward` - переслать письмо на другой адрес; \\\n `delete` - удалить письмо; \\\n `tag` - пометить письмо;",
                        "enum": [
                            "move_to_directory",
                            "forward",
                            "delete",
                            "tag"
                        ],
                        "example": "forward"
                    },
                    "forward_to": {
                        "type": "string",
                        "description": "Адрес для пересылки при выбранном действии `forward` из параметра `action`. Не может быть пустым, если `action` выбран `forward`",
                        "example": "test@timeweb.ru"
                    },
                    "white_list": {
                        "type": "array",
                        "description": "Белый список адресов от которых письма не будут попадать в спам",
                        "items": {
                            "type": "string",
                            "example": "test@timeweb.ru"
                        }
                    }
                },
                "required": [
                    "is_enabled"
                ]
            },
            "spam-filter-is-enabled": {
                "title": "Если спам-фильтр включен",
                "type": "object",
                "properties": {
                    "is_enabled": {
                        "type": "boolean",
                        "description": "Включен ли спам-фильтр",
                        "example": true
                    },
                    "action": {
                        "type": "string",
                        "description": "Что делать с письмами, которые попадают в спам. \\\n Параметры: \\\n `move_to_directory` - переместить в паку спам; \\\n `forward` - переслать письмо на другой адрес; \\\n `delete` - удалить письмо; \\\n `tag` - пометить письмо; \\\n Если передан параметр `is_enabled`: `false`, то значение передавать нельзя",
                        "enum": [
                            "move_to_directory",
                            "forward",
                            "delete",
                            "tag"
                        ],
                        "example": "forward"
                    },
                    "forward_to": {
                        "type": "string",
                        "description": "Адрес для пересылки при выбранном действии `forward` из параметра `action`. Не может быть пустым, если `action` выбран `forward`. \\\n Если передан параметр `is_enabled`: `false`, то значение передавать нельзя",
                        "example": "test@timeweb.ru"
                    },
                    "white_list": {
                        "type": "array",
                        "description": "Белый список адресов от которых письма не будут попадать в спам. \\\n Если передан параметр `is_enabled`: `false`, то значение передавать нельзя",
                        "items": {
                            "type": "string",
                            "example": "test@timeweb.ru"
                        }
                    }
                }
            },
            "forwarding-incoming-is-disabled": {
                "title": "Если пересылка входящих выключена",
                "type": "object",
                "properties": {
                    "is_enabled": {
                        "type": "true",
                        "description": "Включена ли пересылка входящик писем",
                        "example": true
                    },
                    "is_delete_messages": {
                        "type": "boolean",
                        "description": "Удалять ли входящие письма",
                        "example": false
                    },
                    "incoming_list": {
                        "type": "array",
                        "description": "Список адресов для пересылки. Не должен быть пустым при передачи параметра `is_enabled`: `true`",
                        "items": {
                            "type": "string",
                            "example": "test@timeweb.ru"
                        }
                    }
                },
                "required": [
                    "is_enabled"
                ]
            },
            "forwarding-incoming-is-enabled": {
                "title": "Если пересылка входящих включена",
                "type": "object",
                "properties": {
                    "is_enabled": {
                        "type": "boolean",
                        "description": "Включена ли пересылка входящик писем",
                        "example": true
                    },
                    "is_delete_messages": {
                        "type": "boolean",
                        "description": "Удалять ли входящие письма. \\\n Если передан параметр `is_enabled`: `false`, то значение передавать нельзя",
                        "example": false
                    },
                    "incoming_list": {
                        "type": "array",
                        "description": "Список адресов для пересылки. \\\n Если передан параметр `is_enabled`: `false`, то значение передавать нельзя",
                        "items": {
                            "type": "string",
                            "example": "test@timeweb.ru"
                        }
                    }
                }
            },
            "forwarding-outgoing-is-disabled": {
                "title": "Если пересылка исходящих выключена",
                "type": "object",
                "properties": {
                    "is_enabled": {
                        "type": "true",
                        "description": "Включена ли пересылка исходящих писем",
                        "example": true
                    },
                    "outgoing_to": {
                        "type": "string",
                        "description": "Адрес для пересылки исходящих писем",
                        "example": "test@timeweb.ru"
                    }
                },
                "required": [
                    "is_enabled"
                ]
            },
            "forwarding-outgoing-is-enabled": {
                "title": "Если пересылка исходящих выключена",
                "type": "object",
                "properties": {
                    "is_enabled": {
                        "type": "boolean",
                        "description": "Включена ли пересылка исходящих писем. \\\n Если передан параметр `is_enabled`: `false`, то значение передавать нельзя",
                        "example": true
                    },
                    "outgoing_to": {
                        "type": "string",
                        "description": "Адрес для пересылки исходящих писем. \\\n Если передан параметр `is_enabled`: `false`, то значение передавать нельзя",
                        "example": "test@timeweb.ru"
                    }
                }
            },
            "update-mailbox": {
                "description": "Изменение почтового ящика",
                "type": "object",
                "properties": {
                    "auto_reply": {
                        "description": "Автоответчик на входящие письма",
                        "type": "object",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/auto-reply-is-disabled"
                            },
                            {
                                "$ref": "#/components/schemas/auto-reply-is-enabled"
                            }
                        ]
                    },
                    "spam_filter": {
                        "description": "Спам-фильтр",
                        "type": "object",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/spam-filter-is-disabled"
                            },
                            {
                                "$ref": "#/components/schemas/spam-filter-is-enabled"
                            }
                        ]
                    },
                    "forwarding_incoming": {
                        "type": "object",
                        "description": "Пересылка входящик писем.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/forwarding-incoming-is-disabled"
                            },
                            {
                                "$ref": "#/components/schemas/forwarding-incoming-is-enabled"
                            }
                        ]
                    },
                    "forwarding_outgoing": {
                        "type": "object",
                        "description": "Пересылка исходящих писем",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/forwarding-outgoing-is-disabled"
                            },
                            {
                                "$ref": "#/components/schemas/forwarding-outgoing-is-enabled"
                            }
                        ]
                    },
                    "comment": {
                        "type": "string",
                        "description": "Комментарий к почтовому ящику",
                        "example": "some comment"
                    },
                    "password": {
                        "type": "string",
                        "description": "Пароль почтового ящика",
                        "example": "ps3-1asZa"
                    }
                }
            },
            "domain-payment-period": {
                "description": "Период оплаты (Для доменов в зонах .ru и .рф только 1-3 года).",
                "type": "string",
                "enum": [
                    "P1Y",
                    "P2Y",
                    "P3Y",
                    "P4Y",
                    "P5Y",
                    "P6Y",
                    "P7Y",
                    "P8Y",
                    "P9Y",
                    "P10Y"
                ],
                "example": "P1Y"
            },
            "subdomain": {
                "type": "object",
                "properties": {
                    "fqdn": {
                        "description": "Полное имя поддомена.",
                        "type": "string",
                        "example": "sub.somedomain.ru"
                    },
                    "id": {
                        "description": "Уникальный идентификатор поддомена.",
                        "type": "number",
                        "example": 123
                    },
                    "linked_ip": {
                        "description": "Привязанный к поддомену IP-адрес.",
                        "type": "string",
                        "nullable": true,
                        "example": null
                    }
                },
                "required": [
                    "fqdn",
                    "id",
                    "linked_ip"
                ]
            },
            "domain": {
                "description": "Домен",
                "type": "object",
                "properties": {
                    "allowed_buy_periods": {
                        "description": "Допустимые периоды продления домена.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "period": {
                                    "$ref": "#/components/schemas/domain-payment-period"
                                },
                                "price": {
                                    "description": "Стоимость домена за указанный период.",
                                    "type": "number",
                                    "example": 179
                                }
                            },
                            "required": [
                                "period",
                                "price"
                            ]
                        }
                    },
                    "days_left": {
                        "description": "Количество дней, оставшихся до конца срока регистрации домена.",
                        "type": "number",
                        "example": 100
                    },
                    "domain_status": {
                        "description": "Статус домена.",
                        "type": "string",
                        "enum": [
                            "awaiting_payment",
                            "expired",
                            "final_expired",
                            "free",
                            "no_paid",
                            "ns_based",
                            "paid",
                            "soon_expire",
                            "today_expired"
                        ],
                        "example": "paid"
                    },
                    "expiration": {
                        "description": "Дата окончания срока регистрации домена, для доменов без срока окончания регистрации будет приходить 0000-00-00.",
                        "type": "string",
                        "example": "0000-00-00"
                    },
                    "fqdn": {
                        "description": "Полное имя домена.",
                        "type": "string",
                        "example": "somedomain.ru"
                    },
                    "id": {
                        "description": "Уникальный идентификатор домена.",
                        "type": "number",
                        "example": 123
                    },
                    "is_autoprolong_enabled": {
                        "description": "Это логическое значение, которое показывает, включено ли автопродление домена.",
                        "type": "boolean",
                        "example": true
                    },
                    "is_premium": {
                        "description": "Это логическое значение, которое показывает, является ли домен премиальным.",
                        "type": "boolean",
                        "example": true
                    },
                    "is_prolong_allowed": {
                        "description": "Это логическое значение, которое показывает, можно ли сейчас продлить домен.",
                        "type": "boolean",
                        "example": true
                    },
                    "is_technical": {
                        "description": "Это логическое значение, которое показывает, является ли домен техническим.",
                        "type": "boolean",
                        "example": true
                    },
                    "is_whois_privacy_enabled": {
                        "description": "Это логическое значение, которое показывает, включено ли скрытие данных администратора домена для whois. Если приходит null, значит для данной зоны эта услуга не доступна.",
                        "type": "boolean",
                        "nullable": true,
                        "example": true
                    },
                    "linked_ip": {
                        "description": "Привязанный к домену IP-адрес.",
                        "type": "string",
                        "nullable": true,
                        "example": "192.168.1.1"
                    },
                    "paid_till": {
                        "description": "До какого числа оплачен домен.",
                        "type": "string",
                        "nullable": true,
                        "example": "2023-01-27"
                    },
                    "person_id": {
                        "description": "Идентификатор администратора, на которого зарегистрирован домен.",
                        "type": "number",
                        "nullable": true,
                        "example": 123
                    },
                    "premium_prolong_cost": {
                        "description": "Стоимость премиального домена.",
                        "type": "number",
                        "nullable": true,
                        "example": null
                    },
                    "provider": {
                        "description": "Идентификатор регистратора домена.",
                        "type": "string",
                        "nullable": true,
                        "example": "TimewebVirtreg"
                    },
                    "request_status": {
                        "description": "Статус заявки на продление/регистрацию/трансфер домена.",
                        "type": "string",
                        "enum": [
                            "prolongation_fail",
                            "prolongation_request",
                            "registration_fail",
                            "registration_request",
                            "transfer_fail",
                            "transfer_request",
                            "awaiting_person"
                        ],
                        "nullable": true,
                        "example": "registration_request"
                    },
                    "subdomains": {
                        "description": "Список поддоменов.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/subdomain"
                        }
                    },
                    "tld_id": {
                        "description": "Идентификатор доменной зоны.",
                        "type": "number",
                        "nullable": true,
                        "example": 2365
                    }
                },
                "required": [
                    "allowed_buy_periods",
                    "is_prolong_allowed",
                    "is_autoprolong_enabled",
                    "domain_status",
                    "expiration",
                    "fqdn",
                    "id",
                    "is_premium",
                    "is_technical",
                    "days_left",
                    "linked_ip",
                    "paid_till",
                    "person_id",
                    "premium_prolong_cost",
                    "provider",
                    "request_status",
                    "subdomains",
                    "tld_id",
                    "is_whois_privacy_enabled"
                ]
            },
            "update-domain": {
                "type": "object",
                "properties": {
                    "is_autoprolong_enabled": {
                        "description": "Это логическое значение, которое показывает, включено ли автопродление домена.",
                        "type": "boolean",
                        "example": true
                    },
                    "linked_ip": {
                        "description": "Привязанный к домену IP-адрес.",
                        "type": "string",
                        "nullable": true,
                        "example": "192.168.1.1"
                    }
                }
            },
            "dns-record": {
                "description": "DNS-запись.",
                "type": "object",
                "properties": {
                    "type": {
                        "description": "Тип DNS-записи.",
                        "type": "string",
                        "enum": [
                            "TXT",
                            "SRV",
                            "CNAME",
                            "AAAA",
                            "MX",
                            "A"
                        ],
                        "example": "A"
                    },
                    "id": {
                        "description": "Идентификатор DNS-записи.",
                        "type": "number",
                        "nullable": true,
                        "example": 123
                    },
                    "data": {
                        "description": "Данные DNS-записи.",
                        "type": "object",
                        "properties": {
                            "priority": {
                                "description": "Приоритет DNS-записи.",
                                "type": "number",
                                "example": 0
                            },
                            "subdomain": {
                                "description": "Поддомен.",
                                "type": "string",
                                "nullable": true,
                                "example": "sub.somedomain.ru"
                            },
                            "value": {
                                "description": "Значение DNS-записи.",
                                "type": "string",
                                "example": "98.76.54.32"
                            }
                        },
                        "required": [
                            "value"
                        ]
                    }
                },
                "required": [
                    "type",
                    "data"
                ]
            },
            "create-dns": {
                "type": "object",
                "properties": {
                    "priority": {
                        "description": "Приоритет DNS-записи.",
                        "type": "number",
                        "example": 0
                    },
                    "subdomain": {
                        "description": "Полное имя поддомена.",
                        "type": "string",
                        "example": "sub.somedomain.ru"
                    },
                    "type": {
                        "description": "Тип DNS-записи.",
                        "type": "string",
                        "enum": [
                            "TXT",
                            "SRV",
                            "CNAME",
                            "AAAA",
                            "MX",
                            "A"
                        ],
                        "example": "A"
                    },
                    "value": {
                        "description": "Значение DNS-записи.",
                        "type": "string",
                        "example": "192.168.111.123"
                    }
                },
                "required": [
                    "value",
                    "type"
                ]
            },
            "domain-name-server": {
                "description": "Name-сервер",
                "type": "object",
                "properties": {
                    "is_delegation_allowed": {
                        "description": "Это логическое значение, которое показывает включена ли услуга разрешено ли делегирование домена.",
                        "type": "boolean",
                        "example": true
                    },
                    "items": {
                        "description": "Список name-серверов",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "host": {
                                    "description": "Хост name-сервера.",
                                    "type": "string",
                                    "example": "ns1.timeweb.ru"
                                },
                                "ips": {
                                    "description": "Список IP-адресов name-сервера",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "98.76.54.32"
                                    }
                                }
                            },
                            "required": [
                                "host",
                                "ips"
                            ]
                        }
                    },
                    "task_status": {
                        "description": "Статус добавления name-сервера.",
                        "type": "string",
                        "enum": [
                            "done",
                            "active",
                            "failed"
                        ],
                        "example": "done"
                    }
                },
                "required": [
                    "is_delegation_allowed",
                    "task_status",
                    "items"
                ]
            },
            "update-domain-name-servers": {
                "type": "object",
                "properties": {
                    "name_servers": {
                        "description": "Список новых name-серверов для домена",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "host": {
                                    "description": "Хост name-сервера.",
                                    "type": "string",
                                    "example": "ns1.timeweb.ru"
                                },
                                "ips": {
                                    "description": "Список IP-адресов name-сервера",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "98.76.54.32"
                                    }
                                }
                            },
                            "required": [
                                "host"
                            ]
                        }
                    }
                },
                "required": [
                    "name_servers"
                ]
            },
            "domain-prime-type": {
                "title": "Тип прайм домена",
                "description": "Тип прайм домена.",
                "type": "string",
                "enum": [
                    "extra",
                    "premium",
                    "optimal",
                    "maximal"
                ],
                "example": "maximal"
            },
            "domain-request": {
                "description": "Заявка на продление/регистрацию/трансфер домена.",
                "type": "object",
                "properties": {
                    "account_id": {
                        "description": "Идентификатор пользователя",
                        "type": "string",
                        "example": "cp78562"
                    },
                    "auth_code": {
                        "description": "Код авторизации для переноса домена.",
                        "type": "string",
                        "nullable": true,
                        "example": "code"
                    },
                    "date": {
                        "description": "Дата создания заявки.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-31T12:51:00.710Z"
                    },
                    "domain_bundle_id": {
                        "description": "Идентификационный номер бандла, в который входит данная заявка (null - если заявка не входит ни в один бандл).",
                        "type": "string",
                        "nullable": true,
                        "example": null
                    },
                    "error_code_transfer": {
                        "description": "Код ошибки трансфера домена.",
                        "type": "string",
                        "nullable": true,
                        "example": null
                    },
                    "fqdn": {
                        "description": "Полное имя домена.",
                        "type": "string",
                        "example": "somedomain.com"
                    },
                    "group_id": {
                        "description": "Идентификатор группы доменных зон.",
                        "type": "number",
                        "example": 123
                    },
                    "id": {
                        "description": "Идентификатор заявки.",
                        "type": "number",
                        "example": 123
                    },
                    "is_antispam_enabled": {
                        "description": "Это логическое значение, которое показывает включена ли услуга \"Антиспам\" для домена",
                        "type": "boolean",
                        "example": false
                    },
                    "is_autoprolong_enabled": {
                        "description": "Это логическое значение, которое показывает, включено ли автопродление домена.",
                        "type": "boolean",
                        "example": true
                    },
                    "is_whois_privacy_enabled": {
                        "description": "Это логическое значение, которое показывает, включено ли скрытие данных администратора домена для whois. Опция недоступна для доменов в зонах .ru и .рф.",
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "description": "Информационное сообщение о заявке.",
                        "type": "string",
                        "nullable": true,
                        "example": "message"
                    },
                    "money_source": {
                        "description": "Источник (способ) оплаты заявки.",
                        "type": "string",
                        "enum": [
                            "use",
                            "bonus",
                            "invoice"
                        ],
                        "nullable": true,
                        "example": "use"
                    },
                    "period": {
                        "$ref": "#/components/schemas/domain-payment-period"
                    },
                    "person_id": {
                        "description": "Идентификационный номер персоны для заявки на регистрацию.",
                        "type": "number",
                        "example": 123
                    },
                    "prime": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/domain-prime-type"
                            }
                        ],
                        "example": "maximal"
                    },
                    "soon_expire": {
                        "description": "Количество дней до конца регистрации домена, за которые мы уведомим о необходимости продления.",
                        "type": "number",
                        "example": 30
                    },
                    "sort_order": {
                        "description": "Это значение используется для сортировки доменных зон в панели управления.",
                        "type": "number",
                        "example": 123
                    },
                    "type": {
                        "description": "Тип заявки.",
                        "type": "string",
                        "enum": [
                            "request",
                            "prolong",
                            "transfer"
                        ],
                        "example": "request"
                    }
                },
                "required": [
                    "is_antispam_enabled",
                    "auth_code",
                    "is_autoprolong_enabled",
                    "account_id",
                    "date",
                    "domain_bundle_id",
                    "error_code_transfer",
                    "fqdn",
                    "group_id",
                    "id",
                    "message",
                    "money_source",
                    "period",
                    "person_id",
                    "prime",
                    "soon_expire",
                    "sort_order",
                    "type",
                    "is_whois_privacy_enabled"
                ]
            },
            "register": {
                "title": "Заявка на регистрацию домена",
                "description": "Заявка на регистрацию домена",
                "type": "object",
                "properties": {
                    "action": {
                        "description": "Тип создаваемой заявки.",
                        "const": "register",
                        "type": "string",
                        "example": "register"
                    },
                    "fqdn": {
                        "description": "Полное имя домена.",
                        "type": "string",
                        "example": "somedomain.ru"
                    },
                    "is_autoprolong_enabled": {
                        "description": "Это логическое значение, которое показывает, включено ли автопродление домена.",
                        "type": "boolean",
                        "example": true
                    },
                    "is_whois_privacy_enabled": {
                        "description": "Это логическое значение, которое показывает, включено ли скрытие данных администратора домена для whois. Опция недоступна для доменов в зонах .ru и .рф.",
                        "type": "boolean",
                        "example": true
                    },
                    "ns": {
                        "description": "Name-сервера для регистрации домена. В случае если не передавать этот параметр, будут использованы наши стандартные Name-серверы. Нужно указать как минимум 2 name-сервера.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "host": {
                                    "description": "Хост name-сервера.",
                                    "type": "string",
                                    "example": "ns1.timeweb.ru"
                                },
                                "ips": {
                                    "description": "Список IP-адресов name-сервера",
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "192.168.1.1"
                                    }
                                }
                            },
                            "required": [
                                "host",
                                "ips"
                            ]
                        }
                    },
                    "period": {
                        "$ref": "#/components/schemas/domain-payment-period"
                    },
                    "person_id": {
                        "description": "Идентификатор администратора, на которого регистрируется домен.",
                        "type": "number",
                        "example": 123
                    }
                },
                "required": [
                    "action",
                    "fqdn",
                    "person_id"
                ]
            },
            "prolong": {
                "title": "Заявка на продление домена",
                "description": "Заявка на продление домена",
                "type": "object",
                "properties": {
                    "action": {
                        "description": "Тип создаваемой заявки.",
                        "const": "prolong",
                        "type": "string",
                        "example": "prolong"
                    },
                    "fqdn": {
                        "description": "Полное имя домена.",
                        "type": "string",
                        "example": "somedomain.ru"
                    },
                    "is_antispam_enabled": {
                        "description": "Это логическое значение, которое показывает включена ли услуга \"Антиспам\" для домена",
                        "type": "boolean",
                        "example": false
                    },
                    "is_autoprolong_enabled": {
                        "description": "Это логическое значение, которое показывает, включено ли автопродление домена.",
                        "type": "boolean",
                        "example": true
                    },
                    "is_whois_privacy_enabled": {
                        "description": "Это логическое значение, которое показывает, включено ли скрытие данных администратора домена для whois. Опция недоступна для доменов в зонах .ru и .рф.",
                        "type": "boolean",
                        "example": true
                    },
                    "period": {
                        "$ref": "#/components/schemas/domain-payment-period"
                    },
                    "person_id": {
                        "description": "Идентификатор администратора, на которого зарегистрирован домен.",
                        "type": "number",
                        "example": 123
                    },
                    "prime": {
                        "$ref": "#/components/schemas/domain-prime-type"
                    }
                },
                "required": [
                    "action",
                    "fqdn"
                ]
            },
            "transfer": {
                "title": "Заявка на перенос домена",
                "description": "Заявка на перенос домена",
                "type": "object",
                "properties": {
                    "action": {
                        "description": "Тип создаваемой заявки.",
                        "const": "transfer",
                        "type": "string",
                        "example": "transfer"
                    },
                    "auth_code": {
                        "description": "Код авторизации для переноса домена.",
                        "type": "string",
                        "example": "code"
                    },
                    "fqdn": {
                        "description": "Полное имя домена.",
                        "type": "string",
                        "example": "somedomain.ru"
                    }
                },
                "required": [
                    "action",
                    "fqdn",
                    "auth_code"
                ]
            },
            "use": {
                "title": "Оплата заявки на продление/регистрацию домена с баланса аккаунта",
                "description": "Оплата заявки на продление/регистрацию домена с баланса аккаунта",
                "type": "object",
                "properties": {
                    "money_source": {
                        "description": "Тип создаваемой заявки.",
                        "const": "use",
                        "type": "string",
                        "example": "use"
                    },
                    "person_id": {
                        "description": "Идентификатор администратора, на которого зарегистрирован домен.",
                        "type": "number",
                        "example": 123
                    }
                },
                "required": [
                    "money_source"
                ]
            },
            "invoice": {
                "title": "Оплата заявки на продление/регистрацию домена при помощи платежной системы",
                "description": "Оплата заявки на продление/регистрацию домена при помощи платежной системы",
                "type": "object",
                "properties": {
                    "money_source": {
                        "description": "Тип создаваемой заявки.",
                        "const": "invoice",
                        "type": "string",
                        "example": "invoice"
                    },
                    "person_id": {
                        "description": "Идентификатор администратора, на которого зарегистрирован домен.",
                        "type": "number",
                        "example": 123
                    },
                    "payment_type": {
                        "description": "Тип платежной системы.",
                        "type": "string",
                        "enum": [
                            "receipt",
                            "card",
                            "mobile-card",
                            "wm",
                            "webmoney",
                            "yandex",
                            "ya",
                            "invoice",
                            "sofort",
                            "qiwi_wallet",
                            "wechat"
                        ],
                        "example": 123
                    },
                    "payer_id": {
                        "description": "Идентификационный номер плательщика",
                        "type": "number",
                        "example": 123
                    }
                },
                "required": [
                    "money_source",
                    "payment_type",
                    "payer_id"
                ]
            },
            "free": {
                "title": "Обновление заявки на перенос домена",
                "description": "Обновление заявки на перенос домена",
                "type": "object",
                "properties": {
                    "money_source": {
                        "description": "Тип создаваемой заявки.",
                        "const": "free",
                        "type": "string",
                        "example": "free"
                    },
                    "person_id": {
                        "description": "Идентификатор администратора, на которого зарегистрирован домен.",
                        "type": "number",
                        "example": 123
                    },
                    "auth_code": {
                        "description": "Код авторизации для переноса домена.",
                        "type": "string",
                        "example": "code"
                    }
                },
                "required": [
                    "money_source",
                    "auth_code"
                ]
            },
            "bonus": {
                "title": "Оплата заявки на продление/регистрацию домена бонусом",
                "description": "Оплата заявки на продление/регистрацию домена бонусом",
                "type": "object",
                "properties": {
                    "money_source": {
                        "description": "Тип создаваемой заявки.",
                        "const": "bonus",
                        "type": "string",
                        "example": "bonus"
                    },
                    "person_id": {
                        "description": "Идентификатор администратора, на которого зарегистрирован домен.",
                        "type": "number",
                        "example": 123
                    },
                    "bonus_id": {
                        "description": "Идентификатор бонуса.",
                        "type": "number",
                        "example": 123
                    }
                },
                "required": [
                    "money_source",
                    "bonus_id"
                ]
            },
            "top-level-domain": {
                "description": "Доменная зона.",
                "type": "object",
                "properties": {
                    "allowed_buy_periods": {
                        "description": "Список доступных периодов для регистрации/продления доменов со стоимостью.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "period": {
                                    "description": "Период регистрации/продления домена.",
                                    "type": "string",
                                    "example": "P1Y"
                                },
                                "price": {
                                    "description": "Цена регистрации/продления домена.",
                                    "type": "number",
                                    "example": 123
                                }
                            },
                            "required": [
                                "period",
                                "price"
                            ]
                        }
                    },
                    "early_renew_period": {
                        "description": "Количество дней до истечение срока регистрации, когда можно продлять домен.",
                        "type": "number",
                        "nullable": true,
                        "example": 60
                    },
                    "grace_period": {
                        "description": "Количество дней, которые действует льготный период когда вы ещё можете продлить домен, после окончания его регистрации",
                        "type": "number",
                        "example": 30
                    },
                    "id": {
                        "description": "Идентификатор доменной зоны.",
                        "type": "number",
                        "example": 123
                    },
                    "is_published": {
                        "description": "Это логическое значение, которое показывает, опубликована ли доменная зона.",
                        "type": "boolean",
                        "example": true
                    },
                    "is_registered": {
                        "description": "Это логическое значение, которое показывает, зарегистрирована ли доменная зона.",
                        "type": "boolean",
                        "example": true
                    },
                    "is_whois_privacy_default_enabled": {
                        "description": "Это логическое значение, которое показывает, включено ли по умолчанию скрытие данных администратора для доменной зоны.",
                        "type": "boolean",
                        "example": true
                    },
                    "is_whois_privacy_enabled": {
                        "description": "Это логическое значение, которое показывает, доступно ли управление скрытием данных администратора для доменной зоны.",
                        "type": "boolean",
                        "example": true
                    },
                    "name": {
                        "description": "Имя доменной зоны.",
                        "type": "string",
                        "example": "ru"
                    },
                    "price": {
                        "description": "Цена регистрации домена",
                        "type": "number",
                        "example": 100
                    },
                    "prolong_price": {
                        "description": "Цена продления домена.",
                        "type": "number",
                        "example": 100
                    },
                    "registrar": {
                        "description": "Регистратор доменной зоны.",
                        "type": "string",
                        "enum": [
                            "NIC",
                            "PDR",
                            "R01",
                            "timeweb",
                            "TimewebVirtreg",
                            "Webnames",
                            "unknown"
                        ],
                        "example": "TimewebVirtreg"
                    },
                    "transfer": {
                        "description": "Цена услуги трансфера домена.",
                        "type": "number",
                        "example": 0
                    },
                    "whois_privacy_price": {
                        "description": "Цена услуги скрытия данных администратора для доменной зоны.",
                        "type": "number",
                        "example": 300
                    }
                },
                "required": [
                    "early_renew_period",
                    "grace_period",
                    "id",
                    "name",
                    "price",
                    "prolong_price",
                    "is_published",
                    "is_registered",
                    "registrar",
                    "transfer",
                    "is_whois_privacy_enabled",
                    "is_whois_privacy_default_enabled",
                    "whois_privacy_price",
                    "allowed_buy_periods"
                ]
            },
            "ssh-key": {
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "Уникальный идентификатор SSH-ключа",
                        "example": 2
                    },
                    "name": {
                        "type": "string",
                        "description": "Название SSH-ключа",
                        "example": "ssh key"
                    },
                    "body": {
                        "type": "string",
                        "description": "Тело SSH-ключа",
                        "example": "ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzvbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjrVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru"
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Дата создания ключа",
                        "format": "date-time",
                        "example": "2023-02-06T17:33:13Z"
                    },
                    "used_by": {
                        "type": "array",
                        "description": "Список серверов, которые используют SSH-ключ",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Уникальный идентификатор сервера",
                                    "type": "number",
                                    "example": 3
                                },
                                "name": {
                                    "description": "Название сервера",
                                    "type": "string",
                                    "example": "test"
                                }
                            },
                            "required": [
                                "id",
                                "name"
                            ]
                        }
                    },
                    "is_default": {
                        "type": "boolean",
                        "description": "Будет ли выбираться SSh-ключ по умолчанию при создании сервера"
                    }
                },
                "required": [
                    "is_enabled",
                    "id",
                    "name",
                    "body",
                    "created_at",
                    "used_by"
                ]
            }
        },
        "parameters": {
            "limit": {
                "description": "Обозначает количество записей, которое необходимо вернуть.",
                "in": "query",
                "name": "limit",
                "required": false,
                "schema": {
                    "type": "integer",
                    "default": 100
                }
            },
            "offset": {
                "description": "Указывает на смещение относительно начала списка.",
                "in": "query",
                "name": "offset",
                "required": false,
                "schema": {
                    "type": "integer",
                    "default": 0
                }
            },
            "balancer-id": {
                "description": "Идентификатор балансировщика",
                "in": "path",
                "name": "balancer_id",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "rule-id": {
                "description": "Идентификатор правила для балансировщика",
                "in": "path",
                "name": "rule_id",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "dbs-id": {
                "description": "Идентификатор базы данных",
                "in": "path",
                "name": "db_id",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "backup-id": {
                "description": "Идентификатор резевной копии",
                "in": "path",
                "name": "backup_id",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "dedicated-id": {
                "in": "path",
                "name": "dedicated_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1051
                },
                "description": "Уникальный идентификатор выделенного сервера."
            },
            "preset-id": {
                "in": "path",
                "name": "preset_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1051
                },
                "description": "Уникальный идентификатор тарифа выделенного сервера."
            },
            "server-id": {
                "in": "path",
                "name": "server_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1051
                },
                "description": "Уникальный идентификатор облачного сервера."
            },
            "disk-id": {
                "in": "path",
                "name": "disk_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1051
                },
                "description": "Уникальный идентификатор диска сервера."
            },
            "server-backup-id": {
                "in": "path",
                "name": "backup_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1051
                },
                "description": "Уникальный идентификатор бэкапа сервера."
            },
            "project-id": {
                "in": "path",
                "name": "project_id",
                "required": true,
                "schema": {
                    "type": "number",
                    "minimum": 1,
                    "example": 99
                },
                "description": "Уникальный идентификатор проекта."
            },
            "bucket-id": {
                "in": "path",
                "name": "bucket_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1051
                },
                "description": "Уникальный идентификатор хранилища."
            },
            "user-id": {
                "in": "path",
                "name": "user_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1051
                },
                "description": "Уникальный идентификатор пользователя хранилища."
            },
            "prefix": {
                "in": "query",
                "name": "prefix",
                "required": false,
                "schema": {
                    "type": "string",
                    "example": "example"
                },
                "description": "Префикс для поиска файла."
            },
            "multipart": {
                "in": "query",
                "name": "is_multipart",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "example": true
                },
                "description": "Это логическое значение, которое используется для обозначения multipart загрузки."
            },
            "path": {
                "in": "query",
                "name": "path",
                "required": false,
                "schema": {
                    "type": "string",
                    "example": "test1/tes2"
                },
                "description": "Путь до директории в хранилище"
            },
            "api-key-id": {
                "description": "Идентификатор токена",
                "in": "path",
                "name": "token_id",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "search": {
                "description": "Поиск почтового ящика по названию",
                "in": "query",
                "name": "search",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "domain": {
                "description": "Полное имя домена",
                "in": "path",
                "name": "domain",
                "required": true,
                "schema": {
                    "type": "string",
                    "example": "somedomain.ru"
                }
            },
            "mailbox": {
                "description": "Название почтового ящика",
                "in": "path",
                "name": "mailbox",
                "required": true,
                "schema": {
                    "type": "string",
                    "example": "mailbox"
                }
            },
            "idn-name": {
                "description": "Интернационализированное доменное имя.",
                "in": "query",
                "name": "idn_name",
                "required": false,
                "schema": {
                    "type": "string",
                    "example": "xn--e1afmkfd.xn--p1ai"
                }
            },
            "linked-ip": {
                "description": "Привязанный к домену IP-адрес.",
                "in": "query",
                "name": "linked_ip",
                "required": false,
                "schema": {
                    "type": "string",
                    "example": "192.168.1.1"
                }
            },
            "order": {
                "description": "Порядок доменов.",
                "in": "query",
                "name": "order",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "dsc"
                    ],
                    "example": "asc"
                }
            },
            "sort": {
                "description": "Сортировка доменов.",
                "in": "query",
                "name": "sort",
                "required": false,
                "schema": {
                    "const": "idn_name",
                    "type": "string"
                }
            },
            "domain-fqdn": {
                "description": "Полное имя домена.",
                "in": "path",
                "name": "fqdn",
                "required": true,
                "schema": {
                    "type": "string",
                    "example": "somedomain.ru"
                }
            },
            "domain-subdomain-fqdn": {
                "description": "Полное имя домена или поддомена.",
                "in": "path",
                "name": "fqdn",
                "required": true,
                "schema": {
                    "type": "string",
                    "example": "somedomain.ru"
                }
            },
            "record-id": {
                "description": "Идентификатор DNS-записи домена или поддомена.",
                "in": "path",
                "name": "record_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "example": 123
                }
            },
            "subdomain-fqdn": {
                "description": "Полное имя поддомена.",
                "in": "path",
                "name": "subdomain_fqdn",
                "required": true,
                "schema": {
                    "type": "string",
                    "example": "sub.somedomain.ru"
                }
            },
            "person-id": {
                "description": "Идентификатор администратора, на которого зарегистрирован домен.",
                "in": "query",
                "name": "person_id",
                "required": false,
                "schema": {
                    "type": "integer",
                    "example": 123
                }
            },
            "request-id": {
                "description": "Идентификатор заявки на регистрацию/продление/трансфер домена.",
                "in": "path",
                "name": "request_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "example": 123
                }
            },
            "is-published": {
                "description": "Это логическое значение, которое показывает, опубликована ли доменная зона.",
                "in": "query",
                "name": "is_published",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "example": true
                }
            },
            "is-registered": {
                "description": "Это логическое значение, которое показывает, зарегистрирована ли доменная зона.",
                "in": "query",
                "name": "is_registered",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "example": true
                }
            },
            "tld-id": {
                "description": "Идентификатор доменной зоны.",
                "in": "path",
                "name": "tld_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "example": 123
                }
            },
            "ssh-key-id": {
                "in": "path",
                "name": "ssh_key_id",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1051
                },
                "description": "Уникальный идентификатор SSH-ключа"
            }
        }
    }
}